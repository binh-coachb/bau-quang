///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               29/Apr/2017  14:21:01
// Copyright 2004-2016 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\Source\SimpleCollector.c
//    Command line       =  
//        -f "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0x1111
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\Source\SimpleCollector.c" -D
//        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
//        NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_SAPI_FUNC
//        -D xMT_SAPI_CB_FUNC -D HAL_UART=TRUE -D HAL_KEY=FALSE -lC
//        "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleCollectorEB\List"
//        -lA "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleCollectorEB\List"
//        --diag_suppress Pe001,Pa010 -o "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleCollectorEB\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 8 -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\" -I
//        "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\Source\" -I
//        "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleCollectorEB\List\SimpleCollector.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME SimpleCollector

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??Uart0_Cb::?relay`,0203H
        PUBLIC `??zb_AllowBindConfirm::?relay`
        FUNCTION `??zb_AllowBindConfirm::?relay`,0203H
        PUBLIC `??zb_BindConfirm::?relay`
        FUNCTION `??zb_BindConfirm::?relay`,0203H
        PUBLIC `??zb_FindDeviceConfirm::?relay`
        FUNCTION `??zb_FindDeviceConfirm::?relay`,0203H
        PUBLIC `??zb_HandleKeys::?relay`
        FUNCTION `??zb_HandleKeys::?relay`,0203H
        PUBLIC `??zb_HandleOsalEvent::?relay`
        FUNCTION `??zb_HandleOsalEvent::?relay`,0203H
        PUBLIC `??zb_ReceiveDataIndication::?relay`
        FUNCTION `??zb_ReceiveDataIndication::?relay`,0203H
        PUBLIC `??zb_SendDataConfirm::?relay`
        FUNCTION `??zb_SendDataConfirm::?relay`,0203H
        PUBLIC `??zb_StartConfirm::?relay`
        FUNCTION `??zb_StartConfirm::?relay`,0203H
        FUNCTION Uart0_Cb,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC zb_AllowBindConfirm
        FUNCTION zb_AllowBindConfirm,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zb_BindConfirm
        FUNCTION zb_BindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_FindDeviceConfirm
        FUNCTION zb_FindDeviceConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleKeys
        FUNCTION zb_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleOsalEvent
        FUNCTION zb_HandleOsalEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        PUBLIC zb_InCmdList
        PUBLIC zb_OutCmdList
        PUBLIC zb_ReceiveDataIndication
        FUNCTION zb_ReceiveDataIndication,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zb_SendDataConfirm
        FUNCTION zb_SendDataConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_SimpleDesc
        PUBLIC zb_StartConfirm
        FUNCTION zb_StartConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
`??Hal_UART_RxBufLen::?relay` SYMBOL "?relay", Hal_UART_RxBufLen
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_strlen         SYMBOL "osal_strlen"
`??osal_strlen::?relay` SYMBOL "?relay", osal_strlen
zb_AllowBind        SYMBOL "zb_AllowBind"
`??zb_AllowBind::?relay` SYMBOL "?relay", zb_AllowBind
zb_ReadConfiguration SYMBOL "zb_ReadConfiguration"
`??zb_ReadConfiguration::?relay` SYMBOL "?relay", zb_ReadConfiguration
zb_SendDataRequest  SYMBOL "zb_SendDataRequest"
`??zb_SendDataRequest::?relay` SYMBOL "?relay", zb_SendDataRequest
zb_SystemReset      SYMBOL "zb_SystemReset"
`??zb_SystemReset::?relay` SYMBOL "?relay", zb_SystemReset
zb_WriteConfiguration SYMBOL "zb_WriteConfiguration"
`??zb_WriteConfiguration::?relay` SYMBOL "?relay", zb_WriteConfiguration
zb_AllowBindConfirm SYMBOL "zb_AllowBindConfirm"
`??zb_AllowBindConfirm::?relay` SYMBOL "?relay", zb_AllowBindConfirm
zb_BindConfirm      SYMBOL "zb_BindConfirm"
`??zb_BindConfirm::?relay` SYMBOL "?relay", zb_BindConfirm
zb_FindDeviceConfirm SYMBOL "zb_FindDeviceConfirm"
`??zb_FindDeviceConfirm::?relay` SYMBOL "?relay", zb_FindDeviceConfirm
zb_HandleKeys       SYMBOL "zb_HandleKeys"
`??zb_HandleKeys::?relay` SYMBOL "?relay", zb_HandleKeys
zb_HandleOsalEvent  SYMBOL "zb_HandleOsalEvent"
`??zb_HandleOsalEvent::?relay` SYMBOL "?relay", zb_HandleOsalEvent
zb_ReceiveDataIndication SYMBOL "zb_ReceiveDataIndication"
`??zb_ReceiveDataIndication::?relay` SYMBOL "?relay", zb_ReceiveDataIndication
zb_SendDataConfirm  SYMBOL "zb_SendDataConfirm"
`??zb_SendDataConfirm::?relay` SYMBOL "?relay", zb_SendDataConfirm
zb_StartConfirm     SYMBOL "zb_StartConfirm"
`??zb_StartConfirm::?relay` SYMBOL "?relay", zb_StartConfirm

        EXTERN `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,00H
        EXTERN `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??Hal_UART_RxBufLen::?relay`
        FUNCTION `??Hal_UART_RxBufLen::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_strlen::?relay`
        FUNCTION `??osal_strlen::?relay`,00H
        EXTERN `??zb_AllowBind::?relay`
        FUNCTION `??zb_AllowBind::?relay`,00H
        EXTERN `??zb_ReadConfiguration::?relay`
        FUNCTION `??zb_ReadConfiguration::?relay`,00H
        EXTERN `??zb_SendDataRequest::?relay`
        FUNCTION `??zb_SendDataRequest::?relay`,00H
        EXTERN `??zb_SystemReset::?relay`
        FUNCTION `??zb_SystemReset::?relay`,00H
        EXTERN `??zb_WriteConfiguration::?relay`
        FUNCTION `??zb_WriteConfiguration::?relay`,00H
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sapi_TaskID
        EXTERN zb_AllowBind
        FUNCTION zb_AllowBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_ReadConfiguration
        FUNCTION zb_ReadConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SendDataRequest
        FUNCTION zb_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SystemReset
        FUNCTION zb_SystemReset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_WriteConfiguration
        FUNCTION zb_WriteConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\DAT\bau-quang\CodeZigbee - CC2530\Projects\zstack\Samples\SimpleApp\Source\SimpleCollector.c
//    1 
//    2 /******************************************************************************
//    3  * INCLUDES
//    4  */
//    5 
//    6 #include "ZComDef.h"
//    7 #include "OSAL.h"
//    8 #include "sapi.h"
//    9 #include "hal_key.h"
//   10 #include "hal_led.h"
//   11 #include "DebugTrace.h"
//   12 #include "SimpleApp.h"
//   13 #include "hal_uart.h"
//   14 
//   15 /*********************************************************************
//   16  * CONSTANTS
//   17  */
//   18 
//   19 // Application States
//   20 #define APP_INIT                           0
//   21 #define APP_START                          1
//   22 
//   23 // Application osal event identifiers
//   24 #define MY_START_EVT                0x0001
//   25 
//   26 // Same definitions as in SimpleSensor.c
//   27 #define TEMP_REPORT     0x01
//   28 #define BATTERY_REPORT 0x02
//   29 /*********************************************************************
//   30  * TYPEDEFS
//   31  */
//   32 
//   33 /*********************************************************************
//   34  * LOCAL VARIABLES
//   35  */
//   36 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   37 static uint8 myAppState = APP_INIT;
myAppState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   38 static uint8 myStartRetryDelay = 10;
myStartRetryDelay:
        DATA8
        DS 1
        REQUIRE `?<Initializer for myStartRetryDelay>`
        REQUIRE __INIT_XDATA_I
//   39 static void Uart0_Cb(uint8 port, uint8 event);
//   40 /*********************************************************************
//   41  * GLOBAL VARIABLES
//   42  */
//   43 
//   44 // Inputs and Outputs for Collector device
//   45 #define NUM_OUT_CMD_COLLECTOR                1
//   46 #define NUM_IN_CMD_COLLECTOR                 1
//   47 
//   48 // List of output and input commands for Collector device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   49 const cId_t zb_InCmdList[NUM_IN_CMD_COLLECTOR] =
zb_InCmdList:
        DW 2
//   50 {
//   51   SENSOR_REPORT_CMD_ID
//   52 };
//   53 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   54 const cId_t zb_OutCmdList[NUM_OUT_CMD_COLLECTOR] =
zb_OutCmdList:
        DW 3
//   55 {
//   56   CTRL_PUMP_CMD_ID
//   57 };
//   58 
//   59 // Define SimpleDescriptor for Collector device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   60 const SimpleDescriptionFormat_t zb_SimpleDesc =
zb_SimpleDesc:
        DB 2
        DATA16
        DW 3856
        DW 4
        DATA8
        DB 1
        DB 1
        DATA16
        DW zb_InCmdList
        DATA8
        DB 1
        DATA16
        DW zb_OutCmdList
//   61 {
//   62   MY_ENDPOINT_ID,             //  Endpoint
//   63   MY_PROFILE_ID,              //  Profile ID
//   64   DEV_ID_COLLECTOR,          //  Device ID
//   65   DEVICE_VERSION_COLLECTOR,  //  Device Version
//   66   0,                          //  Reserved
//   67   NUM_IN_CMD_COLLECTOR,      //  Number of Input Commands
//   68   (cId_t *) zb_InCmdList,     //  Input Command List
//   69   NUM_OUT_CMD_COLLECTOR,     //  Number of Output Commands
//   70   (cId_t *) zb_OutCmdList     //  Output Command List
//   71 };
//   72 
//   73 /******************************************************************************
//   74  * @fn          zb_HandleOsalEvent
//   75  *
//   76  * @brief       The zb_HandleOsalEvent function is called by the operating
//   77  *              system when a task event is set
//   78  *
//   79  * @param       event - Bitmask containing the events that have been set
//   80  *
//   81  * @return      none
//   82  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   83 void zb_HandleOsalEvent( uint16 event )
zb_HandleOsalEvent:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zb_HandleOsalEvent
        CODE
//   84 {
        FUNCALL zb_HandleOsalEvent, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_ReadConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 31
        MOV     A,#-0x1f
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
//   85   uint8 startOptions;
//   86   uint8 logicalType;
//   87   
//   88   if( event & ZB_ENTRY_EVENT ){
        MOV     A,R3
        ANL     A,#0x10
        JNZ     $+5
        LJMP    ??zb_HandleOsalEvent_0 & 0xFFFF
//   89     halUARTCfg_t uConfig;
//   90     uConfig.configured = TRUE; 
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//   91     uConfig.baudRate = HAL_UART_BR_9600;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//   92     uConfig.flowControl = FALSE;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//   93     uConfig.flowControlThreshold = 48;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x30
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   94     uConfig.idleTimeout = 6; 
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//   95     uConfig.rx.maxBufSize = 128;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   96     uConfig.tx.maxBufSize = 128;      
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   97     uConfig.intEnable = TRUE;//enable interrupts
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//   98     uConfig.callBackFunc = &Uart0_Cb;
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`??Uart0_Cb::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??Uart0_Cb::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//   99     HalUARTOpen(HAL_UART_PORT_0,&uConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x0
        LCALL   `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
//  100     HalUARTWrite(HAL_UART_PORT_0,"\nENTRY\n", (byte)osal_strlen("\nENTRY\n"));      
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "\\nENTRY\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\nENTRY\\n">` >> 8) & 0xff
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V0,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V0
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\nENTRY\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\nENTRY\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  101     
//  102     startOptions = ZCD_STARTOPT_CLEAR_STATE | ZCD_STARTOPT_CLEAR_CONFIG;    
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x3
        MOVX    @DPTR,A
//  103     zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x1
        MOV     R1,A
        LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
//  104     
//  105     logicalType = ZG_DEVICETYPE_COORDINATOR;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  106     zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
        ; Setup parameters for call to function zb_WriteConfiguration
        INC     A
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
//  107     
//  108     zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_ReadConfiguration
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   `??zb_ReadConfiguration::?relay`; Banked call to: zb_ReadConfiguration
//  109     startOptions = ZCD_STARTOPT_AUTO_START;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  110     zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
//  111     
//  112   }
//  113 }
??zb_HandleOsalEvent_0:
        MOV     A,#0x1f
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  114 /*********************************************************************
//  115  * @fn      zb_HandleKeys
//  116  *
//  117  * @brief   Handles all key events for this device.
//  118  *
//  119  * @param   shift - true if in shift/alt.
//  120  * @param   keys - bit field for key events. Valid entries:
//  121  *                 EVAL_SW4
//  122  *                 EVAL_SW3
//  123  *                 EVAL_SW2
//  124  *                 EVAL_SW1
//  125  *
//  126  * @return  none
//  127  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  128 void zb_HandleKeys( uint8 shift, uint8 keys )
zb_HandleKeys:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zb_HandleKeys
        CODE
//  129 {
        ; Saved register size: 0
        ; Auto size: 0
//  130   return;
        LJMP    ?BRET
//  131 }
          CFI EndBlock cfiBlock2
//  132 /******************************************************************************
//  133  * @fn          zb_StartConfirm
//  134  *
//  135  * @brief       The zb_StartConfirm callback is called by the ZigBee stack
//  136  *              after a start request operation completes
//  137  *
//  138  * @param       status - The status of the start operation.  Status of
//  139  *                       ZB_SUCCESS indicates the start operation completed
//  140  *                       successfully.  Else the status is an error code.
//  141  *
//  142  * @return      none
//  143  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  144 void zb_StartConfirm( uint8 status )
zb_StartConfirm:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zb_StartConfirm
        CODE
//  145 {
        FUNCALL zb_StartConfirm, zb_AllowBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  146 
//  147  // If the device sucessfully started, change state to running
//  148   if ( status == ZB_SUCCESS )//Bay h da xac dinh dc logicMode
        JNZ     ??zb_StartConfirm_0
//  149   {
//  150     myAppState = APP_START;
        MOV     DPTR,#myAppState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  151     zb_AllowBind( 0xFF );
        ; Setup parameters for call to function zb_AllowBind
        MOV     R1,#-0x1
        LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
        SJMP    ??zb_StartConfirm_1
//  152   }
//  153   else
//  154   {
//  155     // Try again later with a delay
//  156     osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
??zb_StartConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myStartRetryDelay
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  157   }
//  158 }
??zb_StartConfirm_1:
          CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  159 /******************************************************************************
//  160  * @fn          zb_SendDataConfirm
//  161  *
//  162  * @brief       The zb_SendDataConfirm callback function is called by the
//  163  *              ZigBee after a send data operation completes
//  164  *
//  165  * @param       handle - The handle identifying the data transmission.
//  166  *              status - The status of the operation.
//  167  *
//  168  * @return      none
//  169  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  170 void zb_SendDataConfirm( uint8 handle, uint8 status )
zb_SendDataConfirm:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zb_SendDataConfirm
        CODE
//  171 {
        ; Saved register size: 0
        ; Auto size: 0
//  172   //HalUARTWrite(HAL_UART_PORT_0,"SendDataConfirm ", (byte)osal_strlen("SendDataConfirm ")); 
//  173   /*if ( status != ZSuccess )
//  174   { 
//  175     HalUARTWrite(HAL_UART_PORT_0,"Fail\n", (byte)osal_strlen("Fail\n"));
//  176   }
//  177   else {
//  178     HalUARTWrite(HAL_UART_PORT_0,"Success\n", (byte)osal_strlen("Success\n"));
//  179   }*/
//  180 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock5
//  181 /******************************************************************************
//  182  * @fn          zb_BindConfirm
//  183  *
//  184  * @brief       The zb_BindConfirm callback is called by the ZigBee stack
//  185  *              after a bind operation completes.
//  186  *
//  187  * @param       commandId - The command ID of the binding being confirmed.
//  188  *              status - The status of the bind operation.
//  189  *
//  190  * @return      none
//  191  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  192 void zb_BindConfirm( uint16 commandId, uint8 status )
zb_BindConfirm:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zb_BindConfirm
        CODE
//  193 {
        ; Saved register size: 0
        ; Auto size: 0
//  194   //HalUARTWrite(HAL_UART_PORT_0,"BindConfirm\n", (byte)osal_strlen("BindConfirm\n")); 
//  195 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock6
//  196 /******************************************************************************
//  197  * @fn          zb_AllowBindConfirm
//  198  *
//  199  * @brief       Indicates when another device attempted to bind to this device
//  200  *
//  201  * @param
//  202  *
//  203  * @return      none
//  204  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  205 void zb_AllowBindConfirm( uint16 source )
zb_AllowBindConfirm:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zb_AllowBindConfirm
        CODE
//  206 {
        FUNCALL zb_AllowBindConfirm, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_AllowBindConfirm, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  207   HalUARTWrite(HAL_UART_PORT_0,"Allow\n", (byte)osal_strlen("Allow\n")); 
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "Allow\\n">` & 0xff
        MOV     R3,#(`?<Constant "Allow\\n">` >> 8) & 0xff
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V0,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V0
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Allow\\n">` & 0xff
        MOV     R3,#(`?<Constant "Allow\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  208 }
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock7
//  209 /******************************************************************************
//  210  * @fn          zb_FindDeviceConfirm
//  211  *
//  212  * @brief       The zb_FindDeviceConfirm callback function is called by the
//  213  *              ZigBee stack when a find device operation completes.
//  214  *
//  215  * @param       searchType - The type of search that was performed.
//  216  *              searchKey - Value that the search was executed on.
//  217  *              result - The result of the search.
//  218  *
//  219  * @return      none
//  220  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  221 void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
zb_FindDeviceConfirm:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function zb_FindDeviceConfirm
        CODE
//  222 {
        ; Saved register size: 0
        ; Auto size: 0
//  223   //HalUARTWrite(HAL_UART_PORT_0,"FindDeviceConfirm\n", (byte)osal_strlen("FindDeviceConfirm\n")); 
//  224 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock8
//  225 /******************************************************************************
//  226  * @fn          zb_ReceiveDataIndication
//  227  *
//  228  * @brief       The zb_ReceiveDataIndication callback function is called
//  229  *              asynchronously by the ZigBee stack to notify the application
//  230  *              when data is received from a peer device.
//  231  *
//  232  * @param       source - The short address of the peer device that sent the data
//  233  *              command - The commandId associated with the data
//  234  *              len - The number of bytes in the pData parameter
//  235  *              pData - The data sent by the peer device
//  236  *
//  237  * @return      none
//  238  */
//  239 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  240 void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData,int8 r_power  )
zb_ReceiveDataIndication:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zb_ReceiveDataIndication
        CODE
//  241 {
        FUNCALL zb_ReceiveDataIndication, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  242   static uint8 sendData[3];
//  243   if (command == SENSOR_REPORT_CMD_ID && len >=2 )
        MOV     A,#0x2
        XRL     A,R4
        ORL     A,R5
        JNZ     ??zb_ReceiveDataIndication_0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x2
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JC      ??zb_ReceiveDataIndication_0
//  244   {     
//  245     sendData[0] = '#';
        MOV     DPTR,#??sendData
        MOV     A,#0x23
        MOVX    @DPTR,A
//  246     sendData[1] = *(pData+1);
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#??sendData + 1
        MOVX    @DPTR,A
//  247     sendData[2] = r_power;
        MOV     A,R6
        INC     DPTR
        MOVX    @DPTR,A
//  248     HalUARTWrite(HAL_UART_PORT_0,sendData, (byte)3);  
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#??sendData & 0xff
        MOV     R3,#(??sendData >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  249     
//  250   }
//  251 }
??zb_ReceiveDataIndication_0:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock9

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??sendData:
        DS 3
        REQUIRE __INIT_XDATA_Z
//  252 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  253 static void Uart0_Cb(uint8 port, uint8 event){
Uart0_Cb:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function Uart0_Cb
        CODE
        FUNCALL Uart0_Cb, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,R1
        MOV     ?V1,R2
//  254   uint8  ch;
//  255   uint8 startOptions;
//  256   if ((event&HAL_UART_RX_TIMEOUT) || (event&HAL_UART_RX_ABOUT_FULL)){
        MOV     A,#0x6
        ANL     A,?V1
        JNZ     ??Uart0_Cb_0
//  257     while (Hal_UART_RxBufLen(port))
//  258     {
//  259       HalUARTRead ( port, &ch, 1);      
//  260       //0xFFFF Gui toi tat ca thiet bi khac
//  261       //0xFFFD Gui toi thiet bi dang turned ON
//  262       //0xFFFD Gui toi thiet bi la Coor va Rout
//  263       if( ch == '?' ){
//  264         HalUARTWrite(HAL_UART_PORT_0,"\nCoordinator\n", (byte)osal_strlen("\nCoordinator\n"));  
//  265       }
//  266       else if( ch == 'r' )
//  267       {
//  268           startOptions = ZCD_STARTOPT_CLEAR_STATE | ZCD_STARTOPT_CLEAR_CONFIG;
//  269           zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
//  270           zb_SystemReset();
//  271       }
//  272       else if( ch == 's' )
//  273       {        
//  274         static uint8 pData = 1;        
//  275         zb_SendDataRequest( 0xFFFF, CTRL_PUMP_CMD_ID, 1, &pData, 0, FALSE, 0 );
//  276         pData = ~pData;
//  277         HalUARTWrite(HAL_UART_PORT_0,"\nSent\n", (byte)osal_strlen("\nSent\n"));  
//  278       }
//  279       
//  280     }
//  281   }
//  282 }
??Uart0_Cb_1:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_XSP16 add(XSP16, 14)
??Uart0_Cb_2:
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "\\nCoordinator\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\nCoordinator\\n">` >> 8) & 0xff
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\nCoordinator\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\nCoordinator\\n">` >> 8) & 0xff
??Uart0_Cb_3:
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
??Uart0_Cb_0:
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     R1,?V0
        LCALL   `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JZ      ??Uart0_Cb_1
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,?V0
        LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x3f
        JZ      ??Uart0_Cb_2
        MOVX    A,@DPTR
        XRL     A,#0x72
        JNZ     ??Uart0_Cb_4
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
        ; Setup parameters for call to function zb_SystemReset
        LCALL   `??zb_SystemReset::?relay`; Banked call to: zb_SystemReset
        SJMP    ??Uart0_Cb_0
??Uart0_Cb_4:
        MOVX    A,@DPTR
        XRL     A,#0x73
        JNZ     ??Uart0_Cb_0
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V2,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V2,#??pData & 0xff
        MOV     ?V3,#(??pData >> 8) & 0xff
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x1
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPTR,#??pData
        MOVX    A,@DPTR
        CPL     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "\\nSent\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\nSent\\n">` >> 8) & 0xff
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\nSent\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\nSent\\n">` >> 8) & 0xff
        LJMP    ??Uart0_Cb_3 & 0xFFFF
          CFI EndBlock cfiBlock10

        RSEG XDATA_I:XDATA:NOROOT(0)
??pData:
        DATA8
        DS 1
        REQUIRE `?<Initializer for pData>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for myStartRetryDelay>`:
        DATA8
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for pData>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_HandleOsalEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_HandleOsalEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_StartConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_StartConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_SendDataConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_SendDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_BindConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_BindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_AllowBindConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_AllowBindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_FindDeviceConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_FindDeviceConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_ReceiveDataIndication::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_ReceiveDataIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Uart0_Cb::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Uart0_Cb

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\nENTRY\\n">`:
        DB "\012ENTRY\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Allow\\n">`:
        DB "Allow\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\nCoordinator\\n">`:
        DB "\012Coordinator\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\nSent\\n">`:
        DB "\012Sent\012"

        END
//  283 
// 
// 564 bytes in segment BANKED_CODE
//  54 bytes in segment BANK_RELAYS
//   2 bytes in segment XDATA_I
//   2 bytes in segment XDATA_ID
//  52 bytes in segment XDATA_ROM_C
//   4 bytes in segment XDATA_Z
// 
//  56 bytes of CODE     memory
//  52 bytes of CONST    memory
// 564 bytes of HUGECODE memory
//   6 bytes of XDATA    memory
//
//Errors: none
//Warnings: 1
