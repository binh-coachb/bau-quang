///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               26/Apr/2017  23:51:16
// Copyright 2004-2016 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\Source\SimpleSensor.c
//    Command line       =  
//        -f "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00001000 -DZDAPP_CONFIG_PAN_ID=0x6699
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\Source\SimpleSensor.c" -D
//        NWK_AUTO_POLL -D HOLD_AUTO_START -D REFLECTOR -D POWER_SAVING -D
//        NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
//        xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC -D HAL_UART=TRUE -lC
//        "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSensorEB\List"
//        -lA "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSensorEB\List"
//        --diag_suppress Pe001,Pa010 -o "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSensorEB\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 8 -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\" -I
//        "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\Source\" -I
//        "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSensorEB\List\SimpleSensor.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME SimpleSensor

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?US_DIV_MOD
        EXTERN ?US_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??Uart0_Cb::?relay`,0203H
        PUBLIC `??zb_AllowBindConfirm::?relay`
        FUNCTION `??zb_AllowBindConfirm::?relay`,0203H
        PUBLIC `??zb_BindConfirm::?relay`
        FUNCTION `??zb_BindConfirm::?relay`,0203H
        PUBLIC `??zb_FindDeviceConfirm::?relay`
        FUNCTION `??zb_FindDeviceConfirm::?relay`,0203H
        PUBLIC `??zb_HandleKeys::?relay`
        FUNCTION `??zb_HandleKeys::?relay`,0203H
        PUBLIC `??zb_HandleOsalEvent::?relay`
        FUNCTION `??zb_HandleOsalEvent::?relay`,0203H
        PUBLIC `??zb_ReceiveDataIndication::?relay`
        FUNCTION `??zb_ReceiveDataIndication::?relay`,0203H
        PUBLIC `??zb_SendDataConfirm::?relay`
        FUNCTION `??zb_SendDataConfirm::?relay`,0203H
        PUBLIC `??zb_StartConfirm::?relay`
        FUNCTION `??zb_StartConfirm::?relay`,0203H
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        FUNCTION Uart0_Cb,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBWEAK _A_TCON
        PUBWEAK __Constant_42160000
        PUBLIC zb_AllowBindConfirm
        FUNCTION zb_AllowBindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_BindConfirm
        FUNCTION zb_BindConfirm,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zb_FindDeviceConfirm
        FUNCTION zb_FindDeviceConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleKeys
        FUNCTION zb_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleOsalEvent
        FUNCTION zb_HandleOsalEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 54, STACK
        PUBLIC zb_InCmdList
        PUBLIC zb_OutCmdList
        PUBLIC zb_ReceiveDataIndication
        FUNCTION zb_ReceiveDataIndication,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zb_SendDataConfirm
        FUNCTION zb_SendDataConfirm,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zb_SimpleDesc
        PUBLIC zb_StartConfirm
        FUNCTION zb_StartConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
`??Hal_UART_RxBufLen::?relay` SYMBOL "?relay", Hal_UART_RxBufLen
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
osal_strlen         SYMBOL "osal_strlen"
`??osal_strlen::?relay` SYMBOL "?relay", osal_strlen
zb_BindDevice       SYMBOL "zb_BindDevice"
`??zb_BindDevice::?relay` SYMBOL "?relay", zb_BindDevice
zb_ReadConfiguration SYMBOL "zb_ReadConfiguration"
`??zb_ReadConfiguration::?relay` SYMBOL "?relay", zb_ReadConfiguration
zb_SendDataRequest  SYMBOL "zb_SendDataRequest"
`??zb_SendDataRequest::?relay` SYMBOL "?relay", zb_SendDataRequest
zb_StartRequest     SYMBOL "zb_StartRequest"
`??zb_StartRequest::?relay` SYMBOL "?relay", zb_StartRequest
zb_WriteConfiguration SYMBOL "zb_WriteConfiguration"
`??zb_WriteConfiguration::?relay` SYMBOL "?relay", zb_WriteConfiguration
zb_AllowBindConfirm SYMBOL "zb_AllowBindConfirm"
`??zb_AllowBindConfirm::?relay` SYMBOL "?relay", zb_AllowBindConfirm
zb_BindConfirm      SYMBOL "zb_BindConfirm"
`??zb_BindConfirm::?relay` SYMBOL "?relay", zb_BindConfirm
zb_FindDeviceConfirm SYMBOL "zb_FindDeviceConfirm"
`??zb_FindDeviceConfirm::?relay` SYMBOL "?relay", zb_FindDeviceConfirm
zb_HandleKeys       SYMBOL "zb_HandleKeys"
`??zb_HandleKeys::?relay` SYMBOL "?relay", zb_HandleKeys
zb_HandleOsalEvent  SYMBOL "zb_HandleOsalEvent"
`??zb_HandleOsalEvent::?relay` SYMBOL "?relay", zb_HandleOsalEvent
zb_ReceiveDataIndication SYMBOL "zb_ReceiveDataIndication"
`??zb_ReceiveDataIndication::?relay` SYMBOL "?relay", zb_ReceiveDataIndication
zb_SendDataConfirm  SYMBOL "zb_SendDataConfirm"
`??zb_SendDataConfirm::?relay` SYMBOL "?relay", zb_SendDataConfirm
zb_StartConfirm     SYMBOL "zb_StartConfirm"
`??zb_StartConfirm::?relay` SYMBOL "?relay", zb_StartConfirm

        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,00H
        EXTERN `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??Hal_UART_RxBufLen::?relay`
        FUNCTION `??Hal_UART_RxBufLen::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??osal_strlen::?relay`
        FUNCTION `??osal_strlen::?relay`,00H
        EXTERN `??zb_BindDevice::?relay`
        FUNCTION `??zb_BindDevice::?relay`,00H
        EXTERN `??zb_ReadConfiguration::?relay`
        FUNCTION `??zb_ReadConfiguration::?relay`,00H
        EXTERN `??zb_SendDataRequest::?relay`
        FUNCTION `??zb_SendDataRequest::?relay`,00H
        EXTERN `??zb_StartRequest::?relay`
        FUNCTION `??zb_StartRequest::?relay`,00H
        EXTERN `??zb_WriteConfiguration::?relay`
        FUNCTION `??zb_WriteConfiguration::?relay`,00H
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sapi_TaskID
        EXTERN zb_BindDevice
        FUNCTION zb_BindDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_ReadConfiguration
        FUNCTION zb_ReadConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SendDataRequest
        FUNCTION zb_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_StartRequest
        FUNCTION zb_StartRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_WriteConfiguration
        FUNCTION zb_WriteConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\DAT\bau-quang\CodeZigbee - CC2530\Projects\zstack\Samples\SimpleApp\Source\SimpleSensor.c
//    1 
//    2 /******************************************************************************
//    3  * INCLUDES
//    4  */
//    5 
//    6 #include "ZComDef.h"
//    7 #include "OSAL.h"
//    8 #include "sapi.h"
//    9 #include "hal_key.h"

        ASEGN SFR_AN:DATA:NOROOT,088H
// union <unnamed> volatile __sfr _A_TCON
_A_TCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1
//   10 #include "hal_led.h"
//   11 #include "hal_adc.h"
//   12 #include "hal_mcu.h"
//   13 #include "SimpleApp.h"
//   14 #include "hal_uart.h"
//   15 
//   16 /*********************************************************************
//   17  * CONSTANTS
//   18  */
//   19 
//   20 // Application States
//   21 #define APP_INIT                           0    // Initial state
//   22 #define APP_START                          1    // Sensor has joined network
//   23 #define APP_BOUND                          2    // Sensor is bound to collector
//   24 
//   25 // Application osal event identifiers
//   26 // Bit mask of events ( from 0x0000 to 0x00FF )
//   27 #define MY_START_EVT                0x0001
//   28 #define MY_REPORT_TEMP_EVT          0x0002
//   29 #define MY_REPORT_BATT_EVT          0x0004
//   30 #define MY_FIND_COLLECTOR_EVT       0x0008
//   31 
//   32 // ADC definitions for CC2430/CC2530 from the hal_adc.c file
//   33 #if defined (HAL_MCU_CC2430) || defined (HAL_MCU_CC2530)
//   34 #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
//   35 #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
//   36 #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
//   37 #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
//   38 #define HAL_ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
//   39 #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
//   40 #endif //HAL_MCU_CC2430 || HAL_MCU_CC2530
//   41 
//   42 /*********************************************************************
//   43  * TYPEDEFS
//   44  */
//   45 
//   46 /*********************************************************************
//   47  * LOCAL VARIABLES
//   48  */
//   49 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   50 static uint8 myAppState = APP_INIT;
myAppState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   51 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   52 static uint16 myStartRetryDelay = 5000;      // milliseconds
myStartRetryDelay:
        DATA16
        DS 2
        REQUIRE `?<Initializer for myStartRetryDelay>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   53 static uint16 myTempReportPeriod = 5000;     // milliseconds
myTempReportPeriod:
        DATA16
        DS 2
        REQUIRE `?<Initializer for myTempReportPeriod>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   54 static uint16 myBatteryCheckPeriod = 15000;   // milliseconds
myBatteryCheckPeriod:
        DATA16
        DS 2
        REQUIRE `?<Initializer for myBatteryCheckPeriod>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   55 static uint16 myBindRetryDelay = 4000;       // milliseconds
myBindRetryDelay:
        DATA16
        DS 2
        REQUIRE `?<Initializer for myBindRetryDelay>`
        REQUIRE __INIT_XDATA_I
//   56 
//   57 static void Uart0_Cb(uint8 port, uint8 event);
//   58 
//   59 /*********************************************************************
//   60  * GLOBAL VARIABLES
//   61  */
//   62 
//   63 // Inputs and Outputs for Sensor device
//   64 #define NUM_OUT_CMD_SENSOR                1
//   65 #define NUM_IN_CMD_SENSOR                 1
//   66 
//   67 // List of output and input commands for Sensor device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   68 const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
zb_OutCmdList:
        DW 2
//   69 {
//   70   SENSOR_REPORT_CMD_ID
//   71 };
//   72 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   73 const cId_t zb_InCmdList[NUM_IN_CMD_SENSOR] =
zb_InCmdList:
        DW 3
//   74 {
//   75   CTRL_PUMP_CMD_ID
//   76 };
//   77 
//   78 #define TEMP_REPORT     0x01
//   79 #define BATTERY_REPORT 0x02
//   80 
//   81 
//   82 // Define SimpleDescriptor for Sensor device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   83 const SimpleDescriptionFormat_t zb_SimpleDesc =
zb_SimpleDesc:
        DB 2
        DATA16
        DW 3856
        DW 3
        DATA8
        DB 1
        DB 1
        DATA16
        DW zb_InCmdList
        DATA8
        DB 1
        DATA16
        DW zb_OutCmdList
//   84 {
//   85   MY_ENDPOINT_ID,             //  Endpoint
//   86   MY_PROFILE_ID,              //  Profile ID
//   87   DEV_ID_SENSOR,              //  Device ID
//   88   DEVICE_VERSION_SENSOR,      //  Device Version
//   89   0,                          //  Reserved
//   90   NUM_IN_CMD_SENSOR,          //  Number of Input Commands
//   91   (cId_t *) zb_InCmdList,             //  Input Command List
//   92   NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
//   93   (cId_t *) zb_OutCmdList     //  Output Command List
//   94 };
//   95 
//   96 
//   97 /*********************************************************************
//   98  * LOCAL FUNCTIONS
//   99  */
//  100 static void myApp_StartReporting( void );
//  101 static void myApp_StopReporting( void );
//  102 
//  103 static uint8 myApp_ReadTemperature( void );
//  104 static uint8 myApp_ReadBattery( void );
//  105 
//  106 /*****************************************************************************
//  107  * @fn          zb_HandleOsalEvent
//  108  *
//  109  * @brief       The zb_HandleOsalEvent function is called by the operating
//  110  *              system when a task event is set
//  111  *
//  112  * @param       event - Bitmask containing the events that have been set
//  113  *
//  114  * @return      none
//  115  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  116 void zb_HandleOsalEvent( uint16 event )
zb_HandleOsalEvent:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zb_HandleOsalEvent
        CODE
//  117 {
        FUNCALL zb_HandleOsalEvent, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_ReadConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_StartRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_BindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 33
        MOV     A,#-0x21
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
//  118   uint8 pData[2];
//  119   uint8 startOptions;
//  120   uint8 logicalType;
//  121 
//  122   if ( event & ZB_ENTRY_EVENT )
        ANL     A,#0x10
        JNZ     $+5
        LJMP    ??zb_HandleOsalEvent_0 & 0xFFFF
//  123   {
//  124     halUARTCfg_t uConfig;
//  125     uConfig.configured = TRUE; 
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  126     uConfig.baudRate = HAL_UART_BR_9600;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  127     uConfig.flowControl = FALSE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  128     uConfig.flowControlThreshold = 48;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x30
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  129     uConfig.idleTimeout = 6; 
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  130     uConfig.rx.maxBufSize = 128;
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  131     uConfig.tx.maxBufSize = 128;      
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  132     uConfig.intEnable = TRUE;//enable interrupts
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  133     uConfig.callBackFunc = &Uart0_Cb;
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`??Uart0_Cb::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??Uart0_Cb::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  134     HalUARTOpen(HAL_UART_PORT_0,&uConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x0
        LCALL   `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
//  135     HalUARTWrite(HAL_UART_PORT_0,"\nZB_ENTRY_EVENT\n", (byte)osal_strlen("\nZB_ENTRY_EVENT\n")); 
        MOV     ?V0,#`?<Constant "\\nZB_ENTRY_EVENT\\n">` & 0xff
        MOV     ?V1,#(`?<Constant "\\nZB_ENTRY_EVENT\\n">` >> 8) & 0xff
        ; Setup parameters for call to function osal_strlen
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  136     
//  137     startOptions = ZCD_STARTOPT_CLEAR_STATE | ZCD_STARTOPT_CLEAR_CONFIG;    
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x3
        MOVX    @DPTR,A
//  138     zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x1
        MOV     R1,A
        LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
//  139     
//  140     logicalType = ZG_DEVICETYPE_ENDDEVICE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  141     zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
        ; Setup parameters for call to function zb_WriteConfiguration
        INC     A
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
//  142     
//  143     zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_ReadConfiguration
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   `??zb_ReadConfiguration::?relay`; Banked call to: zb_ReadConfiguration
//  144     startOptions = ZCD_STARTOPT_AUTO_START;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  145     zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
//  146     
//  147     zb_StartRequest();
        ; Setup parameters for call to function zb_StartRequest
        LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
//  148   }
//  149   if ( event & MY_REPORT_TEMP_EVT )
??zb_HandleOsalEvent_0:
        MOV     A,R6
        ANL     A,#0x2
        JNZ     $+5
        LJMP    ??zb_HandleOsalEvent_1 & 0xFFFF
//  150   {
//  151     pData[0] = TEMP_REPORT;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  152     pData[1] =  myApp_ReadTemperature();
        CLR     0x88.5
        MOV     0xb6,#0x3e
??zb_HandleOsalEvent_2:
        MOV     C,0x88.5
        JNC     ??zb_HandleOsalEvent_2
        MOV     R0,0xba+0x0
        MOV     R3,0xbb
        MOV     A,R3
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x26
        MOV     A,R1
        SUBB    A,#0x14
        JNC     ??zb_HandleOsalEvent_3
        MOV     R0,#0x26
        MOV     R1,#0x14
??zb_HandleOsalEvent_3:
        MOV     A,R0
        ADD     A,#-0x26
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#-0x15
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x6b
        MOV     A,R1
        SUBB    A,#0x5
        JC      ??zb_HandleOsalEvent_4
        MOV     R0,#0x6a
        MOV     R1,#0x5
??zb_HandleOsalEvent_4:
        MOV     R2,#0xe
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
//  153     zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, 2, pData, 0, AF_ACK_REQUEST, 0 );
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x10
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 54)
        MOV     R1,#0x2
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x2
        MOV     R3,#-0x1
        LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
//  154     //0xFFFE Gui toi thiet bi dang Bind
//  155     HalUARTWrite(HAL_UART_PORT_0,"REPORT_TEMP\n", (byte)osal_strlen("REPORT_TEMP\n")); 
        MOV     ?V0,#`?<Constant "REPORT_TEMP\\n">` & 0xff
        MOV     ?V1,#(`?<Constant "REPORT_TEMP\\n">` >> 8) & 0xff
        ; Setup parameters for call to function osal_strlen
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  156     osal_start_timerEx( sapi_TaskID, MY_REPORT_TEMP_EVT, myTempReportPeriod );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine2 & 0xFFFF
//  157   }
??CrossCallReturnLabel_0:
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  158 
//  159   if ( event & MY_REPORT_BATT_EVT )
??zb_HandleOsalEvent_1:
        MOV     A,R6
        ANL     A,#0x4
        JNZ     $+5
        LJMP    ??zb_HandleOsalEvent_5 & 0xFFFF
//  160   {
//  161     pData[0] = BATTERY_REPORT;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  162     pData[1] =  myApp_ReadBattery();
        CLR     0x88.5
        MOV     0xb6,#0x1f
??zb_HandleOsalEvent_6:
        MOV     C,0x88.5
        JNC     ??zb_HandleOsalEvent_6
        MOV     R0,0xba+0x0
        MOV     R3,0xbb
        MOV     A,R0
        MOV     ?V4,A
        MOV     A,R3
        MOV     ?V5,A
        MOV     A,#0x6
        MOV     R0,#?V4
        LCALL   ?US_SHR
        MOV     ?V6,A
        MOV     ?V7,A
        MOV     R0,#?V4
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_42160000
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?FLT_MUL
        MOV     R0,#?V4
        LCALL   ?FLT_TO_L
        MOV     A,#0x9
        MOV     R0,#?V4
        LCALL   ?US_SHR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V4
        MOVX    @DPTR,A
//  163     zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, 2, pData, 0, AF_ACK_REQUEST, 0 );
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x10
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 54)
        MOV     R1,#0x2
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x2
        MOV     R3,#-0x1
        LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
//  164     HalUARTWrite(HAL_UART_PORT_0,"REPORT_BATT\n", (byte)osal_strlen("REPORT_BATT\n")); 
        MOV     ?V0,#`?<Constant "REPORT_BATT\\n">` & 0xff
        MOV     ?V1,#(`?<Constant "REPORT_BATT\\n">` >> 8) & 0xff
        ; Setup parameters for call to function osal_strlen
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  165     osal_start_timerEx( sapi_TaskID, MY_REPORT_BATT_EVT, myBatteryCheckPeriod );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine3 & 0xFFFF
//  166   }
??CrossCallReturnLabel_2:
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  167 
//  168   if ( event & MY_FIND_COLLECTOR_EVT )
??zb_HandleOsalEvent_5:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??zb_HandleOsalEvent_7
//  169   {
//  170     HalUARTWrite(HAL_UART_PORT_0,"FIND_COLLECTOR\n", (byte)osal_strlen("FIND_COLLECTOR\n"));  
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "FIND_COLLECTOR\\n">` & 0xff
        MOV     R3,#(`?<Constant "FIND_COLLECTOR\\n">` >> 8) & 0xff
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V0,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V0
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "FIND_COLLECTOR\\n">` & 0xff
        MOV     R3,#(`?<Constant "FIND_COLLECTOR\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  171     zb_BindDevice( TRUE, SENSOR_REPORT_CMD_ID, (uint8 *)NULL );
        ; Setup parameters for call to function zb_BindDevice
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     R1,#0x1
        LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
//  172   }
//  173 
//  174 }
??zb_HandleOsalEvent_7:
        MOV     A,#0x21
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
        REQUIRE _A_TCON
        REQUIRE ADCCON3
        REQUIRE ADCL
        REQUIRE ADCH
//  175 /*********************************************************************
//  176  * @fn      zb_HandleKeys
//  177  *
//  178  * @brief   Handles all key events for this device.
//  179  *
//  180  * @param   shift - true if in shift/alt.
//  181  * @param   keys - bit field for key events. Valid entries:
//  182  *                 EVAL_SW4
//  183  *                 EVAL_SW3
//  184  *                 EVAL_SW2
//  185  *                 EVAL_SW1
//  186  *
//  187  * @return  none
//  188  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  189 void zb_HandleKeys( uint8 shift, uint8 keys )
zb_HandleKeys:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zb_HandleKeys
        CODE
//  190 {
        ; Saved register size: 0
        ; Auto size: 0
//  191   return;
        LJMP    ?BRET
//  192 }
          CFI EndBlock cfiBlock1
//  193 /******************************************************************************
//  194  * @fn          zb_StartConfirm
//  195  *
//  196  * @brief       The zb_StartConfirm callback is called by the ZigBee stack
//  197  *              after a start request operation completes
//  198  *
//  199  * @param       status - The status of the start operation.  Status of
//  200  *                       ZB_SUCCESS indicates the start operation completed
//  201  *                       successfully.  Else the status is an error code.
//  202  *
//  203  * @return      none
//  204  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  205 void zb_StartConfirm( uint8 status )
zb_StartConfirm:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zb_StartConfirm
        CODE
//  206 {
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  207   if ( status == ZB_SUCCESS )
        JNZ     ??zb_StartConfirm_0
//  208   {
//  209     myAppState = APP_START;
        MOV     DPTR,#myAppState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  210 
//  211     // Set event to bind to a collector
//  212     osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine4 & 0xFFFF
//  213   }
??CrossCallReturnLabel_7:
        MOV     R2,#0x8
        SJMP    ??zb_StartConfirm_1
//  214   else
//  215   {
//  216     // Try joining again later with a delay
//  217     osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
??zb_StartConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myStartRetryDelay
        LCALL   ??Subroutine5_0 & 0xFFFF
//  218   }
??CrossCallReturnLabel_4:
        MOV     R2,#0x1
??zb_StartConfirm_1:
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  219 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  220 /******************************************************************************
//  221  * @fn          zb_SendDataConfirm
//  222  *
//  223  * @brief       The zb_SendDataConfirm callback function is called by the
//  224  *              ZigBee after a send data operation completes
//  225  *
//  226  * @param       handle - The handle identifying the data transmission.
//  227  *              status - The status of the operation.
//  228  *
//  229  * @return      none
//  230  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  231 void zb_SendDataConfirm( uint8 handle, uint8 status )
zb_SendDataConfirm:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zb_SendDataConfirm
        CODE
//  232 {
        FUNCALL zb_SendDataConfirm, zb_BindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataConfirm, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataConfirm, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataConfirm, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataConfirm, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataConfirm, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  233   (void)handle; 
//  234   
//  235   //HalUARTWrite(HAL_UART_PORT_0,"SendDataConfirm ", (byte)osal_strlen("SendDataConfirm ")); 
//  236 
//  237   if ( status != ZSuccess )
        MOV     A,R2
        JZ      ??zb_SendDataConfirm_0
//  238   {    
//  239     //HalUARTWrite(HAL_UART_PORT_0,"Fail\n", (byte)osal_strlen("Fail\n"));
//  240     // Remove bindings to the existing collector
//  241     zb_BindDevice( FALSE, SENSOR_REPORT_CMD_ID, (uint8 *)NULL );
        ; Setup parameters for call to function zb_BindDevice
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     R1,#0x0
        LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
//  242 
//  243     myAppState = APP_START;
        MOV     DPTR,#myAppState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  244     myApp_StopReporting();
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "StopReporting\\n">` & 0xff
        MOV     R3,#(`?<Constant "StopReporting\\n">` >> 8) & 0xff
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "StopReporting\\n">` & 0xff
        MOV     R3,#(`?<Constant "StopReporting\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  245 
//  246     // Start process of finding new collector with minimal delay
//  247     osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, 1 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  248   }
//  249   else
//  250   {
//  251     //HalUARTWrite(HAL_UART_PORT_0,"Success\n", (byte)osal_strlen("Success\n"));
//  252   }
//  253 }
??zb_SendDataConfirm_0:
          CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  254 /******************************************************************************
//  255  * @fn          zb_BindConfirm
//  256  *
//  257  * @brief       The zb_BindConfirm callback is called by the ZigBee stack
//  258  *              after a bind operation completes.
//  259  *
//  260  * @param       commandId - The command ID of the binding being confirmed.
//  261  *              status - The status of the bind operation.
//  262  *
//  263  * @return      none
//  264  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  265 void zb_BindConfirm( uint16 commandId, uint8 status )
zb_BindConfirm:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zb_BindConfirm
        CODE
//  266 {
        FUNCALL zb_BindConfirm, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindConfirm, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindConfirm, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindConfirm, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindConfirm, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R1
//  267   (void)commandId;
//  268   
//  269   HalUARTWrite(HAL_UART_PORT_0,"BindConfirm\n", (byte)osal_strlen("BindConfirm\n")); 
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "BindConfirm\\n">` & 0xff
        MOV     R3,#(`?<Constant "BindConfirm\\n">` >> 8) & 0xff
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "BindConfirm\\n">` & 0xff
        MOV     R3,#(`?<Constant "BindConfirm\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  270 
//  271   if ( ( status == ZB_SUCCESS ) && ( myAppState == APP_START ) )
        MOV     A,?V0
        JNZ     ??zb_BindConfirm_0
        MOV     DPTR,#myAppState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zb_BindConfirm_0
//  272   {
//  273     myAppState = APP_BOUND;
        MOV     A,#0x2
        MOVX    @DPTR,A
//  274 
//  275     //Start reporting sensor values
//  276     myApp_StartReporting();
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "StartReporting\\n">` & 0xff
        MOV     R3,#(`?<Constant "StartReporting\\n">` >> 8) & 0xff
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "StartReporting\\n">` & 0xff
        MOV     R3,#(`?<Constant "StartReporting\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  277   }
        SJMP    ??zb_BindConfirm_1
//  278   else
//  279   {
//  280     // Continue to discover a collector
//  281     osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
??zb_BindConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine4 & 0xFFFF
//  282   }
??CrossCallReturnLabel_8:
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  283 }
??zb_BindConfirm_1:
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function zb_HandleOsalEvent
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function zb_BindConfirm
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOV     DPTR,#myBatteryCheckPeriod
        LCALL   ??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function zb_HandleOsalEvent
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function zb_BindConfirm
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOV     DPTR,#myTempReportPeriod
        LCALL   ??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function zb_StartConfirm
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zb_BindConfirm
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOV     DPTR,#myBindRetryDelay
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine5_0:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function zb_StartConfirm
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zb_HandleOsalEvent
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_6, ??CrossCallReturnLabel_2
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-4
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zb_BindConfirm
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_6, ??CrossCallReturnLabel_3
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-4
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zb_HandleOsalEvent
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_0
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-4
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zb_BindConfirm
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_1
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-4
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function zb_StartConfirm
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zb_BindConfirm
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  284 /******************************************************************************
//  285  * @fn          zb_AllowBindConfirm
//  286  *
//  287  * @brief       Indicates when another device attempted to bind to this device
//  288  *
//  289  * @param
//  290  *
//  291  * @return      none
//  292  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  293 void zb_AllowBindConfirm( uint16 source )
zb_AllowBindConfirm:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function zb_AllowBindConfirm
        CODE
//  294 {
        ; Saved register size: 0
        ; Auto size: 0
//  295   (void)source;
//  296   //HalUARTWrite(HAL_UART_PORT_0,"AllowBindConfirm\n", (byte)osal_strlen("AllowBindConfirm\n"));
//  297 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock23
//  298 /******************************************************************************
//  299  * @fn          zb_FindDeviceConfirm
//  300  *
//  301  * @brief       The zb_FindDeviceConfirm callback function is called by the
//  302  *              ZigBee stack when a find device operation completes.
//  303  *
//  304  * @param       searchType - The type of search that was performed.
//  305  *              searchKey - Value that the search was executed on.
//  306  *              result - The result of the search.
//  307  *
//  308  * @return      none
//  309  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  310 void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
zb_FindDeviceConfirm:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function zb_FindDeviceConfirm
        CODE
//  311 {
        ; Saved register size: 0
        ; Auto size: 0
//  312   // Add your code here and remove the "(void)" lines.
//  313   (void)searchType;
//  314   (void)searchKey;
//  315   (void)result;
//  316   //HalUARTWrite(HAL_UART_PORT_0,"FindDeviceConfirm\n", (byte)osal_strlen("FindDeviceConfirm\n"));
//  317 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock24
//  318 
//  319 /******************************************************************************
//  320  * @fn          zb_ReceiveDataIndication
//  321  *
//  322  * @brief       The zb_ReceiveDataIndication callback function is called
//  323  *              asynchronously by the ZigBee stack to notify the application
//  324  *              when data is received from a peer device.
//  325  *
//  326  * @param       source - The short address of the peer device that sent the data
//  327  *              command - The commandId associated with the data
//  328  *              len - The number of bytes in the pData parameter
//  329  *              pData - The data sent by the peer device
//  330  *
//  331  * @return      none
//  332  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  333 void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData,int8 r_power  )
zb_ReceiveDataIndication:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function zb_ReceiveDataIndication
        CODE
//  334 {
        FUNCALL zb_ReceiveDataIndication, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  335   HalUARTWrite(HAL_UART_PORT_0,"ReceiveDataIndication\n", (byte)osal_strlen("ReceiveDataIndication\n")); 
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ReceiveDataIndication\\n">` & 0xff
        MOV     R3,#(`?<Constant "ReceiveDataIndication\\n">` >> 8) & 0xff
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V0,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V0
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "ReceiveDataIndication\\n">` & 0xff
        MOV     R3,#(`?<Constant "ReceiveDataIndication\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  336   
//  337 }
          CFI EndBlock cfiBlock25
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock26
//  338 /******************************************************************************
//  339  * @fn          my_StartReporting
//  340  *
//  341  * @brief       Starts the process to periodically report sensor readings
//  342  *
//  343  * @param
//  344  *
//  345  * @return      none
//  346  */
//  347 void myApp_StartReporting( void )
//  348 {
//  349   osal_start_timerEx( sapi_TaskID, MY_REPORT_TEMP_EVT, myTempReportPeriod );
//  350   osal_start_timerEx( sapi_TaskID, MY_REPORT_BATT_EVT, myBatteryCheckPeriod );
//  351   HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
//  352   
//  353   HalUARTWrite(HAL_UART_PORT_0,"StartReporting\n", (byte)osal_strlen("StartReporting\n")); 
//  354 
//  355 }
//  356 /******************************************************************************
//  357  * @fn          my_StopReporting
//  358  *
//  359  * @brief       Stops the process to periodically report sensor readings
//  360  *
//  361  * @param
//  362  *
//  363  * @return      none
//  364  */
//  365 void myApp_StopReporting( void )
//  366 {
//  367   osal_stop_timerEx( sapi_TaskID, MY_REPORT_TEMP_EVT );
//  368   osal_stop_timerEx( sapi_TaskID, MY_REPORT_BATT_EVT );
//  369   HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
//  370   
//  371   HalUARTWrite(HAL_UART_PORT_0,"StopReporting\n", (byte)osal_strlen("StopReporting\n")); 
//  372 }
//  373 /******************************************************************************
//  374  * @fn          myApp_ReadBattery
//  375  *
//  376  * @brief       Reports battery sensor reading
//  377  *
//  378  * @param
//  379  *
//  380  * @return
//  381  ******************************************************************************/
//  382 uint8 myApp_ReadBattery( void )
//  383 {
//  384 
//  385 #if defined (HAL_MCU_CC2430) || defined (HAL_MCU_CC2530)
//  386 
//  387   uint16 value;
//  388 
//  389   /* Clear ADC interrupt flag */
//  390   ADCIF = 0;
//  391 
//  392   ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_128 | HAL_ADC_CHN_VDD3);
//  393 
//  394   /* Wait for the conversion to finish */
//  395   while ( !ADCIF );
//  396 
//  397   /* Get the result */
//  398   value = ADCL;
//  399   value |= ((uint16) ADCH) << 8;
//  400 
//  401   /*
//  402    * value now contains measurement of Vdd/3
//  403    * 0 indicates 0V and 32767 indicates 1.25V
//  404    * voltage = (value*3*1.25)/32767 volts
//  405    * we will multiply by this by 10 to allow units of 0.1 volts
//  406    */
//  407 
//  408   value = value >> 6;   // divide first by 2^6
//  409   value = (uint16)(value * 37.5);
//  410   value = value >> 9;   // ...and later by 2^9...to prevent overflow during multiplication
//  411 
//  412   return value;
//  413 
//  414 #endif    // CC2430 or CC2530
//  415 
//  416 #if defined HAL_MCU_MSP430
//  417 
//  418   uint16 value;
//  419 
//  420 /*
//  421   There are more than MSP430 board now. Idealy, ADC read should be called
//  422 */
//  423 #if defined (HAL_BOARD_F5438)
//  424 
//  425   value = HalAdcRead (HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
//  426   value = value * 50;
//  427   value = value / 4096;
//  428 
//  429 #else
//  430 
//  431   ADC12CTL0 = ADC12ON+SHT0_2+REFON;             // Turn on and set up ADC12
//  432   ADC12CTL1 = SHP;                              // Use sampling timer
//  433   ADC12MCTL0 = SREF_1+INCH_11;                  // Vr+=Vref+
//  434 
//  435   ADC12CTL0 |= ENC | ADC12SC;                   // Start conversion
//  436   while ((ADC12IFG & BIT0)==0);
//  437 
//  438   value = ADC12MEM0;
//  439 
//  440   /*
//  441    * value now contains measurement of AVcc/2
//  442    * value is in range 0 to 4095 indicating voltage from 0 to 1.5V
//  443    * voltage = (value*2*1.5)/4095 volts
//  444    * we will multiply by this by 10 to allow units of 0.1 volts
//  445    */
//  446 
//  447   value = value >> 1;     // value is now in range of 0 to 2048
//  448   value = value * 30;
//  449   value = value >> 11;
//  450 
//  451 #endif
//  452 
//  453   return ( value );
//  454 
//  455 #endif // MSP430
//  456 
//  457 #if defined HAL_MCU_AVR
//  458 
//  459   // If platform doesnt support a battery sensor, just return random value
//  460 
//  461   uint8 value;
//  462   value = 20 + ( osal_rand() & 0x000F );
//  463   return ( value );
//  464 
//  465 #endif  // AVR
//  466 
//  467 }
//  468 /******************************************************************************
//  469  * @fn          myApp_ReadTemperature
//  470  *
//  471  * @brief       Reports temperature sensor reading
//  472  *
//  473  * @param
//  474  *
//  475  * @return
//  476  ******************************************************************************/
//  477 uint8 myApp_ReadTemperature( void )
//  478 {
//  479 
//  480 #if defined (HAL_MCU_CC2430) || defined (HAL_MCU_CC2530)
//  481 
//  482   uint16 value;
//  483 
//  484   /* Clear ADC interrupt flag */
//  485   ADCIF = 0;
//  486 
//  487   ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_512 | HAL_ADC_CHN_TEMP);
//  488 
//  489   /* Wait for the conversion to finish */
//  490   while ( !ADCIF );
//  491 
//  492   /* Get the result */
//  493   value = ADCL;
//  494   value |= ((uint16) ADCH) << 8;
//  495 
//  496   /*
//  497    * value ranges from 0 to 0x8000 indicating 0V and 1.25V
//  498    * VOLTAGE_AT_TEMP_ZERO = 0.743 V = 19477
//  499    * TEMP_COEFFICIENT = 0.0024 V/C = 62.9 /C
//  500    * These parameters are typical values and need to be calibrated
//  501    * See the datasheet for the appropriate chip for more details
//  502    * also, the math below may not be very accurate
//  503    */
//  504 #if defined (HAL_MCU_CC2430)
//  505   #define VOLTAGE_AT_TEMP_ZERO      19477   // 0.743 V
//  506   #define TEMP_COEFFICIENT          62.9    // 0.0024 V/C
//  507 #elif defined (HAL_MCU_CC2530)
//  508     /* Assume ADC = 5158 at 0C and ADC = 15/C */
//  509   #define VOLTAGE_AT_TEMP_ZERO      5158
//  510   #define TEMP_COEFFICIENT          14
//  511 #endif
//  512 
//  513   // limit min temp to 0 C
//  514   if ( value < VOLTAGE_AT_TEMP_ZERO )
//  515     value = VOLTAGE_AT_TEMP_ZERO;
//  516 
//  517   value = value - VOLTAGE_AT_TEMP_ZERO;
//  518 
//  519   // limit max temp to 99 C
//  520   if ( value > TEMP_COEFFICIENT * 99 )
//  521     value = TEMP_COEFFICIENT * 99;
//  522 
//  523   return ( (uint8)(value/TEMP_COEFFICIENT) );
//  524 
//  525 #endif  // CC2430 || CC2530
//  526 
//  527 
//  528 #if defined HAL_MCU_MSP430
//  529 
//  530   uint16 value;
//  531 
//  532 /*
//  533   There are more than MSP430 board now. Idealy, ADC read should be called
//  534 */
//  535 #if defined (HAL_BOARD_F5438)
//  536 
//  537   long multiplier, offset;
//  538 
//  539   value = HalAdcRead (HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
//  540 
//  541   multiplier = (long) 7040 * 9 /5 ;
//  542   offset = (long) 2620 * 9 / 5 - 320;
//  543 
//  544   value = (long) value * multiplier/4096 - offset;
//  545 
//  546   return (value);
//  547 
//  548 #else
//  549   ADC12CTL0 = ADC12ON+SHT0_7+REFON;         // Turn on and set up ADC12
//  550   ADC12CTL1 = SHP;                          // Use sampling timer
//  551   ADC12MCTL0 = SREF_1+INCH_10;              // Vr+=Vref+
//  552 
//  553   ADC12CTL0 |= ENC | ADC12SC;               // Start conversion
//  554   while ((ADC12IFG & BIT0)==0);
//  555 
//  556   value = ADC12MEM0;
//  557 
//  558   /*
//  559    * value ranges from 0 to 0x0FFF indicating 0V and 1.5V
//  560    * VOLTAGE_AT_TEMP_ZERO = 0.986 V = 2692
//  561    * TEMP_COEFFICIENT = 0.00355 V/C = 9.69 /C
//  562    * These parameters are typical values and need to be calibrated
//  563    * See the datasheet for the appropriate chip for more details
//  564    * also, the math below is not very accurate
//  565    */
//  566 
//  567 #define VOLTAGE_AT_TEMP_ZERO      2692      // 0.986 V
//  568 #define TEMP_COEFFICIENT          9.69      // 0.00355 V/C
//  569 
//  570   // limit min temp to 0 C
//  571   if ( value < VOLTAGE_AT_TEMP_ZERO )
//  572     value = VOLTAGE_AT_TEMP_ZERO;
//  573 
//  574   value = value - VOLTAGE_AT_TEMP_ZERO;
//  575 
//  576   // limit max temp to 99 C
//  577   if ( value > (uint16)(TEMP_COEFFICIENT * 99.0) )
//  578     value = (uint16)(TEMP_COEFFICIENT * 99.0);
//  579 
//  580   return ( (uint8)(value/TEMP_COEFFICIENT) );
//  581 #endif // HAL_BOARD_F5438
//  582 
//  583 #endif // MSP430
//  584 
//  585 #if defined HAL_MCU_AVR
//  586 
//  587   // If platform doesnt support a temperature sensor, just return random value
//  588   uint8 value;
//  589   value = 20 + ( osal_rand() & 0x000F );
//  590   return ( value );
//  591 
//  592 #endif  // AVR
//  593 
//  594 }
//  595 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  596 static void Uart0_Cb(uint8 port, uint8 event){
Uart0_Cb:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function Uart0_Cb
        CODE
        FUNCALL Uart0_Cb, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  597   
//  598   if ((event&HAL_UART_RX_TIMEOUT) || (event&HAL_UART_RX_ABOUT_FULL)){
        MOV     A,#0x6
        ANL     A,R7
        JZ      ??Uart0_Cb_0
        SJMP    ??Uart0_Cb_1
//  599     uint8  ch;
//  600     while (Hal_UART_RxBufLen(port))
//  601     {
//  602       HalUARTRead ( port, &ch, 1);
??Uart0_Cb_2:
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     A,R6
        MOV     R1,A
        LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
//  603       if( ch == '1' ){
//  604         
//  605       }else if( ch == '2' ){
//  606             
//  607       }else if( ch == '3' ){        
//  608         
//  609       }
//  610     }
??Uart0_Cb_1:
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     A,R6
        MOV     R1,A
        LCALL   `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??Uart0_Cb_2
//  611   }
//  612 }
??Uart0_Cb_0:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock27

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for myStartRetryDelay>`:
        DATA16
        DW 5000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for myTempReportPeriod>`:
        DATA16
        DW 5000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for myBatteryCheckPeriod>`:
        DATA16
        DW 15000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for myBindRetryDelay>`:
        DATA16
        DW 4000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_HandleOsalEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_HandleOsalEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_StartConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_StartConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_SendDataConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_SendDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_BindConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_BindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_AllowBindConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_AllowBindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_FindDeviceConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_FindDeviceConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_ReceiveDataIndication::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_ReceiveDataIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Uart0_Cb::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Uart0_Cb

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\nZB_ENTRY_EVENT\\n">`:
        DB "\012ZB_ENTRY_EVENT\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "REPORT_TEMP\\n">`:
        DB "REPORT_TEMP\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "REPORT_BATT\\n">`:
        DB "REPORT_BATT\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "FIND_COLLECTOR\\n">`:
        DB "FIND_COLLECTOR\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "BindConfirm\\n">`:
        DB "BindConfirm\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ReceiveDataIndication\\n">`:
        DB "ReceiveDataIndication\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "StartReporting\\n">`:
        DB "StartReporting\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "StopReporting\\n">`:
        DB "StopReporting\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42160000:
        DD 42160000H

        END
// 
// 992 bytes in segment BANKED_CODE
//  54 bytes in segment BANK_RELAYS
//   4 bytes in segment SFR_AN
//   8 bytes in segment XDATA_I
//   8 bytes in segment XDATA_ID
// 146 bytes in segment XDATA_ROM_C
//   1 byte  in segment XDATA_Z
// 
//  62 bytes of CODE     memory
// 142 bytes of CONST    memory (+ 4 bytes shared)
//   0 bytes of DATA     memory (+ 4 bytes shared)
// 992 bytes of HUGECODE memory
//   9 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
