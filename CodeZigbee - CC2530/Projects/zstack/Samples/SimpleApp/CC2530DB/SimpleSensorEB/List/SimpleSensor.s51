///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               10/Jun/2017  21:31:02
// Copyright 2004-2016 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\Source\SimpleSensor.c
//    Command line       =  
//        -f "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0x1111
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\Source\SimpleSensor.c" -D
//        NWK_AUTO_POLL -D HOLD_AUTO_START -D REFLECTOR -D POWER_SAVING -D
//        NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
//        xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC -D HAL_UART=TRUE -lC
//        "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSensorEB\List"
//        -lA "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSensorEB\List"
//        --diag_suppress Pe001,Pa010 -o "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSensorEB\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 8 -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\" -I
//        "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\Source\" -I
//        "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        E:\DAT\bau-quang\CodeZigbee -
//        CC2530\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSensorEB\List\SimpleSensor.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME SimpleSensor

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??Uart0_Cb::?relay`,0203H
        PUBLIC `??zb_AllowBindConfirm::?relay`
        FUNCTION `??zb_AllowBindConfirm::?relay`,0203H
        PUBLIC `??zb_BindConfirm::?relay`
        FUNCTION `??zb_BindConfirm::?relay`,0203H
        PUBLIC `??zb_FindDeviceConfirm::?relay`
        FUNCTION `??zb_FindDeviceConfirm::?relay`,0203H
        PUBLIC `??zb_HandleKeys::?relay`
        FUNCTION `??zb_HandleKeys::?relay`,0203H
        PUBLIC `??zb_HandleOsalEvent::?relay`
        FUNCTION `??zb_HandleOsalEvent::?relay`,0203H
        PUBLIC `??zb_ReceiveDataIndication::?relay`
        FUNCTION `??zb_ReceiveDataIndication::?relay`,0203H
        PUBLIC `??zb_SendDataConfirm::?relay`
        FUNCTION `??zb_SendDataConfirm::?relay`,0203H
        PUBLIC `??zb_StartConfirm::?relay`
        FUNCTION `??zb_StartConfirm::?relay`,0203H
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        FUNCTION Uart0_Cb,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBWEAK _A_P1
        PUBLIC zb_AllowBindConfirm
        FUNCTION zb_AllowBindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_BindConfirm
        FUNCTION zb_BindConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zb_FindDeviceConfirm
        FUNCTION zb_FindDeviceConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleKeys
        FUNCTION zb_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleOsalEvent
        FUNCTION zb_HandleOsalEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        PUBLIC zb_InCmdList
        PUBLIC zb_OutCmdList
        PUBLIC zb_ReceiveDataIndication
        FUNCTION zb_ReceiveDataIndication,0203H
        ARGFRAME XSTACK, 4, STACK
        PUBLIC zb_SendDataConfirm
        FUNCTION zb_SendDataConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zb_SimpleDesc
        PUBLIC zb_StartConfirm
        FUNCTION zb_StartConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
`??Hal_UART_RxBufLen::?relay` SYMBOL "?relay", Hal_UART_RxBufLen
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_strlen         SYMBOL "osal_strlen"
`??osal_strlen::?relay` SYMBOL "?relay", osal_strlen
zb_BindDevice       SYMBOL "zb_BindDevice"
`??zb_BindDevice::?relay` SYMBOL "?relay", zb_BindDevice
zb_ReadConfiguration SYMBOL "zb_ReadConfiguration"
`??zb_ReadConfiguration::?relay` SYMBOL "?relay", zb_ReadConfiguration
zb_SendDataRequest  SYMBOL "zb_SendDataRequest"
`??zb_SendDataRequest::?relay` SYMBOL "?relay", zb_SendDataRequest
zb_StartRequest     SYMBOL "zb_StartRequest"
`??zb_StartRequest::?relay` SYMBOL "?relay", zb_StartRequest
zb_SystemReset      SYMBOL "zb_SystemReset"
`??zb_SystemReset::?relay` SYMBOL "?relay", zb_SystemReset
zb_WriteConfiguration SYMBOL "zb_WriteConfiguration"
`??zb_WriteConfiguration::?relay` SYMBOL "?relay", zb_WriteConfiguration
zb_AllowBindConfirm SYMBOL "zb_AllowBindConfirm"
`??zb_AllowBindConfirm::?relay` SYMBOL "?relay", zb_AllowBindConfirm
zb_BindConfirm      SYMBOL "zb_BindConfirm"
`??zb_BindConfirm::?relay` SYMBOL "?relay", zb_BindConfirm
zb_FindDeviceConfirm SYMBOL "zb_FindDeviceConfirm"
`??zb_FindDeviceConfirm::?relay` SYMBOL "?relay", zb_FindDeviceConfirm
zb_HandleKeys       SYMBOL "zb_HandleKeys"
`??zb_HandleKeys::?relay` SYMBOL "?relay", zb_HandleKeys
zb_HandleOsalEvent  SYMBOL "zb_HandleOsalEvent"
`??zb_HandleOsalEvent::?relay` SYMBOL "?relay", zb_HandleOsalEvent
zb_ReceiveDataIndication SYMBOL "zb_ReceiveDataIndication"
`??zb_ReceiveDataIndication::?relay` SYMBOL "?relay", zb_ReceiveDataIndication
zb_SendDataConfirm  SYMBOL "zb_SendDataConfirm"
`??zb_SendDataConfirm::?relay` SYMBOL "?relay", zb_SendDataConfirm
zb_StartConfirm     SYMBOL "zb_StartConfirm"
`??zb_StartConfirm::?relay` SYMBOL "?relay", zb_StartConfirm

        EXTERN `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,00H
        EXTERN `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??Hal_UART_RxBufLen::?relay`
        FUNCTION `??Hal_UART_RxBufLen::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_strlen::?relay`
        FUNCTION `??osal_strlen::?relay`,00H
        EXTERN `??zb_BindDevice::?relay`
        FUNCTION `??zb_BindDevice::?relay`,00H
        EXTERN `??zb_ReadConfiguration::?relay`
        FUNCTION `??zb_ReadConfiguration::?relay`,00H
        EXTERN `??zb_SendDataRequest::?relay`
        FUNCTION `??zb_SendDataRequest::?relay`,00H
        EXTERN `??zb_StartRequest::?relay`
        FUNCTION `??zb_StartRequest::?relay`,00H
        EXTERN `??zb_SystemReset::?relay`
        FUNCTION `??zb_SystemReset::?relay`,00H
        EXTERN `??zb_WriteConfiguration::?relay`
        FUNCTION `??zb_WriteConfiguration::?relay`,00H
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sapi_TaskID
        EXTERN zb_BindDevice
        FUNCTION zb_BindDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_ReadConfiguration
        FUNCTION zb_ReadConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SendDataRequest
        FUNCTION zb_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_StartRequest
        FUNCTION zb_StartRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SystemReset
        FUNCTION zb_SystemReset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_WriteConfiguration
        FUNCTION zb_WriteConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\DAT\bau-quang\CodeZigbee - CC2530\Projects\zstack\Samples\SimpleApp\Source\SimpleSensor.c
//    1 
//    2 /******************************************************************************
//    3  * INCLUDES
//    4  */
//    5 
//    6 #include "ZComDef.h"
//    7 #include "OSAL.h"
//    8 #include "sapi.h"
//    9 #include "hal_key.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   10 #include "hal_led.h"
//   11 #include "hal_adc.h"
//   12 #include "hal_mcu.h"
//   13 #include "SimpleApp.h"
//   14 #include "hal_uart.h"
//   15 
//   16 /*********************************************************************
//   17  * CONSTANTS
//   18  */
//   19 #define MY_ID  (uint8)1
//   20 // Application States
//   21 #define APP_INIT                           0    // Initial state
//   22 #define APP_START                          1    // Sensor has joined network
//   23 #define APP_BOUND                          2    // Sensor is bound to collector
//   24 
//   25 // Application osal event identifiers
//   26 // Bit mask of events ( from 0x0000 to 0x00FF )
//   27 #define MY_START_EVT                0x0001
//   28 #define MY_REPORT_TEMP_EVT          0x0002
//   29 #define MY_REPORT_BATT_EVT          0x0004
//   30 #define MY_FIND_COLLECTOR_EVT       0x0008
//   31 #define ID_REPORT_EVT               0x0010
//   32 #define CHECK_BUT_EVT               0x0020
//   33 
//   34 // ADC definitions for CC2430/CC2530 from the hal_adc.c file
//   35 #if defined (HAL_MCU_CC2430) || defined (HAL_MCU_CC2530)
//   36 #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
//   37 #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
//   38 #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
//   39 #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
//   40 #define HAL_ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
//   41 #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
//   42 #endif //HAL_MCU_CC2430 || HAL_MCU_CC2530
//   43 
//   44 /*********************************************************************
//   45  * TYPEDEFS
//   46  */
//   47 
//   48 /*********************************************************************
//   49  * LOCAL VARIABLES
//   50  */
//   51 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   52 static uint8 myAppState = APP_INIT;
myAppState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   53 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   54 static uint16 myStartRetryDelay = 1000;      // milliseconds
myStartRetryDelay:
        DATA16
        DS 2
        REQUIRE `?<Initializer for myStartRetryDelay>`
        REQUIRE __INIT_XDATA_I
//   55 static uint16 myTempReportPeriod = 5000;     // milliseconds
//   56 static uint16 myBatteryCheckPeriod = 15000;   // milliseconds

        RSEG XDATA_I:XDATA:NOROOT(0)
//   57 static uint16 myBindRetryDelay = 1000;       // milliseconds
myBindRetryDelay:
        DATA16
        DS 2
        REQUIRE `?<Initializer for myBindRetryDelay>`
        REQUIRE __INIT_XDATA_I
//   58 static uint16 myIdReportPeriod = 2000;     // milliseconds

        RSEG XDATA_I:XDATA:NOROOT(0)
//   59 static uint16 myCheckButPeriod = 200;     // milliseconds
myCheckButPeriod:
        DATA16
        DS 2
        REQUIRE `?<Initializer for myCheckButPeriod>`
        REQUIRE __INIT_XDATA_I
//   60 
//   61 static void Uart0_Cb(uint8 port, uint8 event);
//   62 
//   63 /*********************************************************************
//   64  * GLOBAL VARIABLES
//   65  */
//   66 
//   67 // Inputs and Outputs for Sensor device
//   68 #define NUM_OUT_CMD_SENSOR                1
//   69 #define NUM_IN_CMD_SENSOR                 1
//   70 
//   71 // List of output and input commands for Sensor device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   72 const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
zb_OutCmdList:
        DW 2
//   73 {
//   74   SENSOR_REPORT_CMD_ID
//   75 };
//   76 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   77 const cId_t zb_InCmdList[NUM_IN_CMD_SENSOR] =
zb_InCmdList:
        DW 3
//   78 {
//   79   CTRL_PUMP_CMD_ID
//   80 };
//   81 
//   82 #define TEMP_REPORT     0x01
//   83 #define BATTERY_REPORT  0x02
//   84 #define ID_REPORT       0x04
//   85 #define BUT_REPORT      0x08
//   86 
//   87 // Define SimpleDescriptor for Sensor device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   88 const SimpleDescriptionFormat_t zb_SimpleDesc =
zb_SimpleDesc:
        DB 2
        DATA16
        DW 3856
        DW 3
        DATA8
        DB 1
        DB 1
        DATA16
        DW zb_InCmdList
        DATA8
        DB 1
        DATA16
        DW zb_OutCmdList
//   89 {
//   90   MY_ENDPOINT_ID,             //  Endpoint
//   91   MY_PROFILE_ID,              //  Profile ID
//   92   DEV_ID_SENSOR,              //  Device ID
//   93   DEVICE_VERSION_SENSOR,      //  Device Version
//   94   0,                          //  Reserved
//   95   NUM_IN_CMD_SENSOR,          //  Number of Input Commands
//   96   (cId_t *) zb_InCmdList,             //  Input Command List
//   97   NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
//   98   (cId_t *) zb_OutCmdList     //  Output Command List
//   99 };
//  100 
//  101 
//  102 /*********************************************************************
//  103  * LOCAL FUNCTIONS
//  104  */
//  105 static void myApp_StartReporting( void );
//  106 static void myApp_StopReporting( void );
//  107 
//  108 static uint8 myApp_ReadTemperature( void );
//  109 static uint8 myApp_ReadBattery( void );
//  110 
//  111 
//  112 /*****************************************************************************
//  113  * @fn          zb_HandleOsalEvent
//  114  *
//  115  * @brief       The zb_HandleOsalEvent function is called by the operating
//  116  *              system when a task event is set
//  117  *
//  118  * @param       event - Bitmask containing the events that have been set
//  119  *
//  120  * @return      none
//  121  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  122 void zb_HandleOsalEvent( uint16 event )
zb_HandleOsalEvent:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zb_HandleOsalEvent
        CODE
//  123 {
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_ReadConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_StartRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_BindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 31
        MOV     A,#-0x1f
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
//  124   static uint8 pData[2];
//  125   uint8 startOptions;
//  126   uint8 logicalType;
//  127   
//  128   
//  129   if ( event & ZB_ENTRY_EVENT )
        ANL     A,#0x10
        JNZ     $+5
        LJMP    ??zb_HandleOsalEvent_0 & 0xFFFF
//  130   {
//  131     P1SEL &= 0xFD;  /*Set P1_1 as GPIO */
        ANL     0xf4,#0xfd
//  132     P1DIR &= 0xFD; /*Set P1_1 as input */
        ANL     0xfe,#0xfd
//  133     
//  134     osal_start_timerEx( sapi_TaskID, CHECK_BUT_EVT, myCheckButPeriod );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  135     
//  136     halUARTCfg_t uConfig;
//  137     uConfig.configured = TRUE; 
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  138     uConfig.baudRate = HAL_UART_BR_9600;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  139     uConfig.flowControl = FALSE;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  140     uConfig.flowControlThreshold = 48;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x30
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  141     uConfig.idleTimeout = 6; 
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  142     uConfig.rx.maxBufSize = 128;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  143     uConfig.tx.maxBufSize = 128;      
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  144     uConfig.intEnable = TRUE;//enable interrupts
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  145     uConfig.callBackFunc = &Uart0_Cb;
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`??Uart0_Cb::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??Uart0_Cb::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  146     HalUARTOpen(HAL_UART_PORT_0,&uConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x0
        LCALL   `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
//  147     HalUARTWrite(HAL_UART_PORT_0,"\nENTRY\n", (byte)osal_strlen("\nENTRY\n")); 
        MOV     ?V0,#`?<Constant "\\nENTRY\\n">` & 0xff
        MOV     ?V1,#(`?<Constant "\\nENTRY\\n">` >> 8) & 0xff
        ; Setup parameters for call to function osal_strlen
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  148     
//  149     startOptions = ZCD_STARTOPT_CLEAR_STATE | ZCD_STARTOPT_CLEAR_CONFIG;    
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x3
        MOVX    @DPTR,A
//  150     zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x1
        MOV     R1,A
        LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
//  151     
//  152     logicalType = ZG_DEVICETYPE_ENDDEVICE;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  153     zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
        ; Setup parameters for call to function zb_WriteConfiguration
        DEC     A
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
//  154     
//  155     zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_ReadConfiguration
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   `??zb_ReadConfiguration::?relay`; Banked call to: zb_ReadConfiguration
//  156     startOptions = ZCD_STARTOPT_AUTO_START;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  157     zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
//  158     
//  159     zb_StartRequest();
        ; Setup parameters for call to function zb_StartRequest
        LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
//  160   }
//  161   
//  162   if ( event & MY_FIND_COLLECTOR_EVT )
??zb_HandleOsalEvent_0:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??zb_HandleOsalEvent_1
//  163   {
//  164     //HalUARTWrite(HAL_UART_PORT_0,"FIND_COLLECTOR\n", (byte)osal_strlen("FIND_COLLECTOR\n"));  
//  165     zb_BindDevice( TRUE, SENSOR_REPORT_CMD_ID, (uint8 *)NULL );
        ; Setup parameters for call to function zb_BindDevice
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     R1,#0x1
        LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
//  166   }
//  167   
//  168 /*  if ( event & MY_REPORT_TEMP_EVT )
//  169   {
//  170     pData[0] = TEMP_REPORT;
//  171     pData[1] =  myApp_ReadTemperature();
//  172     zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, 2, pData, 0, AF_ACK_REQUEST, 0 );
//  173     //0xFFFE Gui toi thiet bi dang Bind
//  174     //HalUARTWrite(HAL_UART_PORT_0,"REPORT_TEMP\n", (byte)osal_strlen("REPORT_TEMP\n")); 
//  175     osal_start_timerEx( sapi_TaskID, MY_REPORT_TEMP_EVT, myTempReportPeriod );
//  176   }
//  177 
//  178   if ( event & MY_REPORT_BATT_EVT )
//  179   {
//  180     pData[0] = BATTERY_REPORT;
//  181     pData[1] =  myApp_ReadBattery();
//  182     zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, 2, pData, 0, AF_ACK_REQUEST, 0 );
//  183     //HalUARTWrite(HAL_UART_PORT_0,"REPORT_BATT\n", (byte)osal_strlen("REPORT_BATT\n")); 
//  184     osal_start_timerEx( sapi_TaskID, MY_REPORT_BATT_EVT, myBatteryCheckPeriod );
//  185   }
//  186 
//  187   if ( event & ID_REPORT_EVT )
//  188   {
//  189     pData[0] = ID_REPORT;
//  190     pData[1] =  MY_ID;
//  191     zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, 2, pData, 0, AF_ACK_REQUEST, 0 );
//  192     //0xFFFE Gui toi thiet bi dang Bind
//  193     //HalUARTWrite(HAL_UART_PORT_0,"REPORT_ID\n", (byte)osal_strlen("REPORT_ID\n")); 
//  194     osal_start_timerEx( sapi_TaskID, ID_REPORT_EVT, myIdReportPeriod );
//  195   }
//  196 */
//  197   if ( event & CHECK_BUT_EVT )
??zb_HandleOsalEvent_1:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??zb_HandleOsalEvent_2
//  198   {
//  199     if( myAppState == APP_BOUND && P1_1 == 1 )    
        MOV     DPTR,#myAppState
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??zb_HandleOsalEvent_3
        MOV     C,0x90.1
        JNC     ??zb_HandleOsalEvent_3
//  200     {
//  201       pData[0] = BUT_REPORT;
        MOV     DPTR,#??pData
        MOV     A,#0x8
        MOVX    @DPTR,A
//  202       pData[1] =  MY_ID;
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
//  203       zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, 2, pData, 0, AF_ACK_REQUEST, 0 );
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0,#0x10
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 45)
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0,#??pData & 0xff
        MOV     ?V1,#(??pData >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     R1,#0x2
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x2
        MOV     R3,#-0x1
        LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 43)
//  204       //0xFFFE Gui toi thiet bi dang Bind
//  205       HalUARTWrite(HAL_UART_PORT_0,"BUT_REPORT\n", (byte)osal_strlen("BUT_REPORT\n")); 
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "BUT_REPORT\\n">` & 0xff
        MOV     R3,#(`?<Constant "BUT_REPORT\\n">` >> 8) & 0xff
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V0,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V0
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "BUT_REPORT\\n">` & 0xff
        MOV     R3,#(`?<Constant "BUT_REPORT\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  206     
//  207     }
//  208     osal_start_timerEx( sapi_TaskID, CHECK_BUT_EVT, myCheckButPeriod );
??zb_HandleOsalEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine2 & 0xFFFF
//  209   }
??CrossCallReturnLabel_1:
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  210 
//  211 }
??zb_HandleOsalEvent_2:
        MOV     A,#0x1f
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 43)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Valid
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function zb_HandleOsalEvent
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function zb_HandleOsalEvent
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV     DPTR,#myCheckButPeriod
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??pData:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  212 /*********************************************************************
//  213  * @fn      zb_HandleKeys
//  214  *
//  215  * @brief   Handles all key events for this device.
//  216  *
//  217  * @param   shift - true if in shift/alt.
//  218  * @param   keys - bit field for key events. Valid entries:
//  219  *                 EVAL_SW4
//  220  *                 EVAL_SW3
//  221  *                 EVAL_SW2
//  222  *                 EVAL_SW1
//  223  *
//  224  * @return  none
//  225  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  226 void zb_HandleKeys( uint8 shift, uint8 keys )
zb_HandleKeys:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zb_HandleKeys
        CODE
//  227 {
        ; Saved register size: 0
        ; Auto size: 0
//  228   return;
        LJMP    ?BRET
//  229 }
          CFI EndBlock cfiBlock5
//  230 /******************************************************************************
//  231  * @fn          zb_StartConfirm
//  232  *
//  233  * @brief       The zb_StartConfirm callback is called by the ZigBee stack
//  234  *              after a start request operation completes
//  235  *
//  236  * @param       status - The status of the start operation.  Status of
//  237  *                       ZB_SUCCESS indicates the start operation completed
//  238  *                       successfully.  Else the status is an error code.
//  239  *
//  240  * @return      none
//  241  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  242 void zb_StartConfirm( uint8 status )
zb_StartConfirm:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zb_StartConfirm
        CODE
//  243 {
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  244   if ( status == ZB_SUCCESS )
        JNZ     ??zb_StartConfirm_0
//  245   {
//  246     myAppState = APP_START;
        MOV     DPTR,#myAppState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  247 
//  248     // Set event to bind to a collector
//  249     osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine3 & 0xFFFF
//  250   }
??CrossCallReturnLabel_4:
        MOV     R2,#0x8
        SJMP    ??zb_StartConfirm_1
//  251   else
//  252   {
//  253     // Try joining again later with a delay
//  254     osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
??zb_StartConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myStartRetryDelay
        LCALL   ??Subroutine4_0 & 0xFFFF
//  255   }
??CrossCallReturnLabel_2:
        MOV     R2,#0x1
??zb_StartConfirm_1:
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  256 }
          CFI EndBlock cfiBlock6
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function zb_StartConfirm
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zb_BindConfirm
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOV     DPTR,#myBindRetryDelay
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine4_0:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function zb_HandleOsalEvent
          CFI Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zb_HandleOsalEvent
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_1
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-4
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zb_StartConfirm
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zb_StartConfirm
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zb_BindConfirm
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16
//  257 /******************************************************************************
//  258  * @fn          zb_SendDataConfirm
//  259  *
//  260  * @brief       The zb_SendDataConfirm callback function is called by the
//  261  *              ZigBee after a send data operation completes
//  262  *
//  263  * @param       handle - The handle identifying the data transmission.
//  264  *              status - The status of the operation.
//  265  *
//  266  * @return      none
//  267  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  268 void zb_SendDataConfirm( uint8 handle, uint8 status )
zb_SendDataConfirm:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function zb_SendDataConfirm
        CODE
//  269 {
        FUNCALL zb_SendDataConfirm, zb_BindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
//  270   (void)handle; 
//  271   
//  272   //HalUARTWrite(HAL_UART_PORT_0,"SendDataConfirm ", (byte)osal_strlen("SendDataConfirm ")); 
//  273 
//  274   if ( status != ZSuccess )
        JZ      ??zb_SendDataConfirm_0
//  275   {    
//  276     //HalUARTWrite(HAL_UART_PORT_0,"Fail\n", (byte)osal_strlen("Fail\n"));
//  277     // Remove bindings to the existing collector
//  278     zb_BindDevice( FALSE, SENSOR_REPORT_CMD_ID, (uint8 *)NULL );
        ; Setup parameters for call to function zb_BindDevice
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     R1,#0x0
        LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
//  279 
//  280     myAppState = APP_START;
        MOV     DPTR,#myAppState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  281     //myApp_StopReporting();
//  282 
//  283     // Start process of finding new collector with minimal delay
//  284     osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, 1 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  285   }
//  286   else
//  287   {
//  288     //HalUARTWrite(HAL_UART_PORT_0,"Success\n", (byte)osal_strlen("Success\n"));
//  289   }
//  290 }
??zb_SendDataConfirm_0:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock17
//  291 /******************************************************************************
//  292  * @fn          zb_BindConfirm
//  293  *
//  294  * @brief       The zb_BindConfirm callback is called by the ZigBee stack
//  295  *              after a bind operation completes.
//  296  *
//  297  * @param       commandId - The command ID of the binding being confirmed.
//  298  *              status - The status of the bind operation.
//  299  *
//  300  * @return      none
//  301  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  302 void zb_BindConfirm( uint16 commandId, uint8 status )
zb_BindConfirm:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function zb_BindConfirm
        CODE
//  303 {
        FUNCALL zb_BindConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  304   (void)commandId;
//  305   
//  306   //HalUARTWrite(HAL_UART_PORT_0,"BindConfirm\n", (byte)osal_strlen("BindConfirm\n")); 
//  307 
//  308   if ( ( status == ZB_SUCCESS ) && ( myAppState == APP_START ) )
        JNZ     ??zb_BindConfirm_0
        MOV     DPTR,#myAppState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zb_BindConfirm_0
//  309   {
//  310     myAppState = APP_BOUND;
        MOV     A,#0x2
        MOVX    @DPTR,A
        SJMP    ??zb_BindConfirm_1
//  311 
//  312     //Start reporting sensor values
//  313     //myApp_StartReporting();
//  314     
//  315   }
//  316   else
//  317   {
//  318     // Continue to discover a collector
//  319     osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
??zb_BindConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine3 & 0xFFFF
//  320   }
??CrossCallReturnLabel_5:
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  321 }
??zb_BindConfirm_1:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock18
//  322 /******************************************************************************
//  323  * @fn          zb_AllowBindConfirm
//  324  *
//  325  * @brief       Indicates when another device attempted to bind to this device
//  326  *
//  327  * @param
//  328  *
//  329  * @return      none
//  330  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  331 void zb_AllowBindConfirm( uint16 source )
zb_AllowBindConfirm:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function zb_AllowBindConfirm
        CODE
//  332 {
        ; Saved register size: 0
        ; Auto size: 0
//  333   (void)source;
//  334   //HalUARTWrite(HAL_UART_PORT_0,"AllowBindConfirm\n", (byte)osal_strlen("AllowBindConfirm\n"));
//  335 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock19
//  336 /******************************************************************************
//  337  * @fn          zb_FindDeviceConfirm
//  338  *
//  339  * @brief       The zb_FindDeviceConfirm callback function is called by the
//  340  *              ZigBee stack when a find device operation completes.
//  341  *
//  342  * @param       searchType - The type of search that was performed.
//  343  *              searchKey - Value that the search was executed on.
//  344  *              result - The result of the search.
//  345  *
//  346  * @return      none
//  347  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  348 void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
zb_FindDeviceConfirm:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zb_FindDeviceConfirm
        CODE
//  349 {
        ; Saved register size: 0
        ; Auto size: 0
//  350   // Add your code here and remove the "(void)" lines.
//  351   (void)searchType;
//  352   (void)searchKey;
//  353   (void)result;
//  354   //HalUARTWrite(HAL_UART_PORT_0,"FindDeviceConfirm\n", (byte)osal_strlen("FindDeviceConfirm\n"));
//  355 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock20
//  356 
//  357 /******************************************************************************
//  358  * @fn          zb_ReceiveDataIndication
//  359  *
//  360  * @brief       The zb_ReceiveDataIndication callback function is called
//  361  *              asynchronously by the ZigBee stack to notify the application
//  362  *              when data is received from a peer device.
//  363  *
//  364  * @param       source - The short address of the peer device that sent the data
//  365  *              command - The commandId associated with the data
//  366  *              len - The number of bytes in the pData parameter
//  367  *              pData - The data sent by the peer device
//  368  *
//  369  * @return      none
//  370  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  371 void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData,int8 r_power  )
zb_ReceiveDataIndication:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function zb_ReceiveDataIndication
        CODE
//  372 {
        ; Saved register size: 0
        ; Auto size: 0
//  373   //HalUARTWrite(HAL_UART_PORT_0,"ReceiveDataIndication\n", (byte)osal_strlen("ReceiveDataIndication\n")); 
//  374   
//  375 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock21
//  376 
//  377 
//  378 /******************************************************************************
//  379  * @fn          my_StartReporting
//  380  *
//  381  * @brief       Starts the process to periodically report sensor readings
//  382  *
//  383  * @param
//  384  *
//  385  * @return      none
//  386  */
//  387 void myApp_StartReporting( void )
//  388 {
//  389   //osal_start_timerEx( sapi_TaskID, MY_REPORT_TEMP_EVT, myTempReportPeriod );
//  390   //osal_start_timerEx( sapi_TaskID, MY_REPORT_BATT_EVT, myBatteryCheckPeriod );
//  391   osal_start_timerEx( sapi_TaskID, ID_REPORT_EVT, myIdReportPeriod );
//  392   //HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
//  393   
//  394   //HalUARTWrite(HAL_UART_PORT_0,"StartReporting\n", (byte)osal_strlen("StartReporting\n")); 
//  395 
//  396 }
//  397 /******************************************************************************
//  398  * @fn          my_StopReporting
//  399  *
//  400  * @brief       Stops the process to periodically report sensor readings
//  401  *
//  402  * @param
//  403  *
//  404  * @return      none
//  405  */
//  406 void myApp_StopReporting( void )
//  407 {
//  408   //osal_stop_timerEx( sapi_TaskID, MY_REPORT_TEMP_EVT );
//  409   //osal_stop_timerEx( sapi_TaskID, MY_REPORT_BATT_EVT );
//  410   osal_stop_timerEx( sapi_TaskID, ID_REPORT_EVT );
//  411   //HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
//  412   
//  413   //HalUARTWrite(HAL_UART_PORT_0,"StopReporting\n", (byte)osal_strlen("StopReporting\n")); 
//  414 }
//  415 /******************************************************************************
//  416  * @fn          myApp_ReadBattery
//  417  *
//  418  * @brief       Reports battery sensor reading
//  419  *
//  420  * @param
//  421  *
//  422  * @return
//  423  ******************************************************************************/
//  424 uint8 myApp_ReadBattery( void )
//  425 {
//  426 
//  427 #if defined (HAL_MCU_CC2430) || defined (HAL_MCU_CC2530)
//  428 
//  429   uint16 value;
//  430 
//  431   /* Clear ADC interrupt flag */
//  432   ADCIF = 0;
//  433 
//  434   ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_128 | HAL_ADC_CHN_VDD3);
//  435 
//  436   /* Wait for the conversion to finish */
//  437   while ( !ADCIF );
//  438 
//  439   /* Get the result */
//  440   value = ADCL;
//  441   value |= ((uint16) ADCH) << 8;
//  442 
//  443   /*
//  444    * value now contains measurement of Vdd/3
//  445    * 0 indicates 0V and 32767 indicates 1.25V
//  446    * voltage = (value*3*1.25)/32767 volts
//  447    * we will multiply by this by 10 to allow units of 0.1 volts
//  448    */
//  449 
//  450   value = value >> 6;   // divide first by 2^6
//  451   value = (uint16)(value * 37.5);
//  452   value = value >> 9;   // ...and later by 2^9...to prevent overflow during multiplication
//  453 
//  454   return value;
//  455 
//  456 #endif    // CC2430 or CC2530
//  457 
//  458 #if defined HAL_MCU_MSP430
//  459 
//  460   uint16 value;
//  461 
//  462 /*
//  463   There are more than MSP430 board now. Idealy, ADC read should be called
//  464 */
//  465 #if defined (HAL_BOARD_F5438)
//  466 
//  467   value = HalAdcRead (HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
//  468   value = value * 50;
//  469   value = value / 4096;
//  470 
//  471 #else
//  472 
//  473   ADC12CTL0 = ADC12ON+SHT0_2+REFON;             // Turn on and set up ADC12
//  474   ADC12CTL1 = SHP;                              // Use sampling timer
//  475   ADC12MCTL0 = SREF_1+INCH_11;                  // Vr+=Vref+
//  476 
//  477   ADC12CTL0 |= ENC | ADC12SC;                   // Start conversion
//  478   while ((ADC12IFG & BIT0)==0);
//  479 
//  480   value = ADC12MEM0;
//  481 
//  482   /*
//  483    * value now contains measurement of AVcc/2
//  484    * value is in range 0 to 4095 indicating voltage from 0 to 1.5V
//  485    * voltage = (value*2*1.5)/4095 volts
//  486    * we will multiply by this by 10 to allow units of 0.1 volts
//  487    */
//  488 
//  489   value = value >> 1;     // value is now in range of 0 to 2048
//  490   value = value * 30;
//  491   value = value >> 11;
//  492 
//  493 #endif
//  494 
//  495   return ( value );
//  496 
//  497 #endif // MSP430
//  498 
//  499 #if defined HAL_MCU_AVR
//  500 
//  501   // If platform doesnt support a battery sensor, just return random value
//  502 
//  503   uint8 value;
//  504   value = 20 + ( osal_rand() & 0x000F );
//  505   return ( value );
//  506 
//  507 #endif  // AVR
//  508 
//  509 }
//  510 /******************************************************************************
//  511  * @fn          myApp_ReadTemperature
//  512  *
//  513  * @brief       Reports temperature sensor reading
//  514  *
//  515  * @param
//  516  *
//  517  * @return
//  518  ******************************************************************************/
//  519 uint8 myApp_ReadTemperature( void )
//  520 {
//  521 
//  522 #if defined (HAL_MCU_CC2430) || defined (HAL_MCU_CC2530)
//  523 
//  524   uint16 value;
//  525 
//  526   /* Clear ADC interrupt flag */
//  527   ADCIF = 0;
//  528 
//  529   ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_512 | HAL_ADC_CHN_TEMP);
//  530 
//  531   /* Wait for the conversion to finish */
//  532   while ( !ADCIF );
//  533 
//  534   /* Get the result */
//  535   value = ADCL;
//  536   value |= ((uint16) ADCH) << 8;
//  537 
//  538   /*
//  539    * value ranges from 0 to 0x8000 indicating 0V and 1.25V
//  540    * VOLTAGE_AT_TEMP_ZERO = 0.743 V = 19477
//  541    * TEMP_COEFFICIENT = 0.0024 V/C = 62.9 /C
//  542    * These parameters are typical values and need to be calibrated
//  543    * See the datasheet for the appropriate chip for more details
//  544    * also, the math below may not be very accurate
//  545    */
//  546 #if defined (HAL_MCU_CC2430)
//  547   #define VOLTAGE_AT_TEMP_ZERO      19477   // 0.743 V
//  548   #define TEMP_COEFFICIENT          62.9    // 0.0024 V/C
//  549 #elif defined (HAL_MCU_CC2530)
//  550     /* Assume ADC = 5158 at 0C and ADC = 15/C */
//  551   #define VOLTAGE_AT_TEMP_ZERO      5158
//  552   #define TEMP_COEFFICIENT          14
//  553 #endif
//  554 
//  555   // limit min temp to 0 C
//  556   if ( value < VOLTAGE_AT_TEMP_ZERO )
//  557     value = VOLTAGE_AT_TEMP_ZERO;
//  558 
//  559   value = value - VOLTAGE_AT_TEMP_ZERO;
//  560 
//  561   // limit max temp to 99 C
//  562   if ( value > TEMP_COEFFICIENT * 99 )
//  563     value = TEMP_COEFFICIENT * 99;
//  564 
//  565   return ( (uint8)(value/TEMP_COEFFICIENT) );
//  566 
//  567 #endif  // CC2430 || CC2530
//  568 
//  569 
//  570 #if defined HAL_MCU_MSP430
//  571 
//  572   uint16 value;
//  573 
//  574 /*
//  575   There are more than MSP430 board now. Idealy, ADC read should be called
//  576 */
//  577 #if defined (HAL_BOARD_F5438)
//  578 
//  579   long multiplier, offset;
//  580 
//  581   value = HalAdcRead (HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
//  582 
//  583   multiplier = (long) 7040 * 9 /5 ;
//  584   offset = (long) 2620 * 9 / 5 - 320;
//  585 
//  586   value = (long) value * multiplier/4096 - offset;
//  587 
//  588   return (value);
//  589 
//  590 #else
//  591   ADC12CTL0 = ADC12ON+SHT0_7+REFON;         // Turn on and set up ADC12
//  592   ADC12CTL1 = SHP;                          // Use sampling timer
//  593   ADC12MCTL0 = SREF_1+INCH_10;              // Vr+=Vref+
//  594 
//  595   ADC12CTL0 |= ENC | ADC12SC;               // Start conversion
//  596   while ((ADC12IFG & BIT0)==0);
//  597 
//  598   value = ADC12MEM0;
//  599 
//  600   /*
//  601    * value ranges from 0 to 0x0FFF indicating 0V and 1.5V
//  602    * VOLTAGE_AT_TEMP_ZERO = 0.986 V = 2692
//  603    * TEMP_COEFFICIENT = 0.00355 V/C = 9.69 /C
//  604    * These parameters are typical values and need to be calibrated
//  605    * See the datasheet for the appropriate chip for more details
//  606    * also, the math below is not very accurate
//  607    */
//  608 
//  609 #define VOLTAGE_AT_TEMP_ZERO      2692      // 0.986 V
//  610 #define TEMP_COEFFICIENT          9.69      // 0.00355 V/C
//  611 
//  612   // limit min temp to 0 C
//  613   if ( value < VOLTAGE_AT_TEMP_ZERO )
//  614     value = VOLTAGE_AT_TEMP_ZERO;
//  615 
//  616   value = value - VOLTAGE_AT_TEMP_ZERO;
//  617 
//  618   // limit max temp to 99 C
//  619   if ( value > (uint16)(TEMP_COEFFICIENT * 99.0) )
//  620     value = (uint16)(TEMP_COEFFICIENT * 99.0);
//  621 
//  622   return ( (uint8)(value/TEMP_COEFFICIENT) );
//  623 #endif // HAL_BOARD_F5438
//  624 
//  625 #endif // MSP430
//  626 
//  627 #if defined HAL_MCU_AVR
//  628 
//  629   // If platform doesnt support a temperature sensor, just return random value
//  630   uint8 value;
//  631   value = 20 + ( osal_rand() & 0x000F );
//  632   return ( value );
//  633 
//  634 #endif  // AVR
//  635 
//  636 }
//  637 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  638 static void Uart0_Cb(uint8 port, uint8 event){
Uart0_Cb:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function Uart0_Cb
        CODE
        FUNCALL Uart0_Cb, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart0_Cb, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,R1
        MOV     ?V1,R2
//  639   uint8  ch;
//  640   uint8 startOptions;
//  641   if ((event&HAL_UART_RX_TIMEOUT) || (event&HAL_UART_RX_ABOUT_FULL)){    
        MOV     A,#0x6
        ANL     A,?V1
        JNZ     ??Uart0_Cb_0
//  642     while (Hal_UART_RxBufLen(port))
//  643     {
//  644       HalUARTRead ( port, &ch, 1);
//  645       if( ch == '?' ){
//  646         HalUARTWrite(HAL_UART_PORT_0,"\nEndDevice:", (byte)osal_strlen("\nEndDevice:"));  
//  647         if(MY_ID==1)
//  648           HalUARTWrite(HAL_UART_PORT_0,"1\n", (byte)osal_strlen("1\n"));  
//  649         else if(MY_ID==2)
//  650           HalUARTWrite(HAL_UART_PORT_0,"2\n", (byte)osal_strlen("2\n"));  
//  651         else if(MY_ID==3)
//  652           HalUARTWrite(HAL_UART_PORT_0,"3\n", (byte)osal_strlen("3\n"));  
//  653         
//  654       }else if( ch == 'r' ){
//  655           startOptions = ZCD_STARTOPT_CLEAR_STATE | ZCD_STARTOPT_CLEAR_CONFIG;
//  656           zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
//  657           zb_SystemReset();
//  658       }else if( ch == '3' ){        
//  659         
//  660       }
//  661     }
//  662   }
//  663 }
??Uart0_Cb_1:
        MOV     A,#0x2
        LJMP    ?Subroutine0 & 0xFFFF
??Uart0_Cb_2:
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "\\nEndDevice:">` & 0xff
        MOV     R3,#(`?<Constant "\\nEndDevice:">` >> 8) & 0xff
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\nEndDevice:">` & 0xff
        MOV     R3,#(`?<Constant "\\nEndDevice:">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "1\\n">` & 0xff
        MOV     R3,#(`?<Constant "1\\n">` >> 8) & 0xff
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "1\\n">` & 0xff
        MOV     R3,#(`?<Constant "1\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
??Uart0_Cb_0:
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     R1,?V0
        LCALL   `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JZ      ??Uart0_Cb_1
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,?V0
        LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x3f
        JZ      ??Uart0_Cb_2
        MOVX    A,@DPTR
        XRL     A,#0x72
        JNZ     ??Uart0_Cb_0
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
        ; Setup parameters for call to function zb_SystemReset
        LCALL   `??zb_SystemReset::?relay`; Banked call to: zb_SystemReset
        SJMP    ??Uart0_Cb_0
          CFI EndBlock cfiBlock22

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for myStartRetryDelay>`:
        DATA16
        DW 1000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for myBindRetryDelay>`:
        DATA16
        DW 1000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for myCheckButPeriod>`:
        DATA16
        DW 200

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_HandleOsalEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_HandleOsalEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_StartConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_StartConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_SendDataConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_SendDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_BindConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_BindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_AllowBindConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_AllowBindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_FindDeviceConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_FindDeviceConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zb_ReceiveDataIndication::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zb_ReceiveDataIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Uart0_Cb::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Uart0_Cb

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\nENTRY\\n">`:
        DB "\012ENTRY\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "BUT_REPORT\\n">`:
        DB "BUT_REPORT\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\nEndDevice:">`:
        DB "\012EndDevice:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "1\\n">`:
        DB "1\012"

        END
// 
// 659 bytes in segment BANKED_CODE
//  54 bytes in segment BANK_RELAYS
//   3 bytes in segment SFR_AN
//   6 bytes in segment XDATA_I
//   6 bytes in segment XDATA_ID
//  51 bytes in segment XDATA_ROM_C
//   3 bytes in segment XDATA_Z
// 
//  60 bytes of CODE     memory
//  51 bytes of CONST    memory
//   0 bytes of DATA     memory (+ 3 bytes shared)
// 659 bytes of HUGECODE memory
//   9 bytes of XDATA    memory
//
//Errors: none
//Warnings: 6
