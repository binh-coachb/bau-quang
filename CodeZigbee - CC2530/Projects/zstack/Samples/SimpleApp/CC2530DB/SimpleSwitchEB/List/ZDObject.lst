###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                12/Mar/2017  18:22:49
# Copyright 2004-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00001000 -DZDAPP_CONFIG_PAN_ID=0x6699
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Components\stack\zdo\ZDObject.c" -D NWK_AUTO_POLL
#        -D HOLD_AUTO_START -D REFLECTOR -D POWER_SAVING -D NV_INIT -D
#        xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_SAPI_FUNC
#        -D xMT_SAPI_CB_FUNC -lC "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSwitchEB\List"
#        -lA "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSwitchEB\List"
#        --diag_suppress Pe001,Pa010 -o "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSwitchEB\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\" -I
#        "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\Source\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSwitchEB\List\ZDObject.lst
#    Object file        =  
#        E:\Zigbee\Code Zigbee -
#        ZStack-CC2530-GIAU\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleSwitchEB\Obj\ZDObject.r51
#
###############################################################################

E:\Zigbee\Code Zigbee - ZStack-CC2530-GIAU\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2011-07-13 10:55:53 -0700 (Wed, 13 Jul 2011) $
      4            Revision:       $Revision: 26766 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          // Status fields used by ZDO_ProcessMgmtRtgReq
     84          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     85          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     86          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     87          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          #if defined ( REFLECTOR )
     93          typedef struct
     94          {
     95            byte SrcTransSeq;
     96            zAddrType_t SrcAddr;
     97            uint16 LocalCoordinator;
     98            byte epIntf;
     99            uint16 ProfileID;
    100            byte numInClusters;
    101            uint16 *inClusters;
    102            byte numOutClusters;
    103            uint16 *outClusters;
    104            byte SecurityUse;
    105            byte status;
    106          } ZDO_EDBind_t;
    107          #endif // defined ( REFLECTOR )
    108          
    109          enum
    110          {
    111            ZDMATCH_INIT,           // Initialized
    112            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    113            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    114          };
    115          
    116          enum
    117          {
    118            ZDMATCH_SENDING_NOT,
    119            ZDMATCH_SENDING_UNBIND,
    120            ZDMATCH_SENDING_BIND
    121          };
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    139          
    140          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    142          #endif
    143          
    144          #if defined ( MANAGED_SCAN )
    145            uint32 managedScanNextChannel = 0;
    146            uint32 managedScanChannelMask = 0;
    147            uint8  managedScanTimesPerChannel = 0;
    148          #endif
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    153          
    154          /*********************************************************************
    155           * LOCAL FUNCTIONS
    156           */
    157          static void ZDODeviceSetup( void );
    158          #if defined ( MANAGED_SCAN )
    159            static void ZDOManagedScan_Next( void );
    160          #endif
    161          #if defined ( REFLECTOR )
    162            static void ZDO_RemoveEndDeviceBind( void );
    163            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    164          #endif
    165          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    166                                          byte numList2, uint16 *list2, uint16 *pMatches );
    167          static void ZDO_RemoveMatchMemory( void );
    168          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    169          static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    170          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    171          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    172          
    173          /*********************************************************************
    174           * @fn          ZDO_Init
    175           *
    176           * @brief       ZDObject and ZDProfile initialization.
    177           *
    178           * @param       none
    179           *
    180           * @return      none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void ZDO_Init( void )
   \                     ZDO_Init:
    183          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            // Initialize ZD items
    185            #if defined ( REFLECTOR )
    186            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    187            #endif
    188          
    189            // Initialize default ZDO_UseExtendedPANID to the APS one.
    190            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    191          
    192            // Setup the device - type of device to create.
    193            ZDODeviceSetup();
   \   000016   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7004         JNZ     ??ZDO_Init_0
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   8002         SJMP    ??ZDO_Init_1
   \                     ??ZDO_Init_0:
   \   000020   7901         MOV     R1,#0x1
   \                     ??ZDO_Init_1:
   \   000022                ; Setup parameters for call to function APS_ReflectorInit
   \   000022   12....       LCALL   `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
   \   000025                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000025   12....       LCALL   `??NLME_DeviceJoiningInit::?relay`; Banked call to: NLME_DeviceJoiningInit
    194          }
   \   000028   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    195          
    196          #if defined ( MANAGED_SCAN )
    197          /*********************************************************************
    198           * @fn      ZDOManagedScan_Next()
    199           *
    200           * @brief   Setup a managed scan.
    201           *
    202           * @param   none
    203           *
    204           * @return  none
    205           */
    206          static void ZDOManagedScan_Next( void )
    207          {
    208            // Is it the first time
    209            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    210            {
    211              // Setup the defaults
    212              managedScanNextChannel  = 1;
    213          
    214              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    215                managedScanNextChannel <<= 1;
    216          
    217              managedScanChannelMask = managedScanNextChannel;
    218              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    219            }
    220            else
    221            {
    222              // Do we need to go to the next channel
    223              if ( managedScanTimesPerChannel == 0 )
    224              {
    225                // Find next active channel
    226                managedScanChannelMask  = managedScanNextChannel;
    227                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    228              }
    229              else
    230              {
    231                managedScanTimesPerChannel--;
    232          
    233                if ( managedScanTimesPerChannel == 0 )
    234                {
    235                  managedScanNextChannel  <<= 1;
    236                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    237                    managedScanNextChannel <<= 1;
    238          
    239                  if ( managedScanNextChannel == 0 )
    240                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    241                }
    242              }
    243            }
    244          }
    245          #endif // MANAGED_SCAN
    246          
    247          /*********************************************************************
    248           * @fn      ZDODeviceSetup()
    249           *
    250           * @brief   Call set functions depending on the type of device compiled.
    251           *
    252           * @param   none
    253           *
    254           * @return  none
    255           */
    256          static void ZDODeviceSetup( void )
    257          {
    258            if ( ZG_BUILD_COORDINATOR_TYPE )
    259            {
    260              NLME_CoordinatorInit();
    261            }
    262          
    263          #if defined ( REFLECTOR )
    264            APS_ReflectorInit( (ZG_DEVICE_COORDINATOR_TYPE) ? APS_REFLECTOR_PUBLIC :  APS_REFLECTOR_PRIVATE );
    265          #endif
    266          
    267            if ( ZG_BUILD_JOINING_TYPE )
    268            {
    269              NLME_DeviceJoiningInit();
    270            }
    271          }
    272          
    273          /*********************************************************************
    274           * @fn          ZDO_StartDevice
    275           *
    276           * @brief       This function starts a device in a network.
    277           *
    278           * @param       logicalType     - Device type to start
    279           *              startMode       - indicates mode of device startup
    280           *              beaconOrder     - indicates time betwen beacons
    281           *              superframeOrder - indicates length of active superframe
    282           *
    283           * @return      none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    286          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
    287            ZStatus_t ret;
    288          #if defined ( ZIGBEE_FREQ_AGILITY )
    289            static uint8 discRetries = 0;
    290          #endif
    291          #if defined ( ZIGBEE_COMMISSIONING )
    292            static uint8 scanCnt = 0;
    293          #endif
    294          
    295            ret = ZUnsupportedMode;
    296          
    297            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    298            {
    299              if ( startMode == MODE_HARD )
    300              {
    301                devState = DEV_COORD_STARTING;
    302                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    303                                                    zgDefaultStartingScanDuration, beaconOrder,
    304                                                    superframeOrder, false );
    305              }
    306              else if ( startMode == MODE_RESUME )
    307              {
    308                // Just start the coordinator
    309                devState = DEV_COORD_STARTING;
    310                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    311              }
    312              else
    313              {
    314          #if defined( LCD_SUPPORTED )
    315                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    316          #endif
    317              }
    318            }
    319          
    320            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   00000E   7401         MOV     A,#0x1
   \   000010   6F           XRL     A,R7
   \   000011   6008         JZ      ??ZDO_StartDevice_0
   \   000013   7402         MOV     A,#0x2
   \   000015   6F           XRL     A,R7
   \   000016   6003         JZ      $+5
   \   000018   02....       LJMP    ??ZDO_StartDevice_1 & 0xFFFF
    321            {
    322              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   00001B   EE           MOV     A,R6
   \   00001C   6005         JZ      ??ZDO_StartDevice_2
   \   00001E   7403         MOV     A,#0x3
   \   000020   6E           XRL     A,R6
   \   000021   7037         JNZ     ??ZDO_StartDevice_3
    323              {
    324                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_2:
   \   000023   90....       MOV     DPTR,#devState
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?Subroutine43 & 0xFFFF
    325          
    326            #if defined( MANAGED_SCAN )
    327                ZDOManagedScan_Next();
    328                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    329            #else
    330                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \                     ??CrossCallReturnLabel_63:
   \   00002B   12....       LCALL   ?XLOAD_R2345
   \   00002E   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000031   E9           MOV     A,R1
   \   000032   F9           MOV     R1,A
    331              #if defined ( ZIGBEE_FREQ_AGILITY )
    332                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    333                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    334                {
    335                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    336                  // change will not be recieved. On these devices or routers that have
    337                  // lost the network, an active scan shall be conducted on the Default
    338                  // Channel list using the extended PANID to find the network. If the
    339                  // extended PANID isn't found using the Default Channel list, an scan
    340                  // should be completed using all channels.
    341                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    342                }
    343              #endif // ZIGBEE_FREQ_AGILITY
    344              #if defined ( ZIGBEE_COMMISSIONING )
    345                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \   000033   7403         MOV     A,#0x3
   \   000035   6E           XRL     A,R6
   \   000036   706A         JNZ     ??ZDO_StartDevice_4
   \   000038   90....       MOV     DPTR,#??scanCnt
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F8           MOV     R0,A
   \   00003D   7401         MOV     A,#0x1
   \   00003F   28           ADD     A,R0
   \   000040   F0           MOVX    @DPTR,A
   \   000041   E8           MOV     A,R0
   \   000042   C3           CLR     C
   \   000043   9405         SUBB    A,#0x5
   \   000045   405B         JC      ??ZDO_StartDevice_4
    346                {
    347                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    348                  // application specific means, the device shall conduct an active scan
    349                  // on the Default Channel list and join the PAN with the same
    350                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    351                  // on all channels.
    352                  // When devices rejoin the network and the PAN is not found from
    353                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   000047   90....       MOV     DPTR,#zgDefaultChannelList
   \   00004A   E4           CLR     A
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   74F8         MOV     A,#-0x8
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   74FF         MOV     A,#-0x1
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   7407         MOV     A,#0x7
   \   000057   F0           MOVX    @DPTR,A
   \   000058   8048         SJMP    ??ZDO_StartDevice_4
    354                }
    355              #endif // ZIGBEE_COMMISSIONING
    356            #endif
    357              }
    358              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_3:
   \   00005A   7401         MOV     A,#0x1
   \   00005C   6E           XRL     A,R6
   \   00005D   7046         JNZ     ??ZDO_StartDevice_1
    359              {
    360                if ( logicalType == NODETYPE_ROUTER )
   \   00005F   7401         MOV     A,#0x1
   \   000061   6F           XRL     A,R7
   \   000062   90....       MOV     DPTR,#devState
   \   000065   702E         JNZ     ??ZDO_StartDevice_5
    361                {
    362                  ZMacScanCnf_t scanCnf;
    363                  devState = DEV_NWK_ORPHAN;
   \   000067   740A         MOV     A,#0xa
   \   000069   F0           MOVX    @DPTR,A
    364          
    365                  /* if router and nvram is available, fake successful orphan scan */
    366                  scanCnf.hdr.Status = ZSUCCESS;
   \   00006A   7401         MOV     A,#0x1
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   E4           CLR     A
   \   000070   F0           MOVX    @DPTR,A
    367                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   000071   7402         MOV     A,#0x2
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   7403         MOV     A,#0x3
   \   000078   F0           MOVX    @DPTR,A
    368                  scanCnf.UnscannedChannels = 0;
   \   000079   04           INC     A
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   F0           MOVX    @DPTR,A
    369                  scanCnf.ResultListSize = 0;
   \   000085   7408         MOV     A,#0x8
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   E4           CLR     A
   \   00008B   F0           MOVX    @DPTR,A
    370                  nwk_ScanJoiningOrphan(&scanCnf);
   \   00008C                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   00008C   AA..         MOV     R2,?XSP + 0
   \   00008E   AB..         MOV     R3,?XSP + 1
   \   000090   12....       LCALL   `??nwk_ScanJoiningOrphan::?relay`; Banked call to: nwk_ScanJoiningOrphan
    371          
    372                  ret = ZSuccess;
   \   000093   8020         SJMP    ??ZDO_StartDevice_6
    373                }
    374                else
    375                {
    376                  devState = DEV_NWK_ORPHAN;
   \                     ??ZDO_StartDevice_5:
   \   000095   740A         MOV     A,#0xa
   \   000097   12....       LCALL   ?Subroutine43 & 0xFFFF
    377                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    378                                                zgDefaultStartingScanDuration );
    379                }
    380              }
    381              else
    382              {
    383          #if defined( LCD_SUPPORTED )
    384                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    385          #endif
    386              }
    387            }
   \                     ??CrossCallReturnLabel_64:
   \   00009A   12....       LCALL   ?XLOAD_R2345
   \   00009D   12....       LCALL   `??NLME_OrphanJoinRequest::?relay`; Banked call to: NLME_OrphanJoinRequest
   \   0000A0   E9           MOV     A,R1
   \   0000A1   F9           MOV     R1,A
    388          
    389            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_4:
   \   0000A2   E9           MOV     A,R1
   \   0000A3   6010         JZ      ??ZDO_StartDevice_6
    390            {
    391              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_1:
   \   0000A5                ; Setup parameters for call to function osal_start_timerEx
   \   0000A5   7CE8         MOV     R4,#-0x18
   \   0000A7   7D03         MOV     R5,#0x3
   \   0000A9   7A01         MOV     R2,#0x1
   \   0000AB   7B00         MOV     R3,#0x0
   \   0000AD   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F9           MOV     R1,A
   \   0000B2   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    392            }
    393          }
   \                     ??ZDO_StartDevice_6:
   \   0000B5   740B         MOV     A,#0xb
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA                REQUIRE ?Subroutine1
   \   0000BA                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000001                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000001   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   90....       MOV     DPTR,#zgDefaultChannelList
   \   000009   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    394          
    395          /**************************************************************************************************
    396           * @fn          zdoSendStateChangeMsg
    397           *
    398           * @brief       Helper function for ZDO_UpdateNwkStatus.
    399           *
    400           * input parameters
    401           *
    402           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    403           * @param       state - The current device state.
    404           *
    405           * output parameters
    406           *
    407           * None.
    408           *
    409           * @return      None.
    410           **************************************************************************************************
    411           */
    412          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
    413          {
    414            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
    415          
    416            if (NULL == pMsg)
    417            {
    418              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
    419              {
    420                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    421                // try again later when more Heap may be available.
    422                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
    423              }
    424              else
    425              {
    426                pMsg->event = ZDO_STATE_CHANGE;
    427                pMsg->status = state;
    428          
    429                (void)osal_msg_send(taskId, (uint8 *)pMsg);
    430              }
    431            }
    432            else
    433            {
    434              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    435              pMsg->status = state;
    436            }
    437          }
    438          
    439          /**************************************************************************************************
    440           * @fn          ZDO_UpdateNwkStatus
    441           *
    442           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    443           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    444           *              than one registered EndPoint, it will only receive one notification per state
    445           *              change. Although the device may go through a sequence of state changes, the
    446           *              Application task may only receive notification of the final, steady-state state
    447           *              because it has the lowest priority and never even runs to receive the intermediate
    448           *              state change notifications.
    449           *
    450           * input parameters
    451           *
    452           * @param       state - The current device state.
    453           *
    454           * output parameters
    455           *
    456           * None.
    457           *
    458           * @return      None.
    459           **************************************************************************************************
    460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    462          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
    463            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   8008         SJMP    ??ZDO_UpdateNwkStatus_0
    464          
    465            while (pItem != NULL)
    466            {
    467              if (pItem->epDesc->endPoint != ZDO_EP)
    468              {
    469                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \                     ??ZDO_UpdateNwkStatus_1:
   \   00000C   A3           INC     DPTR
   \   00000D   E5..         MOV     A,?V1
   \   00000F   F0           MOVX    @DPTR,A
    470              }
    471          
    472              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000014   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000017   4F           ORL     A,R7
   \   000018   6052         JZ      ??ZDO_UpdateNwkStatus_3
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000021   60ED         JZ      ??ZDO_UpdateNwkStatus_2
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ?Subroutine106 & 0xFFFF
    473            }
   \                     ??CrossCallReturnLabel_175:
   \   00002C   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   00002F   F5..         MOV     ?V0,A
   \   000031                ; Setup parameters for call to function osal_msg_find
   \   000031   7AD1         MOV     R2,#-0x2f
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   000037   8A82         MOV     DPL,R2
   \   000039   8B83         MOV     DPH,R3
   \   00003B   E582         MOV     A,DPL
   \   00003D   4583         ORL     A,DPH
   \   00003F   70CB         JNZ     ??ZDO_UpdateNwkStatus_1
   \   000041                ; Setup parameters for call to function osal_msg_allocate
   \   000041   7A02         MOV     R2,#0x2
   \   000043   7B00         MOV     R3,#0x0
   \   000045   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000048   EA           MOV     A,R2
   \   000049   4B           ORL     A,R3
   \   00004A   700E         JNZ     ??ZDO_UpdateNwkStatus_4
   \   00004C                ; Setup parameters for call to function osal_set_event
   \   00004C   7A10         MOV     R2,#0x10
   \   00004E   7B00         MOV     R3,#0x0
   \   000050   90....       MOV     DPTR,#ZDAppTaskID
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000058   80B6         SJMP    ??ZDO_UpdateNwkStatus_2
   \                     ??ZDO_UpdateNwkStatus_4:
   \   00005A   8A82         MOV     DPL,R2
   \   00005C   8B83         MOV     DPH,R3
   \   00005E   74D1         MOV     A,#-0x2f
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E5..         MOV     A,?V1
   \   000064   F0           MOVX    @DPTR,A
   \   000065                ; Setup parameters for call to function osal_msg_send
   \   000065   A9..         MOV     R1,?V0
   \   000067   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00006A   80A4         SJMP    ??ZDO_UpdateNwkStatus_2
    474          #if defined MT_ZDO_CB_FUNC
    475            zdoSendStateChangeMsg(state, MT_TaskID);
    476          #endif
    477          
    478            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_3:
   \   00006C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006C   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00006F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000072   12....       LCALL   ?Subroutine21 & 0xFFFF
    479            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_383:
   \   000075                ; Setup parameters for call to function NLME_GetExtAddr
   \   000075   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    480          }
   \   000078   02....       LJMP    ??Subroutine213_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine225_0
   \   000001                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine227_0
   \   000001                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine228_0
   \   000001                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine229_0
   \   000001                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine230_0
   \   000001                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
    481          
    482          #if defined ( REFLECTOR )
    483          /*********************************************************************
    484           * @fn          ZDO_RemoveEndDeviceBind
    485           *
    486           * @brief       Remove the end device bind
    487           *
    488           * @param  none
    489           *
    490           * @return      none
    491           */
    492          static void ZDO_RemoveEndDeviceBind( void )
    493          {
    494            if ( ZDO_EDBind != NULL )
    495            {
    496              // Free the RAM
    497              if ( ZDO_EDBind->inClusters != NULL )
    498              {
    499                osal_mem_free( ZDO_EDBind->inClusters );
    500              }
    501              if ( ZDO_EDBind->outClusters != NULL )
    502              {
    503                osal_mem_free( ZDO_EDBind->outClusters );
    504              }
    505              osal_mem_free( ZDO_EDBind );
    506              ZDO_EDBind = NULL;
    507            }
    508          }
    509          #endif // REFLECTOR
    510          
    511          #if defined ( REFLECTOR )
    512          /*********************************************************************
    513           * @fn          ZDO_RemoveEndDeviceBind
    514           *
    515           * @brief       Remove the end device bind
    516           *
    517           * @param  none
    518           *
    519           * @return      none
    520           */
    521          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    522          {
    523            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    524          
    525          #if defined( LCD_SUPPORTED )
    526            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    527            if ( Status == ZDP_SUCCESS )
    528            {
    529              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    530            }
    531            else
    532            {
    533              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    534            }
    535          #endif
    536          
    537          }
    538          #endif // REFLECTOR
    539          
    540          /*********************************************************************
    541           * @fn          ZDO_CompareClusterLists
    542           *
    543           * @brief       Compare one list to another list
    544           *
    545           * @param       numList1 - number of items in list 1
    546           * @param       list1 - first list of cluster IDs
    547           * @param       numList2 - number of items in list 2
    548           * @param       list2 - second list of cluster IDs
    549           * @param       pMatches - buffer to put matches
    550           *
    551           * @return      number of matches
    552           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    553          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    554                                    byte numList2, uint16 *list2, uint16 *pMatches )
    555          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   8C..         MOV     ?V4,R4
    556            byte x, y;
    557            uint16 z;
    558            byte numMatches = 0;
   \   00000D   7A00         MOV     R2,#0x0
    559          
    560            // Check the first in against the seconds out
    561            for ( x = 0; x < numList1; x++ )
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   7410         MOV     A,#0x10
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000019   7412         MOV     A,#0x12
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000021   803F         SJMP    ??ZDO_CompareClusterLists_0
    562            {
    563              for ( y = 0; y < numList2; y++ )
    564              {
    565                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000023   A8..         MOV     R0,?V1
   \   000025   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000028   F5..         MOV     ?V2,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V3,A
    566                if ( list1[x] == z )
   \   00002E   EB           MOV     A,R3
   \   00002F   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000032   F582         MOV     DPL,A
   \   000034   E5..         MOV     A,?V7
   \   000036   39           ADDC    A,R1
   \   000037   F583         MOV     DPH,A
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   65..         XRL     A,?V2
   \   00003C   7004         JNZ     ??ZDO_CompareClusterLists_2
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   65..         XRL     A,?V3
   \                     ??ZDO_CompareClusterLists_2:
   \   000042   7014         JNZ     ??ZDO_CompareClusterLists_3
    567                {
    568                  pMatches[numMatches++] = z;
   \   000044   EA           MOV     A,R2
   \   000045   12....       LCALL   ??Subroutine212_0 & 0xFFFF
    569                }
    570              }
   \                     ??CrossCallReturnLabel_346:
   \   000048   EE           MOV     A,R6
   \   000049   28           ADD     A,R0
   \   00004A   F582         MOV     DPL,A
   \   00004C   EF           MOV     A,R7
   \   00004D   39           ADDC    A,R1
   \   00004E   F583         MOV     DPH,A
   \   000050   E5..         MOV     A,?V2
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E5..         MOV     A,?V3
   \   000056   F0           MOVX    @DPTR,A
   \   000057   0A           INC     R2
   \                     ??ZDO_CompareClusterLists_3:
   \   000058   05..         INC     ?V1
   \                     ??ZDO_CompareClusterLists_4:
   \   00005A   E5..         MOV     A,?V1
   \   00005C   C3           CLR     C
   \   00005D   95..         SUBB    A,?V4
   \   00005F   40C2         JC      ??ZDO_CompareClusterLists_1
   \   000061   0B           INC     R3
   \                     ??ZDO_CompareClusterLists_0:
   \   000062   EB           MOV     A,R3
   \   000063   C3           CLR     C
   \   000064   95..         SUBB    A,?V0
   \   000066   5005         JNC     ??ZDO_CompareClusterLists_5
   \   000068   75..00       MOV     ?V1,#0x0
   \   00006B   80ED         SJMP    ??ZDO_CompareClusterLists_4
    571            }
    572          
    573            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   00006D   EA           MOV     A,R2
   \   00006E   F9           MOV     R1,A
   \   00006F   02....       LJMP    ??Subroutine217_0 & 0xFFFF
    574          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   EC           MOV     A,R4
   \   000007   28           ADD     A,R0
   \   000008   F582         MOV     DPL,A
   \   00000A   ED           MOV     A,R5
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000003   E5..         MOV     A,?V6
   \   000005   28           ADD     A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    575          
    576          /*********************************************************************
    577           * Utility functions
    578           */
    579          
    580          /*********************************************************************
    581           * @fn          ZDO_CompareByteLists
    582           *
    583           * @brief       Compares two lists for matches.
    584           *
    585           * @param       ACnt  - number of entries in list A
    586           * @param       AList  - List A
    587           * @param       BCnt  - number of entries in list B
    588           * @param       BList  - List B
    589           *
    590           * @return      true if a match is found
    591           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    592          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    593          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8C..         MOV     ?V2,R4
    594            byte x, y;
    595          
    596            for ( x = 0; x < ACnt; x++ )
   \   000009   7F00         MOV     R7,#0x0
   \   00000B   740C         MOV     A,#0xc
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000013   E8           MOV     A,R0
   \   000014   FC           MOV     R4,A
   \   000015   E9           MOV     A,R1
   \   000016   FD           MOV     R5,A
   \   000017   8001         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000019   0F           INC     R7
   \                     ??ZDO_AnyClusterMatches_0:
   \   00001A   EF           MOV     A,R7
   \   00001B   C3           CLR     C
   \   00001C   9E           SUBB    A,R6
   \   00001D   5031         JNC     ??ZDO_AnyClusterMatches_2
    597            {
    598              for ( y = 0; y < BCnt; y++ )
   \   00001F   75..00       MOV     ?V3,#0x0
   \   000022   8002         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000024   05..         INC     ?V3
   \                     ??ZDO_AnyClusterMatches_3:
   \   000026   E5..         MOV     A,?V3
   \   000028   C3           CLR     C
   \   000029   95..         SUBB    A,?V2
   \   00002B   50EC         JNC     ??ZDO_AnyClusterMatches_1
    599              {
    600                if ( AList[x] == BList[y] )
   \   00002D   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000030   EA           MOV     A,R2
   \   000031   28           ADD     A,R0
   \   000032   F582         MOV     DPL,A
   \   000034   EB           MOV     A,R3
   \   000035   39           ADDC    A,R1
   \   000036   F583         MOV     DPH,A
   \   000038   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   00003B   F5..         MOV     ?V1,A
   \   00003D   A8..         MOV     R0,?V3
   \   00003F   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000042   65..         XRL     A,?V0
   \   000044   7004         JNZ     ??ZDO_AnyClusterMatches_5
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   65..         XRL     A,?V1
   \                     ??ZDO_AnyClusterMatches_5:
   \   00004A   70D8         JNZ     ??ZDO_AnyClusterMatches_4
    601                {
    602                  return true;
   \   00004C   7901         MOV     R1,#0x1
   \   00004E   8002         SJMP    ??ZDO_AnyClusterMatches_6
    603                }
    604              }
    605            }
    606          
    607            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   000050   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000052   80..         SJMP    ??Subroutine213_0
    608          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   EF           MOV     A,R7
   \   000001                REQUIRE ??Subroutine212_0
   \   000001                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine211:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   12....       LCALL   ?Subroutine211 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET
    609          
    610          /*********************************************************************
    611           * Callback functions from ZDProfile
    612           */
    613          
    614          /*********************************************************************
    615           * @fn          ZDO_ProcessNodeDescReq
    616           *
    617           * @brief       This function processes and responds to the
    618           *              Node_Desc_req message.
    619           *
    620           * @param       inMsg - incoming message
    621           *
    622           * @return      none
    623           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    624          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    625          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine56 & 0xFFFF
    626            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    627            NodeDescriptorFormat_t *desc = NULL;
    628          
    629            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_86:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    630            {
    631              desc = &ZDO_Config_Node_Descriptor;
    632            }
    633          
    634            if ( desc != NULL )
    635            {
    636              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessNodeDescReq_2
    637            }
    638            else
    639            {
    640              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    641                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0,#0x2
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine62 & 0xFFFF
    642            }
   \                     ??CrossCallReturnLabel_97:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    643          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000045   80..         SJMP    ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000003   7C80         MOV     R4,#-0x80
   \   000005   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_685:
   \   000007   3F           ADDC    A,R7
   \   000008   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   00000B   FC           MOV     R4,A
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   FD           MOV     R5,A
   \   00000F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6C           XRL     A,R4
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FD           MOV     R5,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   EE           MOV     A,R6
   \   000008   240F         ADD     A,#0xf
   \   00000A   F582         MOV     DPL,A
   \   00000C   E4           CLR     A
   \   00000D   3F           ADDC    A,R7
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   12....       LCALL   ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   E4           CLR     A
   \   000009   C8           XCH     A,R0
   \   00000A   F9           MOV     R1,A
   \   00000B   EA           MOV     A,R2
   \   00000C   28           ADD     A,R0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine207:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine211 & 0xFFFF
   \                     ??CrossCallReturnLabel_621:
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine197:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine271_0
   \   000001                ; // Fall through to label ??Subroutine271_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine271_0:
   \   000000   2413         ADD     A,#0x13
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET
    644          
    645          /*********************************************************************
    646           * @fn          ZDO_ProcessPowerDescReq
    647           *
    648           * @brief       This function processes and responds to the
    649           *              Node_Power_req message.
    650           *
    651           * @param       inMsg  - incoming request
    652           *
    653           * @return      none
    654           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    655          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    656          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine56 & 0xFFFF
    657            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    658            NodePowerDescriptorFormat_t *desc = NULL;
    659          
    660            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_87:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    661            {
    662              desc = &ZDO_Config_Power_Descriptor;
    663            }
    664          
    665            if ( desc != NULL )
    666            {
    667              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessPowerDescReq_2
    668            }
    669            else
    670            {
    671              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    672                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0,#0x3
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine62 & 0xFFFF
    673            }
   \                     ??CrossCallReturnLabel_98:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    674          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000045   80..         SJMP    ??Subroutine215_0
    675          
    676          /*********************************************************************
    677           * @fn          ZDO_ProcessSimpleDescReq
    678           *
    679           * @brief       This function processes and responds to the
    680           *              Simple_Desc_req message.
    681           *
    682           * @param       inMsg - incoming message (request)
    683           *
    684           * @return      none
    685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine214_0
   \   000002                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine215_0
   \   000003                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    686          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    687          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    688            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    689            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   00001B   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00001E   FB           MOV     R3,A
   \   00001F   EC           MOV     A,R4
   \   000020   FA           MOV     R2,A
    690            byte endPoint = inMsg->asdu[2];
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
    691            byte free = false;
   \   000029   75..00       MOV     ?V1,#0x0
    692            byte stat = ZDP_SUCCESS;
   \   00002C   75..00       MOV     ?V0,#0x0
    693          
    694            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002F   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000031   C3           CLR     C
   \   000032   94F1         SUBB    A,#-0xf
   \   000034   4005         JC      ??ZDO_ProcessSimpleDescReq_1
    695            {
    696              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000036   75..82       MOV     ?V0,#-0x7e
   \   000039   802A         SJMP    ??ZDO_ProcessSimpleDescReq_2
    697            }
    698            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6A           XRL     A,R2
   \   000040   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000045   701B         JNZ     ??ZDO_ProcessSimpleDescReq_4
    699            {
    700              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000047                ; Setup parameters for call to function afFindSimpleDesc
   \   000047   AA..         MOV     R2,?XSP + 0
   \   000049   AB..         MOV     R3,?XSP + 1
   \   00004B   12....       LCALL   `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   00004E   E9           MOV     A,R1
   \   00004F   FA           MOV     R2,A
    701              if ( sDesc == NULL )
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000059   7003         JNZ     ??ZDO_ProcessSimpleDescReq_5
    702              {
    703                stat = ZDP_NOT_ACTIVE;
   \   00005B   75..83       MOV     ?V0,#-0x7d
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   00005E   8A..         MOV     ?V1,R2
   \   000060   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    704              }
    705            }
    706            else
    707            {
    708              if ( ZSTACK_ROUTER_BUILD )
    709              {
    710                stat = ZDP_DEVICE_NOT_FOUND;
    711              }
    712              else if ( ZSTACK_END_DEVICE_BUILD )
    713              {
    714                stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   000062   75..80       MOV     ?V0,#-0x80
    715              }
    716            }
    717          
    718            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000065                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   12....       LCALL   ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   00006E   A9..         MOV     R1,?V0
   \   000070   EE           MOV     A,R6
   \   000071   FA           MOV     R2,A
   \   000072   EF           MOV     A,R7
   \   000073   FB           MOV     R3,A
   \   000074   12....       LCALL   `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
    719          
    720            if ( free && sDesc )
   \   000077   E5..         MOV     A,?V1
   \   000079   6017         JZ      ??ZDO_ProcessSimpleDescReq_6
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000084   600C         JZ      ??ZDO_ProcessSimpleDescReq_6
    721            {
    722              osal_mem_free( sDesc );
   \   000086                ; Setup parameters for call to function osal_mem_free
   \   000086   85..82       MOV     DPL,?XSP + 0
   \   000089   85..83       MOV     DPH,?XSP + 1
   \   00008C   12....       LCALL   ??Subroutine245_0 & 0xFFFF
    723            }
   \                     ??CrossCallReturnLabel_461:
   \   00008F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    724          }
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   000092   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_686:
   \   000003   3F           ADDC    A,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL   ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   12....       LCALL   ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000003   22           RET
    725          
    726          /*********************************************************************
    727           * @fn          ZDO_ProcessActiveEPReq
    728           *
    729           * @brief       This function processes and responds to the
    730           *              Active_EP_req message.
    731           *
    732           * @param       inMsg  - incoming message (request)
    733           *
    734           * @return      none
    735           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    736          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    737          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
    738            byte cnt = 0;
   \   000009   75..00       MOV     ?V0,#0x0
    739            uint16 aoi;
    740            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V1,#0x0
    741          
    742            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000012   35..         ADDC    A,?V5
   \   000014   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000017   FE           MOV     R6,A
   \   000018   E4           CLR     A
   \   000019   39           ADDC    A,R1
   \   00001A   FF           MOV     R7,A
    743          
    744            if ( aoi == NLME_GetShortAddr() )
   \   00001B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001E   EA           MOV     A,R2
   \   00001F   6E           XRL     A,R6
   \   000020   7002         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000022   EB           MOV     A,R3
   \   000023   6F           XRL     A,R7
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000024   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    745            {
    746              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000026                ; Setup parameters for call to function afNumEndPoints
   \   000026   12....       LCALL   `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   000029   E9           MOV     A,R1
   \   00002A   14           DEC     A
   \   00002B   F5..         MOV     ?V0,A
    747              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002D                ; Setup parameters for call to function afEndPoints
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000031   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000033   12....       LCALL   `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   000036   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    748            }
    749            else
    750            {
    751              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000038   75..80       MOV     ?V1,#-0x80
    752            }
    753          
    754            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    755                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00003B                ; Setup parameters for call to function ZDP_EPRsp
   \   00003B   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   00003E   35..         ADDC    A,?V5
   \   000040   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000046   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   000049   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   00004C   78..         MOV     R0,#?V2
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   8E..         MOV     ?V2,R6
   \   000058   8F..         MOV     ?V3,R7
   \   00005A   78..         MOV     R0,#?V2
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   E5..         MOV     A,?V1
   \   000061   F5..         MOV     ?V0,A
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000068   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00006B   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   00006E   F9           MOV     R1,A
   \   00006F   7A05         MOV     R2,#0x5
   \   000071   7B80         MOV     R3,#-0x80
   \   000073   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000076   7407         MOV     A,#0x7
   \   000078   02....       LJMP    ?Subroutine5 & 0xFFFF
    756          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F5..         MOV     ?V2,A
   \   000005   78..         MOV     R0,#?V2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   E5..         MOV     A,?V4
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V5
   \   000008   FD           MOV     R5,A
   \   000009   E5..         MOV     A,?V4
   \   00000B   240F         ADD     A,#0xf
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   EA           MOV     A,R2
   \   000001   12....       LCALL   ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_687:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine195:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V5
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   E5..         MOV     A,?V4
   \   000002                REQUIRE ??Subroutine262_0
   \   000002                ; // Fall through to label ??Subroutine262_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine262_0:
   \   000000   240E         ADD     A,#0xe
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine276_0
   \   000003                ; // Fall through to label ??Subroutine276_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine276_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    757          
    758          /*********************************************************************
    759           * @fn          ZDO_ConvertOTAClusters
    760           *
    761           * @brief       This function will convert the over-the-air cluster list
    762           *              format to an internal format.
    763           *
    764           * @param       inMsg  - incoming message (request)
    765           *
    766           * @return      pointer to incremented inBuf
    767           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    768          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    769          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    770            uint8 x;
    771          
    772            for ( x = 0; x < cnt; x++ )
   \   000007   7F00         MOV     R7,#0x0
   \   000009   8028         SJMP    ??ZDO_ConvertOTAClusters_0
    773            {
    774              // convert ota format to internal
    775              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   00000E   F8           MOV     R0,A
   \   00000F   E4           CLR     A
   \   000010   C8           XCH     A,R0
   \   000011   F9           MOV     R1,A
   \   000012   E5..         MOV     A,?V0
   \   000014   28           ADD     A,R0
   \   000015   E4           CLR     A
   \   000016   39           ADDC    A,R1
   \   000017   F5..         MOV     ?V1,A
   \   000019   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   00001C   EC           MOV     A,R4
   \   00001D   28           ADD     A,R0
   \   00001E   F582         MOV     DPL,A
   \   000020   ED           MOV     A,R5
   \   000021   39           ADDC    A,R1
   \   000022   F583         MOV     DPH,A
   \   000024   E5..         MOV     A,?V0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E5..         MOV     A,?V1
   \   00002A   F0           MOVX    @DPTR,A
    776              inBuf += sizeof( uint16 );
   \   00002B   EA           MOV     A,R2
   \   00002C   2402         ADD     A,#0x2
   \   00002E   FA           MOV     R2,A
   \   00002F   5001         JNC     ??ZDO_ConvertOTAClusters_2
   \   000031   0B           INC     R3
    777            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   000032   0F           INC     R7
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000033   EF           MOV     A,R7
   \   000034   C3           CLR     C
   \   000035   9E           SUBB    A,R6
   \   000036   40D3         JC      ??ZDO_ConvertOTAClusters_1
    778            return ( inBuf );
   \   000038   02....       LJMP    ??Subroutine215_0 & 0xFFFF
    779          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine216_0
   \   000004                ; // Fall through to label ??Subroutine216_0
    780          
    781          /*********************************************************************
    782           * @fn          ZDO_ProcessMatchDescReq
    783           *
    784           * @brief       This function processes and responds to the
    785           *              Match_Desc_req message.
    786           *
    787           * @param       inMsg  - incoming message (request)
    788           *
    789           * @return      none
    790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    791          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    792          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine21 & 0xFFFF
    793            uint8 epCnt = 0;
   \                     ??CrossCallReturnLabel_384:
   \   000012   7408         MOV     A,#0x8
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    794            uint8 numInClusters;
    795            uint16 *inClusters = NULL;
   \   000019   740B         MOV     A,#0xb
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E4           CLR     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
    796            uint8 numOutClusters;
    797            uint16 *outClusters = NULL;
   \   000022   7409         MOV     A,#0x9
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   F0           MOVX    @DPTR,A
    798            epList_t *epDesc;
    799            SimpleDescriptionFormat_t *sDesc = NULL;
    800            uint8 allocated;
    801            uint8 *msg;
    802            uint16 aoi;
    803            uint16 profileID;
    804          
    805            // Parse the incoming message
    806            msg = inMsg->asdu;
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000033   F582         MOV     DPL,A
   \   000035   E4           CLR     A
   \   000036   38           ADDC    A,R0
   \   000037   F583         MOV     DPH,A
   \   000039   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   00003C   F5..         MOV     ?V1,A
    807            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   00003E   85..82       MOV     DPL,?V0
   \   000041   F583         MOV     DPH,A
   \   000043   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   000046   F8           MOV     R0,A
   \   000047   E4           CLR     A
   \   000048   C8           XCH     A,R0
   \   000049   F9           MOV     R1,A
   \   00004A   EA           MOV     A,R2
   \   00004B   28           ADD     A,R0
   \   00004C   FE           MOV     R6,A
   \   00004D   E4           CLR     A
   \   00004E   39           ADDC    A,R1
   \   00004F   FF           MOV     R7,A
    808            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000050   85..82       MOV     DPL,?V0
   \   000053   85..83       MOV     DPH,?V1
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FA           MOV     R2,A
   \   00005A   85..82       MOV     DPL,?V0
   \   00005D   85..83       MOV     DPH,?V1
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   EA           MOV     A,R2
   \   000066   F5..         MOV     ?V4,A
   \   000068   E4           CLR     A
   \   000069   39           ADDC    A,R1
   \   00006A   F5..         MOV     ?V5,A
    809            msg += 4;
    810          
    811            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   00006C                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00006C   EE           MOV     A,R6
   \   00006D   FA           MOV     R2,A
   \   00006E   EF           MOV     A,R7
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000073   E9           MOV     A,R1
   \   000074   6401         XRL     A,#0x1
   \   000076   6016         JZ      ??ZDO_ProcessMatchDescReq_0
    812            {
    813              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    814                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    815              return;
    816            }
    817            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   000078                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000078   EE           MOV     A,R6
   \   000079   FA           MOV     R2,A
   \   00007A   EF           MOV     A,R7
   \   00007B   FB           MOV     R3,A
   \   00007C   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00007F   E9           MOV     A,R1
   \   000080   704D         JNZ     ??ZDO_ProcessMatchDescReq_1
   \   000082   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000085   E0           MOVX    A,@DPTR
   \   000086   6E           XRL     A,R6
   \   000087   7003         JNZ     ??ZDO_ProcessMatchDescReq_2
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   00008C   6041         JZ      ??ZDO_ProcessMatchDescReq_1
    818            {
    819              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    820                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   00008E                ; Setup parameters for call to function ZDP_EPRsp
   \   00008E   7402         MOV     A,#0x2
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000099   E4           CLR     A
   \   00009A   F5..         MOV     ?V0,A
   \   00009C   F5..         MOV     ?V1,A
   \   00009E   78..         MOV     R0,#?V0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   78..         MOV     R0,#?V0
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A8   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000AB   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000AE   75..80       MOV     ?V0,#-0x80
   \   0000B1   78..         MOV     R0,#?V0
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B6   7409         MOV     A,#0x9
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000C4   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000C7   7407         MOV     A,#0x7
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
    821              return;
   \   0000CC   02....       LJMP    ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
    822            }
    823          
    824            if ((numInClusters = *msg++) &&
    825                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   0000CF   85..82       MOV     DPL,?V0
   \   0000D2   85..83       MOV     DPH,?V1
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0000DC   E5..         MOV     A,?V0
   \   0000DE   2405         ADD     A,#0x5
   \   0000E0   F5..         MOV     ?V0,A
   \   0000E2   5002         JNC     ??ZDO_ProcessMatchDescReq_4
   \   0000E4   05..         INC     ?V1
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   6031         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0000E9                ; Setup parameters for call to function osal_mem_alloc
   \   0000E9   12....       LCALL   ??Subroutine274_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_707:
   \   0000EC   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000EF   740B         MOV     A,#0xb
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   0000F7   740B         MOV     A,#0xb
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   0000FF   6019         JZ      ??ZDO_ProcessMatchDescReq_5
    826            {
    827              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   000101                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000101   740B         MOV     A,#0xb
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   12....       LCALL   ?Subroutine107 & 0xFFFF
    828            }
   \                     ??CrossCallReturnLabel_179:
   \   000109   85..82       MOV     DPL,?XSP + 0
   \   00010C   85..83       MOV     DPH,?XSP + 1
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   F9           MOV     R1,A
   \   000111   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000114   8A..         MOV     ?V0,R2
   \   000116   8B..         MOV     ?V1,R3
   \   000118   8008         SJMP    ??ZDO_ProcessMatchDescReq_6
    829            else
    830            {
    831              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   00011A   85..82       MOV     DPL,?XSP + 0
   \   00011D   85..83       MOV     DPH,?XSP + 1
   \   000120   E4           CLR     A
   \   000121   F0           MOVX    @DPTR,A
    832            }
    833          
    834            if ((numOutClusters = *msg++) &&
    835                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   000122   85..82       MOV     DPL,?V0
   \   000125   85..83       MOV     DPH,?V1
   \   000128   E0           MOVX    A,@DPTR
   \   000129   C0E0         PUSH    A
   \   00012B   7401         MOV     A,#0x1
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   D0E0         POP     A
   \   000132   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000135   8582..       MOV     ?V0,DPL
   \   000138   8583..       MOV     ?V1,DPH
   \   00013B   7401         MOV     A,#0x1
   \   00013D   12....       LCALL   ?XSTACK_DISP0_8
   \   000140   E0           MOVX    A,@DPTR
   \   000141   602C         JZ      ??ZDO_ProcessMatchDescReq_7
   \   000143                ; Setup parameters for call to function osal_mem_alloc
   \   000143   12....       LCALL   ??Subroutine274_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_708:
   \   000146   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000149   7409         MOV     A,#0x9
   \   00014B   12....       LCALL   ?XSTACK_DISP0_8
   \   00014E   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000151   7409         MOV     A,#0x9
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   000159   6014         JZ      ??ZDO_ProcessMatchDescReq_7
    836            {
    837              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   00015B                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00015B   7409         MOV     A,#0x9
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   12....       LCALL   ?Subroutine107 & 0xFFFF
    838            }
   \                     ??CrossCallReturnLabel_180:
   \   000163   7401         MOV     A,#0x1
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   E0           MOVX    A,@DPTR
   \   000169   F9           MOV     R1,A
   \   00016A   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   00016D   8007         SJMP    ??ZDO_ProcessMatchDescReq_8
    839            else
    840            {
    841              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   00016F   7401         MOV     A,#0x1
   \   000171   12....       LCALL   ?XSTACK_DISP0_8
   \   000174   E4           CLR     A
   \   000175   F0           MOVX    @DPTR,A
    842            }
    843          
    844            // First count the number of endpoints that match.
    845            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000176   90....       MOV     DPTR,#epList
   \   000179   8064         SJMP    ??CrossCallReturnLabel_137
    846            while ( epDesc )
    847            {
    848              // Don't search endpoint 0 and check if response is allowed
    849              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    850              {
    851                if ( epDesc->pfnDescCB )
    852                {
    853                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    854                  allocated = TRUE;
    855                }
    856                else
    857                {
    858                  sDesc = epDesc->epDesc->simpleDesc;
    859                  allocated = FALSE;
    860                }
    861          
    862                if ( sDesc && sDesc->AppProfId == profileID )
    863                {
    864                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    865          
    866                  // Are there matching input clusters?
    867                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    868                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    869                      // Are there matching output clusters?
    870                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    871                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    872                  {
    873                    // Notify the endpoint of the match.
    874                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    875                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    876          
    877                    if (pRspSent)
    878                    {
    879                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    880                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    881                      pRspSent->numInClusters = numInClusters;
    882                      pRspSent->numOutClusters = numOutClusters;
    883          
    884                      if (numInClusters)
    885                      {
    886                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    887                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    888                      }
    889                      else
    890                      {
    891                        pRspSent->pInClusters = NULL;
    892                      }
    893          
    894                      if (numOutClusters)
    895                      {
    896                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    897                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    898                      }
    899                      else
    900                      {
    901                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   00017B   85..82       MOV     DPL,?V6
   \   00017E   85..83       MOV     DPH,?V7
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   E4           CLR     A
   \   00018A   F0           MOVX    @DPTR,A
   \   00018B   A3           INC     DPTR
   \   00018C   F0           MOVX    @DPTR,A
    902                      }
    903          
    904                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   00018D                ; Setup parameters for call to function osal_msg_send
   \   00018D   AA..         MOV     R2,?V6
   \   00018F   AB..         MOV     R3,?V7
   \   000191   7404         MOV     A,#0x4
   \   000193   12....       LCALL   ?XSTACK_DISP0_8
   \   000196   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000199   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   00019C   F9           MOV     R1,A
   \   00019D   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    905                    }
    906          
    907                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   0001A0   7406         MOV     A,#0x6
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   0001A8   C0E0         PUSH    A
   \   0001AA   7408         MOV     A,#0x8
   \   0001AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   F8           MOV     R0,A
   \   0001B1   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   0001B3   28           ADD     A,R0
   \   0001B4   F582         MOV     DPL,A
   \   0001B6   E4           CLR     A
   \   0001B7   34..         ADDC    A,#(ZDOBuildBuf >> 8) & 0xff
   \   0001B9   F583         MOV     DPH,A
   \   0001BB   D0E0         POP     A
   \   0001BD   F0           MOVX    @DPTR,A
   \   0001BE   7408         MOV     A,#0x8
   \   0001C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   04           INC     A
   \   0001C5   F0           MOVX    @DPTR,A
    908                  }
    909                }
    910          
    911                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   0001C6   E5..         MOV     A,?V3
   \   0001C8   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001CA   500B         JNC     ??ZDO_ProcessMatchDescReq_13
    912                {
    913                  osal_mem_free( sDesc );
   \   0001CC                ; Setup parameters for call to function osal_mem_free
   \   0001CC   7406         MOV     A,#0x6
   \   0001CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D1   12....       LCALL   ??Subroutine245_0 & 0xFFFF
    914                }
   \                     ??CrossCallReturnLabel_462:
   \   0001D4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    915              }
    916              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   0001D7   7404         MOV     A,#0x4
   \   0001D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DC   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0001DF   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   0001E2   7404         MOV     A,#0x4
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   0001EA   7404         MOV     A,#0x4
   \   0001EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EF   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   0001F2   7003         JNZ     $+5
   \   0001F4   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   0001F7   7404         MOV     A,#0x4
   \   0001F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FC   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   0001FF   60D6         JZ      ??ZDO_ProcessMatchDescReq_13
   \   000201   7404         MOV     A,#0x4
   \   000203   12....       LCALL   ?XSTACK_DISP0_8
   \   000206   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   000209   2408         ADD     A,#0x8
   \   00020B   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   00020E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000210   50C5         JNC     ??ZDO_ProcessMatchDescReq_13
   \   000212   7404         MOV     A,#0x4
   \   000214   12....       LCALL   ?XSTACK_DISP0_8
   \   000217   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00021A   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   00021D   6028         JZ      ??ZDO_ProcessMatchDescReq_15
   \   00021F                ; Setup parameters for indirect call
   \   00021F   7404         MOV     A,#0x4
   \   000221   12....       LCALL   ?XSTACK_DISP0_8
   \   000224   E0           MOVX    A,@DPTR
   \   000225   F8           MOV     R0,A
   \   000226   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000229   FA           MOV     R2,A
   \   00022A   7901         MOV     R1,#0x1
   \   00022C   7404         MOV     A,#0x4
   \   00022E   12....       LCALL   ?XSTACK_DISP0_8
   \   000231   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000234   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000237   12....       LCALL   ?CALL_IND
   \   00023A   7406         MOV     A,#0x6
   \   00023C   12....       LCALL   ?XSTACK_DISP0_8
   \   00023F   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000242   75..01       MOV     ?V3,#0x1
   \   000245   8016         SJMP    ??ZDO_ProcessMatchDescReq_16
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   000247   7404         MOV     A,#0x4
   \   000249   12....       LCALL   ?XSTACK_DISP0_8
   \   00024C   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00024F   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   000252   7406         MOV     A,#0x6
   \   000254   12....       LCALL   ?XSTACK_DISP0_8
   \   000257   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   00025A   75..00       MOV     ?V3,#0x0
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   00025D   7406         MOV     A,#0x6
   \   00025F   12....       LCALL   ?XSTACK_DISP0_8
   \   000262   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   000265   7003         JNZ     $+5
   \   000267   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   00026A   7406         MOV     A,#0x6
   \   00026C   12....       LCALL   ?XSTACK_DISP0_8
   \   00026F   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000272   A3           INC     DPTR
   \   000273   E0           MOVX    A,@DPTR
   \   000274   65..         XRL     A,?V4
   \   000276   7004         JNZ     ??ZDO_ProcessMatchDescReq_17
   \   000278   A3           INC     DPTR
   \   000279   E0           MOVX    A,@DPTR
   \   00027A   65..         XRL     A,?V5
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   00027C   6003         JZ      $+5
   \   00027E   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   000281                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000281   7406         MOV     A,#0x6
   \   000283   12....       LCALL   ?XSTACK_DISP0_8
   \   000286   A3           INC     DPTR
   \   000287   E0           MOVX    A,@DPTR
   \   000288   C8           XCH     A,R0
   \   000289   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   00028C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00028F   7408         MOV     A,#0x8
   \   000291   12....       LCALL   ?XSTACK_DISP0_8
   \   000294   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   000297   2406         ADD     A,#0x6
   \   000299   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00029C   FC           MOV     R4,A
   \   00029D   740D         MOV     A,#0xd
   \   00029F   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A2   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   0002A5   7402         MOV     A,#0x2
   \   0002A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AA   E0           MOVX    A,@DPTR
   \   0002AB   F9           MOV     R1,A
   \   0002AC   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   0002AF   7402         MOV     A,#0x2
   \   0002B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002B4   E9           MOV     A,R1
   \   0002B5   703A         JNZ     ??ZDO_ProcessMatchDescReq_18
   \   0002B7                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0002B7   7406         MOV     A,#0x6
   \   0002B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BC   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   0002BF   240A         ADD     A,#0xa
   \   0002C1   F582         MOV     DPL,A
   \   0002C3   E4           CLR     A
   \   0002C4   38           ADDC    A,R0
   \   0002C5   F583         MOV     DPH,A
   \   0002C7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0002CA   7408         MOV     A,#0x8
   \   0002CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CF   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0002D2   E0           MOVX    A,@DPTR
   \   0002D3   FC           MOV     R4,A
   \   0002D4   740B         MOV     A,#0xb
   \   0002D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D9   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   0002DC   7403         MOV     A,#0x3
   \   0002DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E1   E0           MOVX    A,@DPTR
   \   0002E2   F9           MOV     R1,A
   \   0002E3   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   0002E6   7402         MOV     A,#0x2
   \   0002E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002EB   E9           MOV     A,R1
   \   0002EC   7003         JNZ     $+5
   \   0002EE   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   0002F1                ; Setup parameters for call to function osal_msg_allocate
   \   0002F1   85..82       MOV     DPL,?XSP + 0
   \   0002F4   85..83       MOV     DPH,?XSP + 1
   \   0002F7   E0           MOVX    A,@DPTR
   \   0002F8   F8           MOV     R0,A
   \   0002F9   7401         MOV     A,#0x1
   \   0002FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FE   E0           MOVX    A,@DPTR
   \   0002FF   28           ADD     A,R0
   \   000300   C3           CLR     C
   \   000301   33           RLC     A
   \   000302   240A         ADD     A,#0xa
   \   000304   FA           MOV     R2,A
   \   000305   7B00         MOV     R3,#0x0
   \   000307   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00030A   8A..         MOV     ?V6,R2
   \   00030C   8B..         MOV     ?V7,R3
   \   00030E   EA           MOV     A,R2
   \   00030F   45..         ORL     A,?V7
   \   000311   7003         JNZ     $+5
   \   000313   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   \   000316   8A82         MOV     DPL,R2
   \   000318   8B83         MOV     DPH,R3
   \   00031A   74D2         MOV     A,#-0x2e
   \   00031C   F0           MOVX    @DPTR,A
   \   00031D   7402         MOV     A,#0x2
   \   00031F   12....       LCALL   ?XSTACK_DISP0_8
   \   000322   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000325   8A82         MOV     DPL,R2
   \   000327   8B83         MOV     DPH,R3
   \   000329   A3           INC     DPTR
   \   00032A   A3           INC     DPTR
   \   00032B   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00032E   8A82         MOV     DPL,R2
   \   000330   8B83         MOV     DPH,R3
   \   000332   A3           INC     DPTR
   \   000333   A3           INC     DPTR
   \   000334   A3           INC     DPTR
   \   000335   A3           INC     DPTR
   \   000336   F0           MOVX    @DPTR,A
   \   000337   7401         MOV     A,#0x1
   \   000339   12....       LCALL   ?XSTACK_DISP0_8
   \   00033C   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00033F   A3           INC     DPTR
   \   000340   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000343   603B         JZ      ??ZDO_ProcessMatchDescReq_19
   \   000345   EA           MOV     A,R2
   \   000346   240A         ADD     A,#0xa
   \   000348   F8           MOV     R0,A
   \   000349   E4           CLR     A
   \   00034A   35..         ADDC    A,?V7
   \   00034C   F9           MOV     R1,A
   \   00034D   8A82         MOV     DPL,R2
   \   00034F   8B83         MOV     DPH,R3
   \   000351   A3           INC     DPTR
   \   000352   A3           INC     DPTR
   \   000353   A3           INC     DPTR
   \   000354   A3           INC     DPTR
   \   000355   A3           INC     DPTR
   \   000356   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000359   12....       LCALL   ?XSTACK_DISP0_8
   \   00035C   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00035F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000362   7403         MOV     A,#0x3
   \   000364   12....       LCALL   ?XSTACK_DISP0_8
   \   000367   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   00036A   8A82         MOV     DPL,R2
   \   00036C   8B83         MOV     DPH,R3
   \   00036E   A3           INC     DPTR
   \   00036F   A3           INC     DPTR
   \   000370   A3           INC     DPTR
   \   000371   A3           INC     DPTR
   \   000372   A3           INC     DPTR
   \   000373   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   000376   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000379   7403         MOV     A,#0x3
   \   00037B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00037E   800D         SJMP    ??ZDO_ProcessMatchDescReq_20
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   000380   8A82         MOV     DPL,R2
   \   000382   8B83         MOV     DPH,R3
   \   000384   A3           INC     DPTR
   \   000385   A3           INC     DPTR
   \   000386   A3           INC     DPTR
   \   000387   A3           INC     DPTR
   \   000388   A3           INC     DPTR
   \   000389   E4           CLR     A
   \   00038A   F0           MOVX    @DPTR,A
   \   00038B   A3           INC     DPTR
   \   00038C   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   00038D   7401         MOV     A,#0x1
   \   00038F   12....       LCALL   ?XSTACK_DISP0_8
   \   000392   E0           MOVX    A,@DPTR
   \   000393   7003         JNZ     $+5
   \   000395   02....       LJMP    ??ZDO_ProcessMatchDescReq_9 & 0xFFFF
   \   000398   85..82       MOV     DPL,?XSP + 0
   \   00039B   85..83       MOV     DPH,?XSP + 1
   \   00039E   E0           MOVX    A,@DPTR
   \   00039F   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0003A2   F8           MOV     R0,A
   \   0003A3   E5..         MOV     A,?V7
   \   0003A5   39           ADDC    A,R1
   \   0003A6   F9           MOV     R1,A
   \   0003A7   E8           MOV     A,R0
   \   0003A8   240A         ADD     A,#0xa
   \   0003AA   5001         JNC     ??ZDO_ProcessMatchDescReq_21
   \   0003AC   09           INC     R1
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   0003AD   85..82       MOV     DPL,?V6
   \   0003B0   85..83       MOV     DPH,?V7
   \   0003B3   A3           INC     DPTR
   \   0003B4   A3           INC     DPTR
   \   0003B5   A3           INC     DPTR
   \   0003B6   A3           INC     DPTR
   \   0003B7   A3           INC     DPTR
   \   0003B8   A3           INC     DPTR
   \   0003B9   A3           INC     DPTR
   \   0003BA   A3           INC     DPTR
   \   0003BB   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   0003BE                ; Setup parameters for call to function osal_memcpy
   \   0003BE   7409         MOV     A,#0x9
   \   0003C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C3   12....       LCALL   ?Subroutine64 & 0xFFFF
    917            }
   \                     ??CrossCallReturnLabel_103:
   \   0003C6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003C9   7404         MOV     A,#0x4
   \   0003CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CE   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   0003D1   85..82       MOV     DPL,?V6
   \   0003D4   85..83       MOV     DPH,?V7
   \   0003D7   A3           INC     DPTR
   \   0003D8   A3           INC     DPTR
   \   0003D9   A3           INC     DPTR
   \   0003DA   A3           INC     DPTR
   \   0003DB   A3           INC     DPTR
   \   0003DC   A3           INC     DPTR
   \   0003DD   A3           INC     DPTR
   \   0003DE   A3           INC     DPTR
   \   0003DF   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   0003E2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003E5   7403         MOV     A,#0x3
   \   0003E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003EA   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
    918          
    919            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   0003ED   7408         MOV     A,#0x8
   \   0003EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F2   E0           MOVX    A,@DPTR
   \   0003F3   602C         JZ      ??ZDO_ProcessMatchDescReq_22
    920            {
    921              // Send the message if at least one match found.
    922              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    923                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   0003F5                ; Setup parameters for call to function ZDP_EPRsp
   \   0003F5   7402         MOV     A,#0x2
   \   0003F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003FA   12....       LCALL   ?Subroutine53 & 0xFFFF
    924              {
    925          #if defined( LCD_SUPPORTED )
    926                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
    927          #endif
    928              }
    929            }
   \                     ??CrossCallReturnLabel_78:
   \   0003FD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000400   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000403   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000406   78..         MOV     R0,#?V0
   \   000408   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00040B   740B         MOV     A,#0xb
   \   00040D   12....       LCALL   ?XSTACK_DISP0_8
   \   000410   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000413   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000416   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000419   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00041C   75..00       MOV     ?V0,#0x0
   \   00041F   802E         SJMP    ??ZDO_ProcessMatchDescReq_23
    930            else
    931            {
    932              // No match found
    933              if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   000421                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000421   EE           MOV     A,R6
   \   000422   FA           MOV     R2,A
   \   000423   EF           MOV     A,R7
   \   000424   FB           MOV     R3,A
   \   000425   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000428   E9           MOV     A,R1
   \   000429   703F         JNZ     ??ZDO_ProcessMatchDescReq_24
    934              {
    935                // send response message with match length = 0
    936                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    937                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   00042B                ; Setup parameters for call to function ZDP_EPRsp
   \   00042B   7402         MOV     A,#0x2
   \   00042D   12....       LCALL   ?XSTACK_DISP0_8
   \   000430   12....       LCALL   ?Subroutine53 & 0xFFFF
    938          #if defined( LCD_SUPPORTED )
    939                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
    940          #endif
    941              }
    942              else
    943              {
    944                // no response mesage for broadcast message
    945          #if defined( LCD_SUPPORTED )
    946                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
    947          #endif
    948              }
    949            }
   \                     ??CrossCallReturnLabel_79:
   \   000433   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000436   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000439   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00043C   78..         MOV     R0,#?V0
   \   00043E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000441   75..00       MOV     ?V0,#0x0
   \   000444   78..         MOV     R0,#?V0
   \   000446   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000449   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00044C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   00044F   78..         MOV     R0,#?V0
   \   000451   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000454   7409         MOV     A,#0x9
   \   000456   12....       LCALL   ?XSTACK_DISP0_8
   \   000459   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00045C   12....       LCALL   ?XSTACK_DISP0_8
   \   00045F   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000462   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000465   7407         MOV     A,#0x7
   \   000467   12....       LCALL   ?DEALLOC_XSTACK8
    950          
    951            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   00046A   740B         MOV     A,#0xb
   \   00046C   12....       LCALL   ?XSTACK_DISP0_8
   \   00046F   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   000472   600B         JZ      ??ZDO_ProcessMatchDescReq_25
    952            {
    953              osal_mem_free( inClusters );
   \   000474                ; Setup parameters for call to function osal_mem_free
   \   000474   740B         MOV     A,#0xb
   \   000476   12....       LCALL   ?XSTACK_DISP0_8
   \   000479   12....       LCALL   ??Subroutine245_0 & 0xFFFF
    954            }
   \                     ??CrossCallReturnLabel_467:
   \   00047C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    955          
    956            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   00047F   7409         MOV     A,#0x9
   \   000481   12....       LCALL   ?XSTACK_DISP0_8
   \   000484   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   000487   600B         JZ      ??ZDO_ProcessMatchDescReq_3
    957            {
    958              osal_mem_free( outClusters );
   \   000489                ; Setup parameters for call to function osal_mem_free
   \   000489   7409         MOV     A,#0x9
   \   00048B   12....       LCALL   ?XSTACK_DISP0_8
   \   00048E   12....       LCALL   ??Subroutine245_0 & 0xFFFF
    959            }
   \                     ??CrossCallReturnLabel_468:
   \   000491   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    960          }
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   000494   740D         MOV     A,#0xd
   \   000496   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   12....       LCALL   ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000003   AA..         MOV     R2,?V0
   \   000005   AB..         MOV     R3,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FD           MOV     R5,A
   \   000009   7409         MOV     A,#0x9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   7A06         MOV     R2,#0x6
   \   000005   7B80         MOV     R3,#-0x80
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   000003   240E         ADD     A,#0xe
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0,A
   \   00000E   78..         MOV     R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   000003   2413         ADD     A,#0x13
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine217_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000003                REQUIRE ??Subroutine226_0
   \   000003                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   12....       LCALL   ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   000003   240F         ADD     A,#0xf
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine236_0
   \   000001                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine237_0
   \   000002                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine239_0
   \   000001                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   12....       LCALL   ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_701:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_703:
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000003                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000003   740B         MOV     A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ??Subroutine277_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_720:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25E0         ADD     A,0xE0 /* A   */
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   FD           MOV     R5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine255_0:
   \   000000   12....       LCALL   ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_619:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine206:
   \   000000   12....       LCALL   ?Subroutine211 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   000003   C8           XCH     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   12....       LCALL   ?Subroutine208 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine211 & 0xFFFF
   \                     ??CrossCallReturnLabel_620:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine256_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine261_0:
   \   000000   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine273_0
   \   000001                ; // Fall through to label ??Subroutine273_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine273_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine274_0:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   2407         ADD     A,#0x7
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   12....       LCALL   ?Subroutine208 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine208:
   \   000000   12....       LCALL   ?Subroutine211 & 0xFFFF
   \                     ??CrossCallReturnLabel_622:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000003   2409         ADD     A,#0x9
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   75..00       MOV     ?V2,#0x0
   \   00000A   78..         MOV     R0,#?V0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_718:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine277_0
   \   000004                ; // Fall through to label ??Subroutine277_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine277_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
    961          
    962          /*********************************************************************
    963           * @fn      ZDO_ProcessBindUnbindReq()
    964           *
    965           * @brief   Called to process a Bind or Unbind Request message.
    966           *
    967           * @param   inMsg  - incoming message (request)
    968           * @param   pReq - place to put parsed information
    969           *
    970           * @return  none
    971           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine213_0
   \   000003                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    972          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    973          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    974            zAddrType_t SourceAddr;       // Binding Source addres
    975            byte bindStat;
    976          
    977            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    978            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP101_8
   \   00001D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    979          
    980            // If the local device is not the primary binding cache
    981            // check the src address of the bind request.
    982            // If it is not the local device's extended address
    983            // discard the request.
    984            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    985                  (pReq->dstAddress.addrMode != Addr64Bit &&
    986                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000023   8A..         MOV     ?V2,R2
   \   000025   8B..         MOV     ?V3,R3
   \   000027   AC..         MOV     R4,?V2
   \   000029   AD..         MOV     R5,?V3
   \   00002B                ; Setup parameters for call to function sAddrExtCmp
   \   00002B   7403         MOV     A,#0x3
   \   00002D   12....       LCALL   ?XSTACK_DISP101_8
   \   000030   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000033   E9           MOV     A,R1
   \   000034   600A         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   000036   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000039   6010         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6401         XRL     A,#0x1
   \   00003E   600B         JZ      ??ZDO_ProcessBindUnbindReq_1
    987            {
    988              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   7484         MOV     A,#-0x7c
   \   000048   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    989            }
    990            else
    991            {
    992              // Check source & destination endpoints
    993              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    994                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    995                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6016         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00005A   C3           CLR     C
   \   00005B   94F1         SUBB    A,#-0xf
   \   00005D   5011         JNC     ??ZDO_ProcessBindUnbindReq_3
   \   00005F   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000062   7016         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000064   EE           MOV     A,R6
   \   000065   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000068   E0           MOVX    A,@DPTR
   \   000069   6005         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00006B   C3           CLR     C
   \   00006C   94F1         SUBB    A,#-0xf
   \   00006E   400A         JC      ??ZDO_ProcessBindUnbindReq_4
    996              {
    997                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   7482         MOV     A,#-0x7e
   \   000078   807F         SJMP    ??ZDO_ProcessBindUnbindReq_2
    998              }
    999              else
   1000              {
   1001                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   00007A   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   00007D   6421         XRL     A,#0x21
   \   00007F   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   000083   7051         JNZ     ??ZDO_ProcessBindUnbindReq_6
   1002                {
   1003                  // Assume the table is full
   1004                  bindStat = ZDP_TABLE_FULL;
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   748C         MOV     A,#-0x74
   \   00008D   F0           MOVX    @DPTR,A
   1005          
   1006          #if defined( APP_TP ) || defined( APP_TP2 )
   1007                  // For ZigBee Conformance Testing
   1008                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1009          #endif
   1010                  {
   1011                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1012                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \   00008E                ; Setup parameters for call to function APSME_BindRequest
   \   00008E   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000094   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000097   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   00009A   7401         MOV     A,#0x1
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009F   E9           MOV     A,R1
   \   0000A0   7058         JNZ     ??ZDO_ProcessBindUnbindReq_7
   1013                    {
   1014                      uint16 nwkAddr;
   1015          
   1016                      // valid entry
   1017                      bindStat = ZDP_SUCCESS;
   \   0000A2   85..82       MOV     DPL,?XSP + 0
   \   0000A5   85..83       MOV     DPH,?XSP + 1
   \   0000A8   E4           CLR     A
   \   0000A9   F0           MOVX    @DPTR,A
   1018          
   1019                      // Notify to save info into NV
   1020                      ZDApp_NVUpdate();
   \   0000AA                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000AA   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1021          
   1022                      // Check for the destination address
   1023                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   0000AD   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   0000B0   7048         JNZ     ??ZDO_ProcessBindUnbindReq_7
   1024                      {
   1025                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   0000B2                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   0000B2   7401         MOV     A,#0x1
   \   0000B4   12....       LCALL   ?XSTACK_DISP102_8
   \   0000B7   EE           MOV     A,R6
   \   0000B8   240B         ADD     A,#0xb
   \   0000BA   FA           MOV     R2,A
   \   0000BB   E4           CLR     A
   \   0000BC   3F           ADDC    A,R7
   \   0000BD   FB           MOV     R3,A
   \   0000BE   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   0000C1   E9           MOV     A,R1
   \   0000C2   7036         JNZ     ??ZDO_ProcessBindUnbindReq_7
   1026                        {
   1027                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   0000C4                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   0000C4   7D00         MOV     R5,#0x0
   \   0000C6   7C00         MOV     R4,#0x0
   \   0000C8   7900         MOV     R1,#0x0
   \   0000CA   EE           MOV     A,R6
   \   0000CB   240B         ADD     A,#0xb
   \   0000CD   FA           MOV     R2,A
   \   0000CE   E4           CLR     A
   \   0000CF   3F           ADDC    A,R7
   \   0000D0   FB           MOV     R3,A
   \   0000D1   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   0000D4   8024         SJMP    ??ZDO_ProcessBindUnbindReq_7
   1028                        }
   1029                      }
   1030                    }
   1031                  }
   1032                }
   1033                else // Unbind_req
   1034                {
   1035                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1036                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   0000D6                ; Setup parameters for call to function APSME_UnBindRequest
   \   0000D6   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   0000D9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DC   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0000DF   12....       LCALL   `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   0000E2   7401         MOV     A,#0x1
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   E9           MOV     A,R1
   \   0000E8   85..82       MOV     DPL,?XSP + 0
   \   0000EB   85..83       MOV     DPH,?XSP + 1
   \   0000EE   7007         JNZ     ??ZDO_ProcessBindUnbindReq_8
   1037                  {
   1038                    bindStat = ZDP_SUCCESS;
   \   0000F0   E4           CLR     A
   \   0000F1   F0           MOVX    @DPTR,A
   1039          
   1040                    // Notify to save info into NV
   1041                    ZDApp_NVUpdate();
   \   0000F2                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000F2   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   0000F5   8003         SJMP    ??ZDO_ProcessBindUnbindReq_7
   1042                  }
   1043                  else
   1044                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   0000F7   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   0000F9   F0           MOVX    @DPTR,A
   1045                }
   1046              }
   1047            }
   1048          
   1049            // Send back a response message
   1050            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1051                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1052                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   0000FA                ; Setup parameters for call to function ZDP_SendData
   \   0000FA   E5..         MOV     A,?V0
   \   0000FC   12....       LCALL   ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   0000FF   35..         ADDC    A,?V1
   \   000101   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000107   7401         MOV     A,#0x1
   \   000109   12....       LCALL   ?XSTACK_DISP100_8
   \   00010C   88..         MOV     ?V2,R0
   \   00010E   89..         MOV     ?V3,R1
   \   000110   78..         MOV     R0,#?V2
   \   000112   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000115   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000118   F5..         MOV     ?V2,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   4480         ORL     A,#0x80
   \   00011E   F5..         MOV     ?V3,A
   \   000120   78..         MOV     R0,#?V2
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000128   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00012B   7405         MOV     A,#0x5
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   1053          }
   \   000130   740C         MOV     A,#0xc
   \   000132   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_650:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   6403         XRL     A,#0x3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007                REQUIRE ??Subroutine218_0
   \   000007                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FD           MOV     R5,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   2414         ADD     A,#0x14
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   7901         MOV     R1,#0x1
   \   000002   E5..         MOV     A,?V0
   \   000004   2402         ADD     A,#0x2
   \   000006   FC           MOV     R4,A
   \   000007   E4           CLR     A
   \   000008   35..         ADDC    A,?V1
   \   00000A   FD           MOV     R5,A
   \   00000B   E5..         MOV     A,?V0
   \   00000D   240F         ADD     A,#0xf
   \   00000F   FA           MOV     R2,A
   \   000010   E4           CLR     A
   \   000011   35..         ADDC    A,?V1
   \   000013   FB           MOV     R3,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine196:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine199:
   \   000000   E5..         MOV     A,?V0
   \   000002   240C         ADD     A,#0xc
   \   000004                REQUIRE ??Subroutine265_0
   \   000004                ; // Fall through to label ??Subroutine265_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine265_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine266_0
   \   000003                ; // Fall through to label ??Subroutine266_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine266_0:
   \   000000   35..         ADDC    A,?V1
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
   1054          
   1055          /*********************************************************************
   1056           * @fn      ZDO_UpdateAddrManager
   1057           *
   1058           * @brief   Update the Address Manager.
   1059           *
   1060           * @param   nwkAddr - network address
   1061           * @param   extAddr - extended address
   1062           *
   1063           * @return  none
   1064           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1065          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1066          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1067            AddrMgrEntry_t addrEntry;
   1068          
   1069            // Update the address manager
   1070            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1071            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC     A
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine21 & 0xFFFF
   1072            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_388:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1073            AddrMgrEntryUpdate( &addrEntry );
   \   000024                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000024   AA..         MOV     R2,?XSP + 0
   \   000026   AB..         MOV     R3,?XSP + 1
   \   000028   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1074          }
   \   00002B   740D         MOV     A,#0xd
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   02....       LJMP    ?Subroutine0 & 0xFFFF
   1075          
   1076          /*********************************************************************
   1077           * @fn      ZDO_ProcessServerDiscReq
   1078           *
   1079           * @brief   Process the Server_Discovery_req message.
   1080           *
   1081           * @param   inMsg  - incoming message (request)
   1082           *
   1083           * @return  none
   1084           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1085          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1086          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine124 & 0xFFFF
   1087            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1088            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_360:
   \   000008   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00000B   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   00000E   F9           MOV     R1,A
   \   00000F   EA           MOV     A,R2
   \   000010   F8           MOV     R0,A
   \   000011   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   58           ANL     A,R0
   \   000016   F5..         MOV     ?V0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   59           ANL     A,R1
   \   00001B   F5..         MOV     ?V1,A
   1089          
   1090            if ( matchMask )
   \   00001D   E5..         MOV     A,?V0
   \   00001F   45..         ORL     A,?V1
   \   000021   601B         JZ      ??ZDO_ProcessServerDiscReq_0
   1091            {
   1092              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1093                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000023                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002E   12....       LCALL   ?Subroutine135 & 0xFFFF
   1094            }
   \                     ??CrossCallReturnLabel_216:
   \   000031   7C00         MOV     R4,#0x0
   \   000033   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000036   12....       LCALL   `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   1095          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00003E   02....       LJMP    ??Subroutine215_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                REQUIRE ??Subroutine219_0
   \   000004                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL   ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000003   22           RET
   1096          
   1097          /*********************************************************************
   1098           * Call Back Functions from APS  - API
   1099           */
   1100          
   1101          /*********************************************************************
   1102           * @fn          ZDO_EndDeviceTimeoutCB
   1103           *
   1104           * @brief       This function handles the binding timer for the End
   1105           *              Device Bind command.
   1106           *
   1107           * @param       none
   1108           *
   1109           * @return      none
   1110           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1111          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1112          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1113          #if defined ( REFLECTOR )
   1114            byte stat;
   1115            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1116            {
   1117              stat = ZDO_EDBind->status;
   1118          
   1119              // Send the response message to the first sent
   1120              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1121                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C8           XCH     A,R0
   \   000017   2415         ADD     A,#0x15
   \   000019   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00001C   F8           MOV     R0,A
   \   00001D   90....       MOV     DPTR,#ZDO_EDBind
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C9           XCH     A,R1
   \   000025   2416         ADD     A,#0x16
   \   000027   F582         MOV     DPL,A
   \   000029   E4           CLR     A
   \   00002A   39           ADDC    A,R1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C0E0         PUSH    A
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   D0E0         POP     A
   \   000037   F0           MOVX    @DPTR,A
   \   000038   90....       MOV     DPTR,#ZDO_EDBind
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   2401         ADD     A,#0x1
   \   00003E   FC           MOV     R4,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   3400         ADDC    A,#0x0
   \   000043   FD           MOV     R5,A
   \   000044   90....       MOV     DPTR,#ZDO_EDBind
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F583         MOV     DPH,A
   \   00004D   8982         MOV     DPL,R1
   \   00004F   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000052                ; Setup parameters for call to function ZDP_SendData
   \   000052   E8           MOV     A,R0
   \   000053   F5..         MOV     ?V0,A
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?XSTACK_DISP100_8
   \   00005F   88..         MOV     ?V0,R0
   \   000061   89..         MOV     ?V1,R1
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..20       MOV     ?V0,#0x20
   \   00006B   75..80       MOV     ?V1,#-0x80
   \   00006E   78..         MOV     R0,#?V0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   7901         MOV     R1,#0x1
   \   000075   7405         MOV     A,#0x5
   \   000077   12....       LCALL   ?XSTACK_DISP101_8
   \   00007A   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00007D   7405         MOV     A,#0x5
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   1122          
   1123              ZDO_RemoveEndDeviceBind();
   \   000082   90....       MOV     DPTR,#ZDO_EDBind
   \   000085   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   1124            }
   \                     ??CrossCallReturnLabel_511:
   \   000088   6038         JZ      ??ZDO_EndDeviceTimeoutCB_0
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   C8           XCH     A,R0
   \   00008C   2410         ADD     A,#0x10
   \   00008E   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000091   600E         JZ      ??ZDO_EndDeviceTimeoutCB_1
   \   000093                ; Setup parameters for call to function osal_mem_free
   \   000093   90....       MOV     DPTR,#ZDO_EDBind
   \   000096   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   000099   2410         ADD     A,#0x10
   \   00009B   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   00009E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   0000A1   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   0000A4   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   0000A7   6009         JZ      ??ZDO_EndDeviceTimeoutCB_2
   \   0000A9                ; Setup parameters for call to function osal_mem_free
   \   0000A9   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   0000AC   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   0000AF   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   0000B2                ; Setup parameters for call to function osal_mem_free
   \   0000B2   90....       MOV     DPTR,#ZDO_EDBind
   \   0000B5   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   0000B8   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000BB   90....       MOV     DPTR,#ZDO_EDBind
   \   0000BE   E4           CLR     A
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   F0           MOVX    @DPTR,A
   1125          #endif  // REFLECTOR
   1126          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000C2   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   90....       MOV     DPTR,#ZDO_EDBind
   \   000003                REQUIRE ??Subroutine220_0
   \   000003                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004                REQUIRE ??Subroutine244_0
   \   000004                ; // Fall through to label ??Subroutine244_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine245_0
   \   000002                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004                REQUIRE ??Subroutine246_0
   \   000004                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine247_0
   \   000002                ; // Fall through to label ??Subroutine247_0
   1127          
   1128          /*********************************************************************
   1129           * Optional Management Messages
   1130           */
   1131          
   1132          /*********************************************************************
   1133           * @fn          ZDO_ProcessMgmtLqiReq
   1134           *
   1135           * @brief       This function handles parsing the incoming Management
   1136           *              LQI request and generate the response.
   1137           *
   1138           *   Note:      This function will limit the number of items returned
   1139           *              to ZDO_MAX_LQI_ITEMS items.
   1140           *
   1141           * @param       inMsg - incoming message (request)
   1142           *
   1143           * @return      none
   1144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1145          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1146          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV     A,#-0x2a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine21 & 0xFFFF
   1147            byte x;
   1148            byte index;
   1149            byte numItems;
   1150            byte maxItems;
   1151            ZDP_MgmtLqiItem_t* table = NULL;
   \                     ??CrossCallReturnLabel_389:
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
   1152            ZDP_MgmtLqiItem_t* item;
   1153            neighborEntry_t    entry;
   1154            byte aItems;
   1155            associated_devices_t *aDevice;
   1156            AddrMgrEntry_t  nwkEntry;
   1157            uint8 StartIndex = inMsg->asdu[0];
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000023   F5..         MOV     ?V7,A
   1158          
   1159            // Get the number of neighbor items
   1160            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000025                ; Setup parameters for call to function NLME_GetRequest
   \   000025   AC..         MOV     R4,?XSP + 0
   \   000027   AD..         MOV     R5,?XSP + 1
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   799C         MOV     R1,#-0x64
   \   00002F   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1161          
   1162            // Get the number of associated items
   1163            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   000032                ; Setup parameters for call to function AssocCount
   \   000032   7A04         MOV     R2,#0x4
   \   000034   7900         MOV     R1,#0x0
   \   000036   12....       LCALL   `??AssocCount::?relay`; Banked call to: AssocCount
   \   000039   7401         MOV     A,#0x1
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   EA           MOV     A,R2
   \   00003F   12....       LCALL   ?Subroutine33 & 0xFFFF
   1164          
   1165            // Total number of items
   1166            maxItems += aItems;
   \                     ??CrossCallReturnLabel_45:
   \   000042   2A           ADD     A,R2
   \   000043   F0           MOVX    @DPTR,A
   1167          
   1168            // Start with the supplied index
   1169            if ( maxItems > StartIndex )
   \   000044   F8           MOV     R0,A
   \   000045   E5..         MOV     A,?V7
   \   000047   C3           CLR     C
   \   000048   98           SUBB    A,R0
   \   000049   4003         JC      $+5
   \   00004B   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1170            {
   1171              numItems = maxItems - StartIndex;
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   C3           CLR     C
   \   000050   95..         SUBB    A,?V7
   \   000052   F5..         MOV     ?V1,A
   1172          
   1173              // limit the size of the list
   1174              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000054   C3           CLR     C
   \   000055   9404         SUBB    A,#0x4
   \   000057   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1175                numItems = ZDO_MAX_LQI_ITEMS;
   \   000059   75..03       MOV     ?V1,#0x3
   1176          
   1177              // Allocate the memory to build the table
   1178              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1179                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   00005C                ; Setup parameters for call to function osal_mem_alloc
   \   00005C   E5..         MOV     A,?V1
   \   00005E   75F01A       MOV     B,#0x1a
   \   000061   A4           MUL     AB
   \   000062   FA           MOV     R2,A
   \   000063   ABF0         MOV     R3,B
   \   000065   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000068   7402         MOV     A,#0x2
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ?Subroutine21 & 0xFFFF
   1180          
   1181              if ( table != NULL )
   \                     ??CrossCallReturnLabel_390:
   \   000070   7402         MOV     A,#0x2
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000078   7003         JNZ     $+5
   \   00007A   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1182              {
   1183                x = 0;
   \   00007D   75..00       MOV     ?V6,#0x0
   1184                item = table;
   \   000080   7402         MOV     A,#0x2
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   1185                index = StartIndex;
   \                     ??CrossCallReturnLabel_413:
   \   000088   85....       MOV     ?V0,?V7
   \   00008B   807E         SJMP    ??ZDO_ProcessMgmtLqiReq_3
   1186          
   1187                // Loop through associated items and build list
   1188                for ( ; x < numItems; x++ )
   1189                {
   1190                  if ( index < aItems )
   1191                  {
   1192                    // get next associated device
   1193                    aDevice = AssocFindDevice( index++ );
   1194          
   1195                    // set basic fields
   1196                    item->panID   = _NIB.nwkPanId;
   1197                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1198                    item->nwkAddr = aDevice->shortAddr;
   1199                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1200                    item->depth   = 0xFF;
   1201                    item->lqi     = aDevice->linkInfo.rxLqi;
   1202          
   1203                    // set extented address
   1204                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1205                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1206          
   1207                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1208                    {
   1209                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1210                    }
   1211                    else
   1212                    {
   1213                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00008D                ; Setup parameters for call to function osal_memset
   \   00008D   12....       LCALL   ?Subroutine143 & 0xFFFF
   1214                    }
   \                     ??CrossCallReturnLabel_374:
   \   000090   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1215          
   1216                    // use association info to set other fields
   1217                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   000093   85..82       MOV     DPL,?V4
   \   000096   85..83       MOV     DPH,?V5
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   702D         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1218                    {
   1219                      if (  aDevice->shortAddr == 0 )
   \   0000A0   85..82       MOV     DPL,?V4
   \   0000A3   85..83       MOV     DPH,?V5
   \   0000A6   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   0000A9   700C         JNZ     ??ZDO_ProcessMgmtLqiReq_7
   1220                      {
   1221                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000AB   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   0000AE   F0           MOVX    @DPTR,A
   1222                        item->depth = 0;
   \   0000AF   EE           MOV     A,R6
   \   0000B0   2418         ADD     A,#0x18
   \   0000B2   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   1223                      }
   \                     ??CrossCallReturnLabel_548:
   \   0000B5   8010         SJMP    ??ZDO_ProcessMgmtLqiReq_8
   1224                      else
   1225                      {
   1226                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000B7   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   0000BA   F0           MOVX    @DPTR,A
   1227                        item->depth = _NIB.nodeDepth - 1;
   \   0000BB   90....       MOV     DPTR,#_NIB + 52
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   14           DEC     A
   \   0000C0   C0E0         PUSH    A
   \   0000C2   12....       LCALL   ?Subroutine150 & 0xFFFF
   1228                      }
   1229          
   1230                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1231                      item->relation = ZDP_MGMT_REL_PARENT;
   1232                    }
   \                     ??CrossCallReturnLabel_255:
   \   0000C5   D0E0         POP     A
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000C7   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000CA   E4           CLR     A
   \   0000CB   8034         SJMP    ??CrossCallReturnLabel_377
   1233                    else
   1234                    {
   1235                      // If not parent, then it's a child
   1236                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000CD   90....       MOV     DPTR,#_NIB + 52
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   04           INC     A
   \   0000D2   C0E0         PUSH    A
   \   0000D4   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   0000D7   D0E0         POP     A
   \   0000D9   12....       LCALL   ?Subroutine15 & 0xFFFF
   1237          
   1238                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_12:
   \   0000DC   C3           CLR     C
   \   0000DD   9403         SUBB    A,#0x3
   \   0000DF   EE           MOV     A,R6
   \   0000E0   4003         JC      $+5
   \   0000E2   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_9 & 0xFFFF
   1239                      {
   1240                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000E5   12....       LCALL   ?Subroutine145 & 0xFFFF
   1241          
   1242                        if ( aDevice->nodeRelation == CHILD_RFD )
   1243                        {
   1244                          item->rxOnIdle = FALSE;
   1245                        }
   1246                        else
   1247                        {
   1248                          item->rxOnIdle = TRUE;
   1249                        }
   1250                      }
   \                     ??CrossCallReturnLabel_248:
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000ED   6401         XRL     A,#0x1
   \   0000EF   7003         JNZ     $+5
   \   0000F1   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1251                      else
   1252                      {
   1253                        item->devType = ZDP_MGMT_DT_ROUTER;
   1254          
   1255                        if ( aDevice->nodeRelation == CHILD_FFD )
   1256                        {
   1257                          item->rxOnIdle = FALSE;
   1258                        }
   1259                        else
   1260                        {
   1261                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0000F4   EE           MOV     A,R6
   \   0000F5   2415         ADD     A,#0x15
   \   0000F7   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   1262                        }
   \                     ??CrossCallReturnLabel_376:
   \   0000FA   F0           MOVX    @DPTR,A
   1263                      }
   1264          
   1265                      item->relation = ZDP_MGMT_REL_CHILD;
   \   0000FB   EE           MOV     A,R6
   \   0000FC   2416         ADD     A,#0x16
   \   0000FE   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000101   F0           MOVX    @DPTR,A
   1266                    }
   1267          
   1268                    item++;
   \   000102   EE           MOV     A,R6
   \   000103   241A         ADD     A,#0x1a
   \   000105   FE           MOV     R6,A
   \   000106   5001         JNC     ??ZDO_ProcessMgmtLqiReq_12
   \   000108   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000109   05..         INC     ?V6
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   00010B   E5..         MOV     A,?V6
   \   00010D   C3           CLR     C
   \   00010E   95..         SUBB    A,?V1
   \   000110   4003         JC      $+5
   \   000112   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   \   000115   7401         MOV     A,#0x1
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   F8           MOV     R0,A
   \   00011C   E5..         MOV     A,?V0
   \   00011E   C3           CLR     C
   \   00011F   98           SUBB    A,R0
   \   000120   4003         JC      $+5
   \   000122   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_14 & 0xFFFF
   \   000125                ; Setup parameters for call to function AssocFindDevice
   \   000125   A9..         MOV     R1,?V0
   \   000127   12....       LCALL   `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   00012A   8A..         MOV     ?V4,R2
   \   00012C   8B..         MOV     ?V5,R3
   \   00012E   05..         INC     ?V0
   \   000130   90....       MOV     DPTR,#_NIB + 33
   \   000133   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000136   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000139   85..82       MOV     DPL,?V4
   \   00013C   85..83       MOV     DPH,?V5
   \   00013F   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000142   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000145   F583         MOV     DPH,A
   \   000147   E8           MOV     A,R0
   \   000148   F0           MOVX    @DPTR,A
   \   000149   A3           INC     DPTR
   \   00014A   E9           MOV     A,R1
   \   00014B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00014E   85..82       MOV     DPL,?V4
   \   000151   85..83       MOV     DPH,?V5
   \   000154   A3           INC     DPTR
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   C0E0         PUSH    A
   \   000161   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000164   D0E0         POP     A
   \   000166   F0           MOVX    @DPTR,A
   \   000167   7406         MOV     A,#0x6
   \   000169   12....       LCALL   ?XSTACK_DISP0_8
   \   00016C   E4           CLR     A
   \   00016D   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000170   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   000173   7407         MOV     A,#0x7
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   00017B                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00017B   7406         MOV     A,#0x6
   \   00017D   12....       LCALL   ?XSTACK_DISP101_8
   \   000180   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000183   E9           MOV     A,R1
   \   000184   6401         XRL     A,#0x1
   \   000186   6003         JZ      $+5
   \   000188   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   00018B                ; Setup parameters for call to function sAddrExtCpy
   \   00018B   7409         MOV     A,#0x9
   \   00018D   12....       LCALL   ?XSTACK_DISP0_8
   \   000190   AC82         MOV     R4,DPL
   \   000192   AD83         MOV     R5,DPH
   \   000194   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000197   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00019A   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   00019D   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   0001A0   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001A3   6403         XRL     A,#0x3
   \   0001A5   6003         JZ      $+5
   \   0001A7   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0001AA   EE           MOV     A,R6
   \   0001AB   2415         ADD     A,#0x15
   \   0001AD   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   1269                  }
   \                     ??CrossCallReturnLabel_549:
   \   0001B0   02....       LJMP    ??CrossCallReturnLabel_376 & 0xFFFF
   1270                  else
   1271                  {
   1272                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   C3           CLR     C
   \   0001B5   95..         SUBB    A,?V7
   \   0001B7   4005         JC      ??ZDO_ProcessMgmtLqiReq_15
   1273                      // Start with 1st neighbor
   1274                      index = 0;
   \   0001B9   75..00       MOV     ?V0,#0x0
   \   0001BC   801C         SJMP    ??ZDO_ProcessMgmtLqiReq_16
   1275                    else
   1276                      // Start with >1st neighbor
   1277                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001BE   E5..         MOV     A,?V7
   \   0001C0   C3           CLR     C
   \   0001C1   98           SUBB    A,R0
   \   0001C2   F5..         MOV     ?V0,A
   \   0001C4   8014         SJMP    ??ZDO_ProcessMgmtLqiReq_16
   1278                    break;
   1279                  }
   1280                }
   1281          
   1282                // Loop through neighbor items and finish list
   1283                for ( ; x < numItems; x++ )
   1284                {
   1285                  // Add next neighbor table item
   1286                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1287          
   1288                  // set ZDP_MgmtLqiItem_t fields
   1289                  item->panID    = entry.panId;
   1290                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1291                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1292                  item->nwkAddr  = entry.neighborAddress;
   1293                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1294                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1295                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1296                  item->depth    = 0xFF;
   1297                  item->lqi      = entry.linkInfo.rxLqi;
   1298          
   1299                  if ( item->nwkAddr == 0 )
   1300                  {
   1301                    item->devType = ZDP_MGMT_DT_COORD;
   1302                  }
   1303                  else
   1304                  {
   1305                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001C6   12....       LCALL   ?Subroutine127 & 0xFFFF
   1306                  }
   \                     ??CrossCallReturnLabel_380:
   \   0001C9   F0           MOVX    @DPTR,A
   1307          
   1308                  item++;
   \   0001CA   EE           MOV     A,R6
   \   0001CB   241A         ADD     A,#0x1a
   \   0001CD   FE           MOV     R6,A
   \   0001CE   5001         JNC     ??ZDO_ProcessMgmtLqiReq_18
   \   0001D0   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0001D1   05..         INC     ?V6
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   0001D3   E5..         MOV     A,?V6
   \   0001D5   C3           CLR     C
   \   0001D6   95..         SUBB    A,?V1
   \   0001D8   505C         JNC     ??ZDO_ProcessMgmtLqiReq_2
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001DA                ; Setup parameters for call to function NLME_GetRequest
   \   0001DA   7413         MOV     A,#0x13
   \   0001DC   12....       LCALL   ?XSTACK_DISP102_8
   \   0001DF   AA..         MOV     R2,?V0
   \   0001E1   7B00         MOV     R3,#0x0
   \   0001E3   7987         MOV     R1,#-0x79
   \   0001E5   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0001E8   05..         INC     ?V0
   \   0001EA   741D         MOV     A,#0x1d
   \   0001EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EF   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0001F2   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001F5                ; Setup parameters for call to function osal_memset
   \   0001F5   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   0001F8   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0001FB   EE           MOV     A,R6
   \   0001FC   2412         ADD     A,#0x12
   \   0001FE   F8           MOV     R0,A
   \   0001FF   E4           CLR     A
   \   000200   3F           ADDC    A,R7
   \   000201   F9           MOV     R1,A
   \   000202   7413         MOV     A,#0x13
   \   000204   12....       LCALL   ?XSTACK_DISP0_8
   \   000207   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   00020A   8882         MOV     DPL,R0
   \   00020C   8983         MOV     DPH,R1
   \   00020E   EA           MOV     A,R2
   \   00020F   F0           MOVX    @DPTR,A
   \   000210   A3           INC     DPTR
   \   000211   EB           MOV     A,R3
   \   000212   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000215   7403         MOV     A,#0x3
   \   000217   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00021A   7422         MOV     A,#0x22
   \   00021C   12....       LCALL   ?XSTACK_DISP0_8
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   C0E0         PUSH    A
   \   000222   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000225   D0E0         POP     A
   \   000227   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00022A   E8           MOV     A,R0
   \   00022B   49           ORL     A,R1
   \   00022C   7098         JNZ     ??ZDO_ProcessMgmtLqiReq_17
   \   00022E   12....       LCALL   ?Subroutine130 & 0xFFFF
   1309                }
   1310              }
   1311            }
   \                     ??CrossCallReturnLabel_553:
   \   000231   8096         SJMP    ??CrossCallReturnLabel_380
   1312            else
   1313            {
   1314              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000233   75..00       MOV     ?V1,#0x0
   1315            }
   1316          
   1317            // Send response
   1318            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1319                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   000236                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   000236   75..00       MOV     ?V2,#0x0
   \   000239   78..         MOV     R0,#?V2
   \   00023B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00023E   7403         MOV     A,#0x3
   \   000240   12....       LCALL   ?XSTACK_DISP0_8
   \   000243   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000246   78..         MOV     R0,#?V1
   \   000248   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00024B   E5..         MOV     A,?V7
   \   00024D   F5..         MOV     ?V1,A
   \   00024F   78..         MOV     R0,#?V1
   \   000251   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000254   7405         MOV     A,#0x5
   \   000256   12....       LCALL   ?XSTACK_DISP0_8
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   FD           MOV     R5,A
   \   00025B   7C00         MOV     R4,#0x0
   \   00025D   7409         MOV     A,#0x9
   \   00025F   12....       LCALL   ?XSTACK_DISP0_8
   \   000262   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000265   7409         MOV     A,#0x9
   \   000267   12....       LCALL   ?XSTACK_DISP0_8
   \   00026A   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00026D   12....       LCALL   `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   000270   7405         MOV     A,#0x5
   \   000272   12....       LCALL   ?DEALLOC_XSTACK8
   1320          
   1321            if ( table )
   \   000275   7402         MOV     A,#0x2
   \   000277   12....       LCALL   ?XSTACK_DISP0_8
   \   00027A   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   00027D   600B         JZ      ??ZDO_ProcessMgmtLqiReq_19
   1322            {
   1323              osal_mem_free( table );
   \   00027F                ; Setup parameters for call to function osal_mem_free
   \   00027F   7402         MOV     A,#0x2
   \   000281   12....       LCALL   ?XSTACK_DISP0_8
   \   000284   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   1324            }
   \                     ??CrossCallReturnLabel_471:
   \   000287   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1325          }
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   00028A   742A         MOV     A,#0x2a
   \   00028C   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   EE           MOV     A,R6
   \   000001   2419         ADD     A,#0x19
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine200:
   \   000000   EE           MOV     A,R6
   \   000001   2418         ADD     A,#0x18
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine221_0
   \   000001                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   2412         ADD     A,#0x12
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   7C08         MOV     R4,#0x8
   \   000002   7D00         MOV     R5,#0x0
   \   000004   79FF         MOV     R1,#-0x1
   \   000006                REQUIRE ??Subroutine222_0
   \   000006                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   EE           MOV     A,R6
   \   000001   240A         ADD     A,#0xa
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine223_0
   \   000001                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   2414         ADD     A,#0x14
   \   000002                REQUIRE ??Subroutine224_0
   \   000002                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_702:
   \   00000A                ; Setup parameters for call to function sAddrExtCpy
   \   00000A                ; Setup parameters for call to function sAddrExtCpy
   \   00000A   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00000C   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   00000E   EE           MOV     A,R6
   \   00000F   2402         ADD     A,#0x2
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   FB           MOV     R3,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V4
   \   000004   85..83       MOV     DPH,?V5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2415         ADD     A,#0x15
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   EE           MOV     A,R6
   \   00000E   2416         ADD     A,#0x16
   \   000010   F582         MOV     DPL,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   F583         MOV     DPH,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000010   74FF         MOV     A,#-0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   000003   12....       LCALL   ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_684:
   \   000006   38           ADDC    A,R0
   \   000007   F583         MOV     DPH,A
   \   000009   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003                REQUIRE ??Subroutine252_0
   \   000003                ; // Fall through to label ??Subroutine252_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine252_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E4           CLR     A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET
   1326          
   1327          /*********************************************************************
   1328           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1329           *
   1330           * @brief       This function handles parsing the incoming Management
   1331           *              Network Discover request and starts the request.
   1332           *
   1333           * @param       inMsg - incoming message (request)
   1334           *
   1335           * @return      none
   1336           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1337          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1338          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine125 & 0xFFFF
   1339            NLME_ScanFields_t scan;
   1340            uint8             index;
   1341            uint8             *msg;
   1342          
   1343            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_417:
   \   00000D   35..         ADDC    A,?V1
   \   00000F   12....       LCALL   ?Subroutine98 & 0xFFFF
   1344            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_163:
   \   000012   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000015   EA           MOV     A,R2
   \   000016   F8           MOV     R0,A
   \   000017   EB           MOV     A,R3
   \   000018   F9           MOV     R1,A
   \   000019   EC           MOV     A,R4
   \   00001A   FA           MOV     R2,A
   \   00001B   ED           MOV     A,R5
   \   00001C   FB           MOV     R3,A
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   12....       LCALL   ?XSTORE_R0123
   1345            msg += 4;
   1346            scan.duration = *msg++;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C0E0         PUSH    A
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   D0E0         POP     A
   \   000038   12....       LCALL   ?Subroutine17 & 0xFFFF
   1347            index         = *msg;
   \                     ??CrossCallReturnLabel_15:
   \   00003B   F8           MOV     R0,A
   1348            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   00003C   7405         MOV     A,#0x5
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   7401         MOV     A,#0x1
   \   000043   F0           MOVX    @DPTR,A
   1349            scan.scanApp  = NLME_DISC_SCAN;
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7401         MOV     A,#0x1
   \   00004B   F0           MOVX    @DPTR,A
   1350          
   1351            // Save off the information to be used for the response
   1352            zdappMgmtNwkDiscReqInProgress          = true;
   \   00004C   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   00004F   F0           MOVX    @DPTR,A
   1353            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000050   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000053   04           INC     A
   \   000054   12....       LCALL   ?Subroutine49 & 0xFFFF
   1354            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_71:
   \   000057   A3           INC     DPTR
   \   000058   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   00005B   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00005E   12....       LCALL   ?Subroutine21 & 0xFFFF
   1355            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_391:
   \   000061   E8           MOV     A,R0
   \   000062   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000065   F0           MOVX    @DPTR,A
   1356            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000066   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   00006D   F0           MOVX    @DPTR,A
   1357          
   1358            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   00006E                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   00006E   AA..         MOV     R2,?XSP + 0
   \   000070   AB..         MOV     R3,?XSP + 1
   \   000072   12....       LCALL   `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   000075   E9           MOV     A,R1
   \   000076   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1359            {
   1360              NLME_NwkDiscTerm();
   \   000078                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000078   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1361          
   1362              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1363            }
   1364          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   00007B   7407         MOV     A,#0x7
   \   00007D   02....       LJMP    ??Subroutine214_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine232_0
   \   000002                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   8A..         MOV     ?V0,R2
   \   000002   8B..         MOV     ?V1,R3
   \   000004                REQUIRE ??Subroutine233_0
   \   000004                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   E5..         MOV     A,?V0
   \   000002   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000005   12....       LCALL   ??Subroutine266_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_642:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine194:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   12....       LCALL   ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_696:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine203:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   7904         MOV     R1,#0x4
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
   1365          
   1366          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1367          /*********************************************************************
   1368           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1369           *
   1370           * @brief       This function finishes the processing of the Management
   1371           *              Network Discover Request and generates the response.
   1372           *
   1373           *   Note:      This function will limit the number of items returned
   1374           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1375           *
   1376           * @param       ResultCountSrcAddr - source of the request
   1377           * @param       msg - pointer to incoming message
   1378           * @param       SecurityUse -
   1379           *
   1380           * @return      none
   1381           */
   1382          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1383          {
   1384            byte count, i, ResultCount = 0;
   1385            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1386          
   1387            NetworkList = nwk_getNwkDescList();
   1388          
   1389            // Count the number of nwk descriptors in the list
   1390            pList = nwk_getNwkDescList();
   1391            while (pList)
   1392            {
   1393              ResultCount++;
   1394              pList = pList->nextDesc;
   1395            }
   1396          
   1397            if ( ZSTACK_ROUTER_BUILD )
   1398            {
   1399              // Look for my PanID.
   1400              pList = nwk_getNwkDescList();
   1401              while ( pList )
   1402              {
   1403                if ( pList->panId == _NIB.nwkPanId )
   1404                {
   1405                  break;
   1406                }
   1407          
   1408          
   1409                if ( !pList->nextDesc )
   1410                {
   1411                  break;
   1412                }
   1413                pList = pList->nextDesc;
   1414              }
   1415          
   1416          
   1417              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1418              // prepend it.
   1419              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1420              {
   1421                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1422                if ( newDesc )
   1423                {
   1424                  byte pJoin;
   1425          
   1426                  newDesc->panId = _NIB.nwkPanId;
   1427                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1428                  newDesc->version = NLME_GetProtocolVersion();
   1429                  newDesc->stackProfile = zgStackProfile;
   1430          
   1431                  //Extended PanID
   1432                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1433          
   1434                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1435                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1436                                                     INVALID_NODE_ADDR);
   1437          
   1438                  newDesc->nextDesc = NetworkList;
   1439                  NetworkList = newDesc;
   1440                  ResultCount++;
   1441                }
   1442              }
   1443            }
   1444          
   1445            // Calc the count and apply a max count.
   1446            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1447            {
   1448              count = 0;
   1449            }
   1450            else
   1451            {
   1452              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1453              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1454              {
   1455                count = ZDO_MAX_NWKDISC_ITEMS;
   1456              }
   1457          
   1458              // Move the list pointer up to the start index.
   1459              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1460              {
   1461                NetworkList = NetworkList->nextDesc;
   1462              }
   1463            }
   1464          
   1465            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1466                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1467                                zdappMgmtNwkDiscStartIndex,
   1468                                count,
   1469                                NetworkList,
   1470                                false );
   1471          
   1472            if ( ZSTACK_ROUTER_BUILD )
   1473            {
   1474              if ( newDesc != NULL )
   1475              {
   1476                osal_mem_free( newDesc );
   1477              }
   1478            }
   1479          
   1480            NLME_NwkDiscTerm();
   1481          }
   1482          #endif
   1483          
   1484          /*********************************************************************
   1485           * @fn          ZDO_ProcessMgmtRtgReq
   1486           *
   1487           * @brief       This function finishes the processing of the Management
   1488           *              Routing Request and generates the response.
   1489           *
   1490           *   Note:      This function will limit the number of items returned
   1491           *              to ZDO_MAX_RTG_ITEMS items.
   1492           *
   1493           * @param       inMsg - incoming message (request)
   1494           *
   1495           * @return      none
   1496           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1497          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1498          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   1499            byte x;
   1500            byte maxNumItems;
   1501            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1502            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V4,R6
   \   000012   8E..         MOV     ?V5,R6
   1503            rtgItem_t *pList;
   1504            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000017   35..         ADDC    A,?V7
   \   000019   F583         MOV     DPH,A
   \   00001B   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   00001E   F5..         MOV     ?V2,A
   1505          
   1506            // Get the number of table items
   1507            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   000020                ; Setup parameters for call to function NLME_GetRequest
   \   000020   AC..         MOV     R4,?XSP + 0
   \   000022   AD..         MOV     R5,?XSP + 1
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B00         MOV     R3,#0x0
   \   000028   799D         MOV     R1,#-0x63
   \   00002A   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1508          
   1509            if ( maxNumItems > StartIndex )
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   E5..         MOV     A,?V2
   \   000037   C3           CLR     C
   \   000038   98           SUBB    A,R0
   \   000039   4003         JC      $+5
   \   00003B   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
   1510            {
   1511              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   C3           CLR     C
   \   000040   95..         SUBB    A,?V2
   \   000042   FE           MOV     R6,A
   1512          
   1513              // limit the size of the list
   1514              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   000043   C3           CLR     C
   \   000044   940B         SUBB    A,#0xb
   \   000046   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1515              {
   1516                numItems = ZDO_MAX_RTG_ITEMS;
   \   000048   7E0A         MOV     R6,#0xa
   1517              }
   1518          
   1519              // Allocate the memory to build the table
   1520              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   00004A                ; Setup parameters for call to function osal_mem_alloc
   \   00004A   EE           MOV     A,R6
   \   00004B   75F007       MOV     B,#0x7
   \   00004E   A4           MUL     AB
   \   00004F   FA           MOV     R2,A
   \   000050   ABF0         MOV     R3,B
   \   000052   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000055   8A..         MOV     ?V0,R2
   \   000057   8B..         MOV     ?V1,R3
   \   000059   8A..         MOV     ?V4,R2
   \   00005B   8B..         MOV     ?V5,R3
   1521          
   1522              if ( pBuf != NULL )
   \   00005D   EA           MOV     A,R2
   \   00005E   45..         ORL     A,?V5
   \   000060   6077         JZ      ??ZDO_ProcessMgmtRtgReq_2
   1523              {
   1524                // Convert buffer to list
   1525                pList = (rtgItem_t *)pBuf;
   1526          
   1527                // Loop through items and build list
   1528                for ( x = 0; x < numItems; x++ )
   \   000062   7F00         MOV     R7,#0x0
   \   000064   8019         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1529                {
   1530                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1531          
   1532                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1533                  switch( pList->status )
   1534                  {
   1535                    case RT_ACTIVE:
   1536                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1537                      break;
   1538          
   1539                    case RT_DISC:
   1540                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1541                      break;
   1542          
   1543                    case RT_LINK_FAIL:
   1544                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   1545                      break;
   1546          
   1547                    case RT_INIT:
   1548                    case RT_REPAIR:
   1549                    default:
   1550                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000066   85..82       MOV     DPL,?V0
   \   000069   85..83       MOV     DPH,?V1
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000073   F0           MOVX    @DPTR,A
   1551                      break;
   1552                  }
   1553          
   1554                  // Increment pointer to next record
   1555                  pList++;
   \   000074   E5..         MOV     A,?V0
   \   000076   2407         ADD     A,#0x7
   \   000078   F5..         MOV     ?V0,A
   \   00007A   5002         JNC     ??ZDO_ProcessMgmtRtgReq_6
   \   00007C   05..         INC     ?V1
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   00007E   0F           INC     R7
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   00007F   EF           MOV     A,R7
   \   000080   C3           CLR     C
   \   000081   9E           SUBB    A,R6
   \   000082   5057         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   000084                ; Setup parameters for call to function NLME_GetRequest
   \   000084   AC..         MOV     R4,?V0
   \   000086   AD..         MOV     R5,?V1
   \   000088   EF           MOV     A,R7
   \   000089   AA..         MOV     R2,?V2
   \   00008B   2A           ADD     A,R2
   \   00008C   FA           MOV     R2,A
   \   00008D   E4           CLR     A
   \   00008E   3400         ADDC    A,#0x0
   \   000090   FB           MOV     R3,A
   \   000091   798B         MOV     R1,#-0x75
   \   000093   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000096   85..82       MOV     DPL,?V0
   \   000099   85..83       MOV     DPH,?V1
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   14           DEC     A
   \   0000A3   6008         JZ      ??ZDO_ProcessMgmtRtgReq_7
   \   0000A5   14           DEC     A
   \   0000A6   6013         JZ      ??ZDO_ProcessMgmtRtgReq_8
   \   0000A8   14           DEC     A
   \   0000A9   601F         JZ      ??ZDO_ProcessMgmtRtgReq_9
   \   0000AB   80B9         SJMP    ??ZDO_ProcessMgmtRtgReq_4
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   0000AD   85..82       MOV     DPL,?V0
   \   0000B0   85..83       MOV     DPH,?V1
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   E4           CLR     A
   \   0000B9   80B8         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   0000BB   85..82       MOV     DPL,?V0
   \   0000BE   85..83       MOV     DPH,?V1
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   7401         MOV     A,#0x1
   \   0000C8   80A9         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   0000CA   85..82       MOV     DPL,?V0
   \   0000CD   85..83       MOV     DPH,?V1
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   809A         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   1556                }
   1557              }
   1558              else
   1559              {
   1560                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000D9   7E00         MOV     R6,#0x0
   1561              }
   1562            }
   1563          
   1564            // Send response
   1565            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1566                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000DB                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000DB   75..00       MOV     ?V0,#0x0
   \   0000DE   78..         MOV     R0,#?V0
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E3   78..         MOV     R0,#?V4
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   EE           MOV     A,R6
   \   0000E9   F5..         MOV     ?V0,A
   \   0000EB   78..         MOV     R0,#?V0
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F0   E5..         MOV     A,?V2
   \   0000F2   F5..         MOV     ?V0,A
   \   0000F4   78..         MOV     R0,#?V0
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F9   7405         MOV     A,#0x5
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   FD           MOV     R5,A
   \   000100   7C00         MOV     R4,#0x0
   \   000102   E5..         MOV     A,?V6
   \   000104   2402         ADD     A,#0x2
   \   000106   FA           MOV     R2,A
   \   000107   E4           CLR     A
   \   000108   35..         ADDC    A,?V7
   \   00010A   FB           MOV     R3,A
   \   00010B   E5..         MOV     A,?V6
   \   00010D   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000110   35..         ADDC    A,?V7
   \   000112   F583         MOV     DPH,A
   \   000114   E0           MOVX    A,@DPTR
   \   000115   F9           MOV     R1,A
   \   000116   12....       LCALL   `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   000119   7405         MOV     A,#0x5
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   1567          
   1568            if ( pBuf != NULL )
   \   00011E   E5..         MOV     A,?V4
   \   000120   45..         ORL     A,?V5
   \   000122   6007         JZ      ??ZDO_ProcessMgmtRtgReq_10
   1569            {
   1570              osal_mem_free( pBuf );
   \   000124                ; Setup parameters for call to function osal_mem_free
   \   000124   AA..         MOV     R2,?V4
   \   000126   AB..         MOV     R3,?V5
   \   000128   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1571            }
   1572          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   00012B   7401         MOV     A,#0x1
   \   00012D                REQUIRE ?Subroutine7
   \   00012D                ; // Fall through to label ?Subroutine7
   1573          
   1574          /*********************************************************************
   1575           * @fn          ZDO_ProcessMgmtBindReq
   1576           *
   1577           * @brief       This function finishes the processing of the Management
   1578           *              Bind Request and generates the response.
   1579           *
   1580           *   Note:      This function will limit the number of items returned
   1581           *              to ZDO_MAX_BIND_ITEMS items.
   1582           *
   1583           * @param       inMsg - incoming message (request)
   1584           *
   1585           * @return      none
   1586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1587          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1588          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine21 & 0xFFFF
   1589          #if defined ( REFLECTOR )
   1590            byte x;
   1591            uint16 maxNumItems;
   1592            uint16 numItems;
   1593            uint8 *pBuf = NULL;
   \                     ??CrossCallReturnLabel_392:
   \   000012   75..00       MOV     ?V4,#0x0
   \   000015   75..00       MOV     ?V5,#0x0
   1594            apsBindingItem_t *pList;
   1595            uint8 StartIndex = inMsg->asdu[0];
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000020   F5..         MOV     ?V2,A
   1596            uint8 status;
   1597          
   1598            // Get the number of table items
   1599            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000022                ; Setup parameters for call to function APSME_GetRequest
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7A00         MOV     R2,#0x0
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   79A3         MOV     R1,#-0x5d
   \   00002C   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1600          
   1601            if ( maxNumItems > StartIndex )
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   000038   C3           CLR     C
   \   000039   E5..         MOV     A,?V2
   \   00003B   9A           SUBB    A,R2
   \   00003C   E4           CLR     A
   \   00003D   9B           SUBB    A,R3
   \   00003E   507A         JNC     ??ZDO_ProcessMgmtBindReq_0
   1602            {
   1603              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   A8..         MOV     R0,?V2
   \   000048   E0           MOVX    A,@DPTR
   \   000049   C3           CLR     C
   \   00004A   98           SUBB    A,R0
   \   00004B   FE           MOV     R6,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   9400         SUBB    A,#0x0
   \   000050   FF           MOV     R7,A
   1604            }
   1605            else
   1606            {
   1607              numItems = 0;
   1608            }
   1609          
   1610            // limit the size of the list
   1611            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000051   C3           CLR     C
   \   000052   EE           MOV     A,R6
   \   000053   9404         SUBB    A,#0x4
   \   000055   EF           MOV     A,R7
   \   000056   9400         SUBB    A,#0x0
   \   000058   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1612            {
   1613              numItems = ZDO_MAX_BIND_ITEMS;
   \   00005A   7E03         MOV     R6,#0x3
   \   00005C   7F00         MOV     R7,#0x0
   \   00005E   8004         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1614            }
   1615          
   1616            // Allocate the memory to build the table
   1617            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000060   EE           MOV     A,R6
   \   000061   4F           ORL     A,R7
   \   000062   6056         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000064                ; Setup parameters for call to function osal_mem_alloc
   \   000064   EE           MOV     A,R6
   \   000065   FA           MOV     R2,A
   \   000066   EF           MOV     A,R7
   \   000067   FB           MOV     R3,A
   \   000068   EA           MOV     A,R2
   \   000069   75F015       MOV     B,#0x15
   \   00006C   A4           MUL     AB
   \   00006D   FA           MOV     R2,A
   \   00006E   A8F0         MOV     R0,B
   \   000070   75F015       MOV     B,#0x15
   \   000073   EB           MOV     A,R3
   \   000074   A4           MUL     AB
   \   000075   28           ADD     A,R0
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00007A   8A..         MOV     ?V4,R2
   \   00007C   8B..         MOV     ?V5,R3
   \   00007E   EA           MOV     A,R2
   \   00007F   45..         ORL     A,?V5
   \   000081   6037         JZ      ??ZDO_ProcessMgmtBindReq_0
   1618            {
   1619              status = ZSuccess;
   \   000083   75..00       MOV     ?V1,#0x0
   1620          
   1621              // Convert buffer to list
   1622              pList = (apsBindingItem_t *)pBuf;
   \   000086   8A..         MOV     ?V6,R2
   \   000088   8B..         MOV     ?V7,R3
   1623          
   1624              // Loop through items and build list
   1625              for ( x = 0; x < numItems; x++ )
   \   00008A   75..00       MOV     ?V0,#0x0
   \   00008D   801F         SJMP    ??ZDO_ProcessMgmtBindReq_3
   1626              {
   1627                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   00008F                ; Setup parameters for call to function APSME_GetRequest
   \   00008F   AC..         MOV     R4,?V6
   \   000091   AD..         MOV     R5,?V7
   \   000093   AA..         MOV     R2,?V2
   \   000095   E5..         MOV     A,?V0
   \   000097   2A           ADD     A,R2
   \   000098   FA           MOV     R2,A
   \   000099   E4           CLR     A
   \   00009A   3400         ADDC    A,#0x0
   \   00009C   FB           MOV     R3,A
   \   00009D   79A2         MOV     R1,#-0x5e
   \   00009F   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1628                pList++;
   \   0000A2   E5..         MOV     A,?V6
   \   0000A4   2415         ADD     A,#0x15
   \   0000A6   F5..         MOV     ?V6,A
   \   0000A8   5002         JNC     ??ZDO_ProcessMgmtBindReq_5
   \   0000AA   05..         INC     ?V7
   1629              }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000AC   05..         INC     ?V0
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   0000AE   C3           CLR     C
   \   0000AF   E5..         MOV     A,?V0
   \   0000B1   9E           SUBB    A,R6
   \   0000B2   E4           CLR     A
   \   0000B3   9F           SUBB    A,R7
   \   0000B4   40D9         JC      ??ZDO_ProcessMgmtBindReq_4
   \   0000B6   EE           MOV     A,R6
   \   0000B7   F9           MOV     R1,A
   \   0000B8   8005         SJMP    ??ZDO_ProcessMgmtBindReq_6
   1630          
   1631            }
   1632            else
   1633            {
   1634              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000BA   75..8B       MOV     ?V1,#-0x75
   1635              numItems = 0;
   \   0000BD   7900         MOV     R1,#0x0
   1636            }
   1637          
   1638            // Send response
   1639            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1640                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000BF                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000BF   75..00       MOV     ?V0,#0x0
   \   0000C2   78..         MOV     R0,#?V0
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C7   78..         MOV     R0,#?V4
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   E9           MOV     A,R1
   \   0000CD   F5..         MOV     ?V0,A
   \   0000CF   78..         MOV     R0,#?V0
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D4   E5..         MOV     A,?V2
   \   0000D6   F5..         MOV     ?V0,A
   \   0000D8   78..         MOV     R0,#?V0
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DD   7405         MOV     A,#0x5
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   FD           MOV     R5,A
   \   0000E4   AC..         MOV     R4,?V1
   \   0000E6   7407         MOV     A,#0x7
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   0000EE   7407         MOV     A,#0x7
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000F6   12....       LCALL   `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   0000F9   7405         MOV     A,#0x5
   \   0000FB   12....       LCALL   ?DEALLOC_XSTACK8
   1641          
   1642            if ( pBuf )
   \   0000FE   E5..         MOV     A,?V4
   \   000100   45..         ORL     A,?V5
   \   000102   6007         JZ      ??ZDO_ProcessMgmtBindReq_7
   1643            {
   1644              osal_mem_free( pBuf );
   \   000104                ; Setup parameters for call to function osal_mem_free
   \   000104   AA..         MOV     R2,?V4
   \   000106   AB..         MOV     R3,?V5
   \   000108   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1645            }
   1646          #else
   1647            (void)inMsg;
   1648          #endif
   1649          }
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   00010B   7404         MOV     A,#0x4
   \   00010D   02....       LJMP    ?Subroutine7 & 0xFFFF
   1650          
   1651          /*********************************************************************
   1652           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1653           *
   1654           * @brief       This function finishes the processing of the Management
   1655           *              Direct Join Request and generates the response.
   1656           *
   1657           * @param       inMsg - incoming message (request)
   1658           *
   1659           * @return      none
   1660           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1661          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1662          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine124 & 0xFFFF
   1663            uint8 *deviceAddr;
   1664            uint8 capInfo;
   1665            uint8 stat;
   1666          
   1667            // Parse the message
   1668            deviceAddr = inMsg->asdu;
   1669            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1670          
   1671            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_361:
   \   00000D   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000010                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   000021   E9           MOV     A,R1
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   F0           MOVX    @DPTR,A
   1672          
   1673            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000029                ; Setup parameters for call to function ZDP_SendData
   \   000029   75..00       MOV     ?V0,#0x0
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?XSTACK_DISP100_8
   \   000036   88..         MOV     ?V0,R0
   \   000038   89..         MOV     ?V1,R1
   \   00003A   78..         MOV     R0,#?V0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   75..35       MOV     ?V0,#0x35
   \   000042   75..80       MOV     ?V1,#-0x80
   \   000045   78..         MOV     R0,#?V0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00004D   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000050   7405         MOV     A,#0x5
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   1674          }
   \   000055                REQUIRE ?Subroutine8
   \   000055                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine214_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EE           MOV     A,R6
   \   000003   2402         ADD     A,#0x2
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   FD           MOV     R5,A
   \   000009   EE           MOV     A,R6
   \   00000A   240F         ADD     A,#0xf
   \   00000C   FA           MOV     R2,A
   \   00000D   E4           CLR     A
   \   00000E   3F           ADDC    A,R7
   \   00000F   FB           MOV     R3,A
   \   000010   22           RET
   1675          
   1676          /*********************************************************************
   1677           * @fn          ZDO_ProcessMgmtLeaveReq
   1678           *
   1679           * @brief       This function processes a Management Leave Request
   1680           *              and generates the response.
   1681           *
   1682           * @param       inMsg - incoming message (request)
   1683           *
   1684           * @return      none
   1685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1686          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1687          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine125 & 0xFFFF
   1688            NLME_LeaveReq_t req;
   1689            ZStatus_t       status;
   1690            uint8           option;
   1691            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_418:
   \   00000D   35..         ADDC    A,?V1
   \   00000F   12....       LCALL   ?Subroutine105 & 0xFFFF
   1692          
   1693            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1694                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_409:
   \   000012   FA           MOV     R2,A
   \   000013   EF           MOV     A,R7
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000018   E9           MOV     A,R1
   \   000019   6017         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   00001B                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001B   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00001E   8A..         MOV     ?V2,R2
   \   000020   8B..         MOV     ?V3,R3
   \   000022   AC..         MOV     R4,?V2
   \   000024   AD..         MOV     R5,?V3
   \   000026                ; Setup parameters for call to function sAddrExtCmp
   \   000026   EE           MOV     A,R6
   \   000027   FA           MOV     R2,A
   \   000028   EF           MOV     A,R7
   \   000029   FB           MOV     R3,A
   \   00002A   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002D   E9           MOV     A,R1
   \   00002E   6401         XRL     A,#0x1
   \   000030   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1695            {
   1696              // Remove this device
   1697              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   000032   7401         MOV     A,#0x1
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1698            }
   1699            else
   1700            {
   1701              // Remove child device
   1702              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00003C   7401         MOV     A,#0x1
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   EE           MOV     A,R6
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   EF           MOV     A,R7
   1703            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000045   12....       LCALL   ?Subroutine26 & 0xFFFF
   1704          
   1705            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_27:
   \   000048   F8           MOV     R0,A
   1706            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000049   A2E6         MOV     C,0xE0 /* A   */.6
   \   00004B   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1707            {
   1708              req.removeChildren = TRUE;
   \   00004D   7403         MOV     A,#0x3
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   7401         MOV     A,#0x1
   \   000054   F0           MOVX    @DPTR,A
   1709            }
   1710          
   1711            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000055   E8           MOV     A,R0
   \   000056   A2E7         MOV     C,0xE0 /* A   */.7
   \   000058   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1712            {
   1713               req.rejoin = TRUE;
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   7401         MOV     A,#0x1
   \   000061   F0           MOVX    @DPTR,A
   1714            }
   1715          
   1716            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000062   7405         MOV     A,#0x5
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   E4           CLR     A
   \   000068   F0           MOVX    @DPTR,A
   1717          
   1718            status = NLME_LeaveReq( &req );
   \   000069                ; Setup parameters for call to function NLME_LeaveReq
   \   000069   04           INC     A
   \   00006A   12....       LCALL   ?XSTACK_DISP101_8
   \   00006D   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   000070   E9           MOV     A,R1
   \   000071   85..82       MOV     DPL,?XSP + 0
   \   000074   85..83       MOV     DPH,?XSP + 1
   \   000077   F0           MOVX    @DPTR,A
   1719          
   1720            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   000078                ; Setup parameters for call to function ZDP_SendData
   \   000078   75..00       MOV     ?V2,#0x0
   \   00007B   78..         MOV     R0,#?V2
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000080   7401         MOV     A,#0x1
   \   000082   12....       LCALL   ?XSTACK_DISP100_8
   \   000085   88..         MOV     ?V2,R0
   \   000087   89..         MOV     ?V3,R1
   \   000089   78..         MOV     R0,#?V2
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   75..34       MOV     ?V2,#0x34
   \   000091   75..80       MOV     ?V3,#-0x80
   \   000094   78..         MOV     R0,#?V2
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00009C   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00009F   7405         MOV     A,#0x5
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   1721          }
   \   0000A4   7406         MOV     A,#0x6
   \   0000A6   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine231_0
   \   000002                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1722          
   1723          
   1724          /*********************************************************************
   1725           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1726           *
   1727           * @brief       This function processes a Management Permit Join Request
   1728           *              and generates the response.
   1729           *
   1730           * @param       inMsg - incoming message (request)
   1731           *
   1732           * @return      none
   1733           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1734          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1735          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1736            uint8 stat;
   1737            uint8 duration;
   1738            uint8 tcsig;
   1739          
   1740            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1741            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1742          
   1743            // Set the network layer permit join duration
   1744            stat = (byte) NLME_PermitJoiningRequest( duration );
   \   00000E                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   00000E   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000011   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000018   E9           MOV     A,R1
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   12....       LCALL   ?Subroutine34 & 0xFFFF
   1745          
   1746            // Handle the Trust Center Significance
   1747            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1748            {
   1749              if ( tcsig == TRUE )
   1750              {
   1751                ZDSecMgrPermitJoining( duration );
   1752              }
   1753            }
   1754          
   1755            // Send a response if unicast
   1756            if ( !inMsg->wasBroadcast )
   \                     ??CrossCallReturnLabel_50:
   \   000022   702C         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   1757            {
   1758              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000024                ; Setup parameters for call to function ZDP_SendData
   \   000024   75..00       MOV     ?V0,#0x0
   \   000027   78..         MOV     R0,#?V0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?XSTACK_DISP100_8
   \   000031   88..         MOV     ?V0,R0
   \   000033   89..         MOV     ?V1,R1
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..36       MOV     ?V0,#0x36
   \   00003D   75..80       MOV     ?V1,#-0x80
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   12....       LCALL   ?Subroutine129 & 0xFFFF
   1759            }
   \                     ??CrossCallReturnLabel_206:
   \   000048   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00004B   7405         MOV     A,#0x5
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   1760          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   000050   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   240B         ADD     A,#0xb
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
   1761          
   1762          /*
   1763           * This function stub allows the next higher layer to be notified of
   1764           * a permit joining timeout.
   1765           */
   1766          /*********************************************************************
   1767           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1768           *
   1769           * @brief       This function stub allows the next higher layer to be
   1770           *              notified of a permit joining timeout. Currently, this
   1771           *              directly bypasses the APS layer.
   1772           *
   1773           * @param       none
   1774           *
   1775           * @return      none
   1776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1777          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1778          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1779            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1780            // Currently, only the ZDSecMgr needs to be notified
   1781            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1782            {
   1783              ZDSecMgrPermitJoiningTimeout();
   1784            }
   1785            #endif
   1786          }
   \   000000   02....       LJMP    ?BRET
   1787          
   1788          /*********************************************************************
   1789           * @fn          ZDO_ProcessUserDescReq
   1790           *
   1791           * @brief       This function finishes the processing of the User
   1792           *              Descriptor Request and generates the response.
   1793           *
   1794           * @param       inMsg - incoming message (request)
   1795           *
   1796           * @return      none
   1797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1798          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1799          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine124 & 0xFFFF
   1800            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_362:
   \   00000D   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000010   F5..         MOV     ?V0,A
   \   000012   E4           CLR     A
   \   000013   39           ADDC    A,R1
   \   000014   F5..         MOV     ?V1,A
   1801            UserDescriptorFormat_t userDesc;
   1802          
   1803            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1804                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000016   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   65..         XRL     A,?V0
   \   00001C   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   65..         XRL     A,?V1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000022   7052         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000024                ; Setup parameters for call to function osal_nv_read
   \   000024   A8..         MOV     R0,?XSP + 0
   \   000026   A9..         MOV     R1,?XSP + 1
   \   000028   88..         MOV     ?V2,R0
   \   00002A   89..         MOV     ?V3,R1
   \   00002C   78..         MOV     R0,#?V2
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..11       MOV     ?V2,#0x11
   \   000034   75..00       MOV     ?V3,#0x0
   \   000037   78..         MOV     R0,#?V2
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV     R4,#0x0
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7A81         MOV     R2,#-0x7f
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000047   7404         MOV     A,#0x4
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004C   E9           MOV     A,R1
   \   00004D   7027         JNZ     ??ZDO_ProcessUserDescReq_1
   1805            {
   1806              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00004F                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00004F   75..00       MOV     ?V2,#0x0
   \   000052   78..         MOV     R0,#?V2
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   7401         MOV     A,#0x1
   \   000059   12....       LCALL   ?XSTACK_DISP100_8
   \   00005C   88..         MOV     ?V2,R0
   \   00005E   89..         MOV     ?V3,R1
   \   000060   78..         MOV     R0,#?V2
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   AC..         MOV     R4,?V0
   \   000067   AD..         MOV     R5,?V1
   \   000069   12....       LCALL   ?Subroutine126 & 0xFFFF
   1807            }
   \                     ??CrossCallReturnLabel_201:
   \   00006C   12....       LCALL   `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   8020         SJMP    ??ZDO_ProcessUserDescReq_2
   1808            else
   1809            {
   1810              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1811                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000076                ; Setup parameters for call to function ZDP_GenericRsp
   \   000076   75..11       MOV     ?V2,#0x11
   \   000079   75..80       MOV     ?V3,#-0x80
   \   00007C   78..         MOV     R0,#?V2
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   78..         MOV     R0,#?V0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   12....       LCALL   ?Subroutine135 & 0xFFFF
   1812            }
   \                     ??CrossCallReturnLabel_217:
   \   000089   7C84         MOV     R4,#-0x7c
   \   00008B   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   00008E   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000091   7404         MOV     A,#0x4
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   1813          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   000096   7411         MOV     A,#0x11
   \   000098   02....       LJMP    ?Subroutine2 & 0xFFFF
   1814          
   1815          /*********************************************************************
   1816           * @fn          ZDO_ProcessUserDescSet
   1817           *
   1818           * @brief       This function finishes the processing of the User
   1819           *              Descriptor Set and generates the response.
   1820           *
   1821           * @param       inMsg - incoming message (request)
   1822           *
   1823           * @return      none
   1824           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1825          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1826          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   1827            uint8 *msg;
   1828            uint16 aoi;
   1829            UserDescriptorFormat_t userDesc;
   1830            uint8 outMsg[3];
   1831            uint8 status;
   1832          
   1833            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000011   35..         ADDC    A,?V5
   \   000013   12....       LCALL   ?Subroutine81 & 0xFFFF
   1834            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_133:
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   CA           XCH     A,R2
   \   000019   FB           MOV     R3,A
   \   00001A   EC           MOV     A,R4
   \   00001B   2A           ADD     A,R2
   \   00001C   FE           MOV     R6,A
   \   00001D   E4           CLR     A
   \   00001E   3B           ADDC    A,R3
   \   00001F   FF           MOV     R7,A
   1835          
   1836            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000020   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6E           XRL     A,R6
   \   000025   7003         JNZ     ??ZDO_ProcessUserDescSet_0
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00002A   6003         JZ      $+5
   \   00002C   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1837            {
   1838              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   9410         SUBB    A,#0x10
   \   000038   500F         JNC     ??ZDO_ProcessUserDescSet_2
   \   00003A   8882         MOV     DPL,R0
   \   00003C   8983         MOV     DPH,R1
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   8008         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   7410         MOV     A,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000051   F0           MOVX    @DPTR,A
   \   000052   E0           MOVX    A,@DPTR
   \   000053   C0E0         PUSH    A
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   D0E0         POP     A
   \   00005C   12....       LCALL   ?Subroutine163 & 0xFFFF
   1839              msg ++;  // increment one for the length field
   1840          
   1841              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_277:
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A982         MOV     R1,DPL
   \   000064   AA83         MOV     R2,DPH
   \   000066   89..         MOV     ?V0,R1
   \   000068   8A..         MOV     ?V1,R2
   \   00006A   75..00       MOV     ?V2,#0x0
   \   00006D   78..         MOV     R0,#?V0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000072   7407         MOV     A,#0x7
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   FC           MOV     R4,A
   \   000079   7D00         MOV     R5,#0x0
   \   00007B   7408         MOV     A,#0x8
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   AA82         MOV     R2,DPL
   \   000082   AB83         MOV     R3,DPH
   \   000084   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   1842              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   00008C                ; Setup parameters for call to function osal_nv_write
   \   00008C   7404         MOV     A,#0x4
   \   00008E   12....       LCALL   ?XSTACK_DISP100_8
   \   000091   88..         MOV     ?V0,R0
   \   000093   89..         MOV     ?V1,R1
   \   000095   78..         MOV     R0,#?V0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   75..11       MOV     ?V0,#0x11
   \   00009D   75..00       MOV     ?V1,#0x0
   \   0000A0   78..         MOV     R0,#?V0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   7C00         MOV     R4,#0x0
   \   0000A7   7D00         MOV     R5,#0x0
   \   0000A9   7A81         MOV     R2,#-0x7f
   \   0000AB   7B00         MOV     R3,#0x0
   \   0000AD   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B0   7404         MOV     A,#0x4
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   1843              if ( userDesc.len != 0 )
   \   0000B5   7404         MOV     A,#0x4
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000BE   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1844              {
   1845                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   D2E4         SETB    0xE0 /* A   */.4
   \   0000C3   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1846              }
   1847              else
   1848              {
   1849                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   C2E4         CLR     0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000C8   F0           MOVX    @DPTR,A
   1850              }
   1851          
   1852              status = ZDP_SUCCESS;
   \   0000C9   85..82       MOV     DPL,?XSP + 0
   \   0000CC   85..83       MOV     DPH,?XSP + 1
   \   0000CF   E4           CLR     A
   \   0000D0   8008         SJMP    ??ZDO_ProcessUserDescSet_6
   1853            }
   1854            else
   1855            {
   1856              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000D2   85..82       MOV     DPL,?XSP + 0
   \   0000D5   85..83       MOV     DPH,?XSP + 1
   \   0000D8   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000DA   F0           MOVX    @DPTR,A
   1857            }
   1858          
   1859            outMsg[0] = status;
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   C0E0         PUSH    A
   \   0000DE   7401         MOV     A,#0x1
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   D0E0         POP     A
   \   0000E5   F0           MOVX    @DPTR,A
   1860            outMsg[1] = LO_UINT16( aoi );
   \   0000E6   7402         MOV     A,#0x2
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   EE           MOV     A,R6
   \   0000EC   F0           MOVX    @DPTR,A
   1861            outMsg[2] = LO_UINT16( aoi );
   \   0000ED   7403         MOV     A,#0x3
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   EE           MOV     A,R6
   \   0000F3   F0           MOVX    @DPTR,A
   1862          
   1863            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1864                         inMsg->SecurityUse );
   \   0000F4                ; Setup parameters for call to function ZDP_SendData
   \   0000F4   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_631:
   \   0000F7   35..         ADDC    A,?V5
   \   0000F9   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FF   7402         MOV     A,#0x2
   \   000101   12....       LCALL   ?XSTACK_DISP100_8
   \   000104   88..         MOV     ?V0,R0
   \   000106   89..         MOV     ?V1,R1
   \   000108   78..         MOV     R0,#?V0
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   75..14       MOV     ?V0,#0x14
   \   000110   75..80       MOV     ?V1,#-0x80
   \   000113   78..         MOV     R0,#?V0
   \   000115   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000118   7903         MOV     R1,#0x3
   \   00011A   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   00011D   FA           MOV     R2,A
   \   00011E   E4           CLR     A
   \   00011F   35..         ADDC    A,?V5
   \   000121   FB           MOV     R3,A
   \   000122   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000125   7405         MOV     A,#0x5
   \   000127   12....       LCALL   ?DEALLOC_XSTACK8
   1865          }
   \   00012A   7415         MOV     A,#0x15
   \   00012C   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine234_0
   \   000002                ; // Fall through to label ??Subroutine234_0
   1866          
   1867          /*********************************************************************
   1868           * @fn          ZDO_ProcessDeviceAnnce
   1869           *
   1870           * @brief       This function processes a device annouce message.
   1871           *
   1872           * @param       inMsg - incoming message
   1873           *
   1874           * @return      none
   1875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1876          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1878            ZDO_DeviceAnnce_t Annce;
   1879            AddrMgrEntry_t addrEntry;
   1880            uint8 parentExt[Z_EXTADDR_LEN];
   1881          
   1882            // Parse incoming message
   1883            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000A                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000A   AC..         MOV     R4,?XSP + 0
   \   00000C   AD..         MOV     R5,?XSP + 1
   \   00000E   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   1884          
   1885            if ( ZSTACK_END_DEVICE_BUILD )
   1886            {
   1887              // Make sure the message didn't come from myself - end device only
   1888              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   AC82         MOV     R4,DPL
   \   00001B   AD83         MOV     R5,DPH
   \   00001D   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000020   E9           MOV     A,R1
   \   000021   601D         JZ      ??ZDO_ProcessDeviceAnnce_0
   \   000023                ; Setup parameters for call to function NLME_GetShortAddr
   \   000023   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000026   8A..         MOV     ?V0,R2
   \   000028   8B..         MOV     ?V1,R3
   \   00002A   A8..         MOV     R0,?V0
   \   00002C   A9..         MOV     R1,?V1
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   E0           MOVX    A,@DPTR
   \   000035   68           XRL     A,R0
   \   000036   7003         JNZ     ??ZDO_ProcessDeviceAnnce_1
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   00003B   7003         JNZ     $+5
   \   00003D   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   1889              {
   1890                return;
   1891              }
   1892            }
   1893          
   1894          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1895            // Clean up the neighbor table
   1896            nwkNeighborRemoveAllStranded();
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   000040                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000040   12....       LCALL   `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   1897          
   1898            // If address conflict is detected, no need to update the address manager
   1899            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   000043                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   AC82         MOV     R4,DPL
   \   00004A   AD83         MOV     R5,DPH
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   000055   12....       LCALL   `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   000058   E9           MOV     A,R1
   \   000059   6401         XRL     A,#0x1
   \   00005B   7003         JNZ     $+5
   \   00005D   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   1900            {
   1901              return;
   1902            }
   1903          #endif
   1904          
   1905          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1906            // Check for parent's address
   1907            NLME_GetCoordExtAddr( parentExt );
   \   000060                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000060   7418         MOV     A,#0x18
   \   000062   12....       LCALL   ?XSTACK_DISP101_8
   \   000065   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   1908            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   000068                ; Setup parameters for call to function sAddrExtCmp
   \   000068   7402         MOV     A,#0x2
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   AC82         MOV     R4,DPL
   \   00006F   AD83         MOV     R5,DPH
   \   000071   7418         MOV     A,#0x18
   \   000073   12....       LCALL   ?XSTACK_DISP101_8
   \   000076   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000079   E9           MOV     A,R1
   \   00007A   6032         JZ      ??ZDO_ProcessDeviceAnnce_3
   1909            {
   1910              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   00007C                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00007C   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00007F   8A..         MOV     ?V0,R2
   \   000081   8B..         MOV     ?V1,R3
   \   000083   A8..         MOV     R0,?V0
   \   000085   A9..         MOV     R1,?V1
   \   000087   85..82       MOV     DPL,?XSP + 0
   \   00008A   85..83       MOV     DPH,?XSP + 1
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   68           XRL     A,R0
   \   00008F   7003         JNZ     ??ZDO_ProcessDeviceAnnce_4
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   000094   6018         JZ      ??ZDO_ProcessDeviceAnnce_3
   1911              {
   1912                // Set the Parent's MAC's new short address
   1913                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   000096   85..82       MOV     DPL,?XSP + 0
   \   000099   85..83       MOV     DPH,?XSP + 1
   \   00009C   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00009F   90....       MOV     DPTR,#_NIB + 23
   \   0000A2   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   1914                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_446:
   \   0000A5                ; Setup parameters for call to function ZMacSetReq
   \   0000A5   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   0000A7   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   0000A9   794B         MOV     R1,#0x4b
   \   0000AB   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1915              }
   1916            }
   1917          
   1918            if ( ZSTACK_ROUTER_BUILD )
   1919            {
   1920              // If the device annce comes from a end device child that has moved
   1921              // to another parent, remove it from associated device list
   1922          
   1923              // If the dev annce is coming from other device's children,
   1924              // (The dev annce from its own children shall be unicast to itself,
   1925              // So check the mac destination address)
   1926              // Remove it from the associated device list. If it is not
   1927              // a child, no action will be taken in AssocRemove() anyway.
   1928              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   1929              {
   1930                associated_devices_t *dev_ptr;
   1931          
   1932                // If it's an end device child
   1933                dev_ptr = AssocGetWithExt( Annce.extAddr );
   1934                if ( dev_ptr )
   1935                {
   1936                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   1937                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   1938                  {
   1939                    AssocRemove( Annce.extAddr );
   1940                  }
   1941                }
   1942              }
   1943          
   1944              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   1945              {
   1946                // If an associated device is found with matched extended Address,
   1947                // update its short address
   1948                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   1949                {
   1950                  // Set event to save NV
   1951                  ZDApp_NVUpdate();
   1952                }
   1953              }
   1954            }
   1955          
   1956            // Update the neighbor table
   1957            nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000AE                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   0000AE   7402         MOV     A,#0x2
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   AC82         MOV     R4,DPL
   \   0000B5   AD83         MOV     R5,DPH
   \   0000B7   85..82       MOV     DPL,?XSP + 0
   \   0000BA   85..83       MOV     DPH,?XSP + 1
   \   0000BD   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   0000C0   12....       LCALL   `??nwkNeighborUpdateNwkAddr::?relay`; Banked call to: nwkNeighborUpdateNwkAddr
   1958          
   1959            // Assume that the device has moved, remove existing routing entries
   1960            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \   0000C3                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000C3   7900         MOV     R1,#0x0
   \   0000C5   85..82       MOV     DPL,?XSP + 0
   \   0000C8   85..83       MOV     DPH,?XSP + 1
   \   0000CB   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   0000CE   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   1961          
   1962          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   1963          
   1964            // Fill in the extended address in address manager if we don't have it already.
   1965            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000D1   740B         MOV     A,#0xb
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   E4           CLR     A
   \   0000D7   12....       LCALL   ?Subroutine33 & 0xFFFF
   1966            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_46:
   \   0000DA   F8           MOV     R0,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F9           MOV     R1,A
   \   0000DE   740C         MOV     A,#0xc
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   12....       LCALL   ?Subroutine40 & 0xFFFF
   1967            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_61:
   \   0000E6   12....       LCALL   ?XSTACK_DISP101_8
   \   0000E9   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0000EC   E9           MOV     A,R1
   \   0000ED   603F         JZ      ??ZDO_ProcessDeviceAnnce_5
   1968            {
   1969              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   0000EF                ; Setup parameters for call to function osal_memset
   \   0000EF   7C08         MOV     R4,#0x8
   \   0000F1   7D00         MOV     R5,#0x0
   \   0000F3   7900         MOV     R1,#0x0
   \   0000F5   7418         MOV     A,#0x18
   \   0000F7   12....       LCALL   ?XSTACK_DISP101_8
   \   0000FA   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1970              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   0000FD                ; Setup parameters for call to function sAddrExtCmp
   \   0000FD   740E         MOV     A,#0xe
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   AC82         MOV     R4,DPL
   \   000104   AD83         MOV     R5,DPH
   \   000106   7418         MOV     A,#0x18
   \   000108   12....       LCALL   ?XSTACK_DISP101_8
   \   00010B   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00010E   E9           MOV     A,R1
   \   00010F   601D         JZ      ??ZDO_ProcessDeviceAnnce_5
   1971              {
   1972                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   000111                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000111   7402         MOV     A,#0x2
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   AC82         MOV     R4,DPL
   \   000118   AD83         MOV     R5,DPH
   \   00011A   740E         MOV     A,#0xe
   \   00011C   12....       LCALL   ?XSTACK_DISP0_8
   \   00011F   AA82         MOV     R2,DPL
   \   000121   AB83         MOV     R3,DPH
   \   000123   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1973                AddrMgrEntryUpdate( &addrEntry );
   \   000126                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000126   740B         MOV     A,#0xb
   \   000128   12....       LCALL   ?XSTACK_DISP101_8
   \   00012B   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1974              }
   1975            }
   1976          
   1977            // Update the short address in address manager if it's been changed
   1978            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   00012E                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00012E   7402         MOV     A,#0x2
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   AC82         MOV     R4,DPL
   \   000135   AD83         MOV     R5,DPH
   \   000137   740E         MOV     A,#0xe
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   AA82         MOV     R2,DPL
   \   00013E   AB83         MOV     R3,DPH
   \   000140   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1979            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   000143                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000143   740B         MOV     A,#0xb
   \   000145   12....       LCALL   ?XSTACK_DISP101_8
   \   000148   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00014B   E9           MOV     A,R1
   \   00014C   602E         JZ      ??ZDO_ProcessDeviceAnnce_2
   1980            {
   1981              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   00014E   740C         MOV     A,#0xc
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   000156   85..82       MOV     DPL,?XSP + 0
   \   000159   85..83       MOV     DPH,?XSP + 1
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   68           XRL     A,R0
   \   00015E   7003         JNZ     ??ZDO_ProcessDeviceAnnce_6
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \   000162   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   000163   6017         JZ      ??ZDO_ProcessDeviceAnnce_2
   1982              {
   1983                addrEntry.nwkAddr = Annce.nwkAddr;
   \   000165   85..82       MOV     DPL,?XSP + 0
   \   000168   85..83       MOV     DPH,?XSP + 1
   \   00016B   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   1984                AddrMgrEntryUpdate( &addrEntry );
   1985              }
   1986            }
   \                     ??CrossCallReturnLabel_432:
   \   00016E   740C         MOV     A,#0xc
   \   000170   12....       LCALL   ?XSTACK_DISP0_8
   \   000173   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000176   12....       LCALL   ?XSTACK_DISP101_8
   \   000179   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1987          }
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   00017C   7420         MOV     A,#0x20
   \   00017E   02....       LJMP    ??Subroutine214_0 & 0xFFFF
   1988          
   1989          /*********************************************************************
   1990           * @fn          ZDO_BuildSimpleDescBuf
   1991           *
   1992           * @brief       Build a byte sequence representation of a Simple Descriptor.
   1993           *
   1994           * @param       buf  - pointer to a byte array big enough for data.
   1995           * @param       desc - SimpleDescriptionFormat_t *
   1996           *
   1997           * @return      none
   1998           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine235_0
   \   000004                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1999          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2000          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2001            byte cnt;
   2002            uint16 *ptr;
   2003          
   2004            *buf++ = desc->EndPoint;
   \   000009   12....       LCALL   ?Subroutine47 & 0xFFFF
   2005            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_688:
   \   00000C   A882         MOV     R0,DPL
   \   00000E   A983         MOV     R1,DPH
   \   000010   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000013   12....       LCALL   ?Subroutine30 & 0xFFFF
   2006            *buf++ = LO_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_36:
   \   000016   F0           MOVX    @DPTR,A
   2007            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   F8           MOV     R0,A
   \   00001B   E4           CLR     A
   \   00001C   3F           ADDC    A,R7
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   12....       LCALL   ?Subroutine30 & 0xFFFF
   2008            *buf++ = LO_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_37:
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   12....       LCALL   ?Subroutine17 & 0xFFFF
   2009          
   2010            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_16:
   \   00002B   C4           SWAP    A
   \   00002C   54F0         ANL     A,#0xf0
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   12....       LCALL   ??Subroutine272_0 & 0xFFFF
   2011          
   2012            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_690:
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000042   F0           MOVX    @DPTR,A
   \   000043   EA           MOV     A,R2
   \   000044   2407         ADD     A,#0x7
   \   000046   FA           MOV     R2,A
   \   000047   5001         JNC     ??ZDO_BuildSimpleDescBuf_0
   \   000049   0B           INC     R3
   2013            ptr = desc->pAppInClusterList;
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   12....       LCALL   ?Subroutine104 & 0xFFFF
   2014            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_438:
   \   000051   7C00         MOV     R4,#0x0
   \   000053   800E         SJMP    ??ZDO_BuildSimpleDescBuf_1
   2015            {
   2016              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   000055   12....       LCALL   ?Subroutine22 & 0xFFFF
   2017              *buf++ = LO_UINT16( *ptr );
   2018            }
   \                     ??CrossCallReturnLabel_21:
   \   000058   5001         JNC     ??ZDO_BuildSimpleDescBuf_3
   \   00005A   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   00005B   E8           MOV     A,R0
   \   00005C   2402         ADD     A,#0x2
   \   00005E   F8           MOV     R0,A
   \   00005F   5001         JNC     ??ZDO_BuildSimpleDescBuf_4
   \   000061   09           INC     R1
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   000062   0C           INC     R4
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FD           MOV     R5,A
   \   00006F   EC           MOV     A,R4
   \   000070   C3           CLR     C
   \   000071   9D           SUBB    A,R5
   \   000072   40E1         JC      ??ZDO_BuildSimpleDescBuf_2
   2019          
   2020            *buf++ = desc->AppNumOutClusters;
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   AA82         MOV     R2,DPL
   \   000087   AB83         MOV     R3,DPH
   2021            ptr = desc->pAppOutClusterList;
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   12....       LCALL   ?Subroutine104 & 0xFFFF
   2022            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_439:
   \   000093   7C00         MOV     R4,#0x0
   \   000095   800E         SJMP    ??ZDO_BuildSimpleDescBuf_5
   2023            {
   2024              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_6:
   \   000097   12....       LCALL   ?Subroutine22 & 0xFFFF
   2025              *buf++ = LO_UINT16( *ptr );
   2026            }
   \                     ??CrossCallReturnLabel_22:
   \   00009A   5001         JNC     ??ZDO_BuildSimpleDescBuf_7
   \   00009C   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_7:
   \   00009D   E8           MOV     A,R0
   \   00009E   2402         ADD     A,#0x2
   \   0000A0   F8           MOV     R0,A
   \   0000A1   5001         JNC     ??ZDO_BuildSimpleDescBuf_8
   \   0000A3   09           INC     R1
   \                     ??ZDO_BuildSimpleDescBuf_8:
   \   0000A4   0C           INC     R4
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   FD           MOV     R5,A
   \   0000B4   EC           MOV     A,R4
   \   0000B5   C3           CLR     C
   \   0000B6   9D           SUBB    A,R5
   \   0000B7   40DE         JC      ??ZDO_BuildSimpleDescBuf_6
   2027          }
   \   0000B9   02....       LJMP    ??Subroutine215_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine240_0
   \   000004                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine241_0
   \   000001                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   000003   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000006   F0           MOVX    @DPTR,A
   \   000007   EA           MOV     A,R2
   \   000008   2402         ADD     A,#0x2
   \   00000A   FA           MOV     R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000007                REQUIRE ??Subroutine272_0
   \   000007                ; // Fall through to label ??Subroutine272_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine272_0:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_692:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   12....       LCALL   ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_698:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   2028          
   2029          /*********************************************************************
   2030           * @fn      ZDO_MatchEndDeviceBind()
   2031           *
   2032           * @brief
   2033           *
   2034           *   Called to match end device binding requests
   2035           *
   2036           * @param  bindReq  - binding request information
   2037           * @param  SecurityUse - Security enable/disable
   2038           *
   2039           * @return  none
   2040           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2041          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   2042          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   2043            zAddrType_t dstAddr;
   2044            uint8 sendRsp = FALSE;
   \   00000E   7E00         MOV     R6,#0x0
   2045            uint8 status;
   2046          
   2047            // Is this the first request?
   2048            if ( matchED == NULL )
   \   000010   90....       MOV     DPTR,#matchED
   \   000013   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   000016   7052         JNZ     ??ZDO_MatchEndDeviceBind_0
   2049            {
   2050              // Create match info structure
   2051              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7A37         MOV     R2,#0x37
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   90....       MOV     DPTR,#matchED
   \   000022   12....       LCALL   ?Subroutine21 & 0xFFFF
   2052              if ( matchED )
   \                     ??CrossCallReturnLabel_393:
   \   000025   90....       MOV     DPTR,#matchED
   \   000028   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   00002B   6019         JZ      ??ZDO_MatchEndDeviceBind_1
   2053              {
   2054                // Clear the structure
   2055                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00002D                ; Setup parameters for call to function osal_memset
   \   00002D   7C37         MOV     R4,#0x37
   \   00002F   7D00         MOV     R5,#0x0
   \   000031   7900         MOV     R1,#0x0
   \   000033   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2056          
   2057                // Copy the first request's information
   2058                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000036                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000036   AC..         MOV     R4,?V4
   \   000038   AD..         MOV     R5,?V5
   \   00003A   90....       MOV     DPTR,#matchED
   \   00003D   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   2059                {
   2060                  status = ZDP_NO_ENTRY;
   2061                  sendRsp = TRUE;
   2062                }
   2063              }
   \                     ??CrossCallReturnLabel_477:
   \   000040   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   000043   E9           MOV     A,R1
   \   000044   700B         JNZ     ??ZDO_MatchEndDeviceBind_2
   2064              else
   2065              {
   2066                status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   7488         MOV     A,#-0x78
   \   00004E   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2067                sendRsp = TRUE;
   2068              }
   2069          
   2070              if ( !sendRsp )
   2071              {
   2072                // Set into the correct state
   2073                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   000051   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   000054   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000057   7401         MOV     A,#0x1
   \   000059   F0           MOVX    @DPTR,A
   2074          
   2075                // Setup the timeout
   2076                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   00005A                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00005A   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   00005C   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   00005E   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000061   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   2077              }
   2078            }
   \                     ??CrossCallReturnLabel_478:
   \   000064   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   000067   02....       LJMP    ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   2079            else
   2080            {
   2081                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   C8           XCH     A,R0
   \   00006C   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   00006F   7402         MOV     A,#0x2
   \   000071   F0           MOVX    @DPTR,A
   2082          
   2083                // Copy the 2nd request's information
   2084                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   000072                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000072   AC..         MOV     R4,?V4
   \   000074   AD..         MOV     R5,?V5
   \   000076   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000079   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   00007C   E9           MOV     A,R1
   \   00007D   700B         JNZ     ??ZDO_MatchEndDeviceBind_5
   2085                {
   2086                  status = ZDP_NO_ENTRY;
   \   00007F   85..82       MOV     DPL,?XSP + 0
   \   000082   85..83       MOV     DPH,?XSP + 1
   \   000085   7488         MOV     A,#-0x78
   \   000087   F0           MOVX    @DPTR,A
   2087                  sendRsp = TRUE;
   \   000088   7E01         MOV     R6,#0x1
   2088                }
   2089          
   2090                // Make a source match for ed1
   2091                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2092                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2093                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   00008A                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   00008A   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   00008D   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000090   78..         MOV     R0,#?V0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000098   F582         MOV     DPL,A
   \   00009A   E4           CLR     A
   \   00009B   38           ADDC    A,R0
   \   00009C   F583         MOV     DPH,A
   \   00009E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000A1   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   0000A4   2428         ADD     A,#0x28
   \   0000A6   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   0000A9   FC           MOV     R4,A
   \   0000AA   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000AD   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   0000B0   2414         ADD     A,#0x14
   \   0000B2   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   0000B5   F9           MOV     R1,A
   \   0000B6   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   0000B9   7404         MOV     A,#0x4
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BE   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   0000C1   12....       LCALL   ?Subroutine25 & 0xFFFF
   2094                if ( matchED->ed1numMatched )
   \                     ??CrossCallReturnLabel_534:
   \   0000C4   2431         ADD     A,#0x31
   \   0000C6   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   0000C9   6045         JZ      ??ZDO_MatchEndDeviceBind_6
   \   0000CB                ; Setup parameters for call to function osal_mem_alloc
   \   0000CB   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000CE   FA           MOV     R2,A
   \   0000CF   E4           CLR     A
   \   0000D0   33           RLC     A
   \   0000D1   FB           MOV     R3,A
   2095                {
   2096                  // Save the match list
   2097                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000D2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000D5   EA           MOV     A,R2
   \   0000D6   F8           MOV     R0,A
   \   0000D7   EB           MOV     A,R3
   \   0000D8   F9           MOV     R1,A
   \   0000D9   90....       MOV     DPTR,#matchED
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   FC           MOV     R4,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   CC           XCH     A,R4
   \   0000E1   2432         ADD     A,#0x32
   \   0000E3   12....       LCALL   ?Subroutine41 & 0xFFFF
   2098                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_566:
   \   0000E6   4B           ORL     A,R3
   \   0000E7   601C         JZ      ??ZDO_MatchEndDeviceBind_7
   2099                  {
   2100                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000E9                ; Setup parameters for call to function osal_memcpy
   \   0000E9   75..00       MOV     ?V2,#0x0
   \   0000EC   78..         MOV     R0,#?V0
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F1   12....       LCALL   ?Subroutine54 & 0xFFFF
   2101                  }
   \                     ??CrossCallReturnLabel_81:
   \   0000F4   FC           MOV     R4,A
   \   0000F5   E4           CLR     A
   \   0000F6   33           RLC     A
   \   0000F7   FD           MOV     R5,A
   \   0000F8   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   0000FB   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000FE   7403         MOV     A,#0x3
   \   000100   12....       LCALL   ?DEALLOC_XSTACK8
   \   000103   800B         SJMP    ??ZDO_MatchEndDeviceBind_6
   2102                  else
   2103                  {
   2104                    // Allocation error, stop
   2105                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   000105   85..82       MOV     DPL,?XSP + 0
   \   000108   85..83       MOV     DPH,?XSP + 1
   \   00010B   7488         MOV     A,#-0x78
   \   00010D   F0           MOVX    @DPTR,A
   2106                    sendRsp = TRUE;
   \   00010E   7E01         MOV     R6,#0x1
   2107                  }
   2108                }
   2109          
   2110                // Make a source match for ed2
   2111                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2112                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2113                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   000110                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000110   78..         MOV     R0,#?V0
   \   000112   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000115   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000118   F582         MOV     DPL,A
   \   00011A   E4           CLR     A
   \   00011B   38           ADDC    A,R0
   \   00011C   F583         MOV     DPH,A
   \   00011E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000121   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_592:
   \   000124   2411         ADD     A,#0x11
   \   000126   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000129   FC           MOV     R4,A
   \   00012A   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00012D   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   000130   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   000133   242B         ADD     A,#0x2b
   \   000135   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000138   F9           MOV     R1,A
   \   000139   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   00013C   7404         MOV     A,#0x4
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000141   E9           MOV     A,R1
   \   000142   F8           MOV     R0,A
   \   000143   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   000146   2434         ADD     A,#0x34
   \   000148   12....       LCALL   ?Subroutine25 & 0xFFFF
   2114                if ( matchED->ed2numMatched )
   \                     ??CrossCallReturnLabel_535:
   \   00014B   2434         ADD     A,#0x34
   \   00014D   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000150   603D         JZ      ??ZDO_MatchEndDeviceBind_8
   \   000152                ; Setup parameters for call to function osal_mem_alloc
   \   000152   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000155   FA           MOV     R2,A
   \   000156   E4           CLR     A
   \   000157   33           RLC     A
   \   000158   FB           MOV     R3,A
   2115                {
   2116                  // Save the match list
   2117                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000159   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00015C   EA           MOV     A,R2
   \   00015D   F8           MOV     R0,A
   \   00015E   EB           MOV     A,R3
   \   00015F   F9           MOV     R1,A
   \   000160   90....       MOV     DPTR,#matchED
   \   000163   E0           MOVX    A,@DPTR
   \   000164   FC           MOV     R4,A
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   CC           XCH     A,R4
   \   000168   2435         ADD     A,#0x35
   \   00016A   12....       LCALL   ?Subroutine41 & 0xFFFF
   2118                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_567:
   \   00016D   4B           ORL     A,R3
   \   00016E   6040         JZ      ??ZDO_MatchEndDeviceBind_9
   2119                  {
   2120                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000170                ; Setup parameters for call to function osal_memcpy
   \   000170   75..00       MOV     ?V2,#0x0
   \   000173   78..         MOV     R0,#?V0
   \   000175   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000178   12....       LCALL   ?Subroutine55 & 0xFFFF
   2121                  }
   \                     ??CrossCallReturnLabel_84:
   \   00017B   FC           MOV     R4,A
   \   00017C   E4           CLR     A
   \   00017D   33           RLC     A
   \   00017E   FD           MOV     R5,A
   \   00017F   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   000182   2435         ADD     A,#0x35
   \   000184   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   000187   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00018A   7403         MOV     A,#0x3
   \   00018C   12....       LCALL   ?DEALLOC_XSTACK8
   2122                  else
   2123                  {
   2124                    // Allocation error, stop
   2125                    status = ZDP_NO_ENTRY;
   2126                    sendRsp = TRUE;
   2127                  }
   2128                }
   2129          
   2130                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   00018F   EE           MOV     A,R6
   \   000190   A2E0         MOV     C,0xE0 /* A   */.0
   \   000192   4025         JC      ??ZDO_MatchEndDeviceBind_10
   \   000194   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000197   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   00019A   7008         JNZ     ??ZDO_MatchEndDeviceBind_11
   \   00019C   90....       MOV     DPTR,#matchED
   \   00019F   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0001A2   6015         JZ      ??ZDO_MatchEndDeviceBind_10
   2131                {
   2132                  // Do the first unbind/bind state
   2133                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   0001A4                ; Setup parameters for call to function ZDMatchSendState
   \   0001A4   7B00         MOV     R3,#0x0
   \   0001A6   7A00         MOV     R2,#0x0
   \   0001A8   7900         MOV     R1,#0x0
   \   0001AA   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2134                }
   2135                else
   2136                {
   2137                  status = ZDP_NO_MATCH;
   2138                  sendRsp = TRUE;
   2139                }
   2140            }
   2141          
   2142            if ( sendRsp )
   \   0001AD   02....       LJMP    ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   0001B0   85..82       MOV     DPL,?XSP + 0
   \   0001B3   85..83       MOV     DPH,?XSP + 1
   \   0001B6   7488         MOV     A,#-0x78
   \   0001B8   F0           MOVX    @DPTR,A
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   0001B9   85..82       MOV     DPL,?XSP + 0
   \   0001BC   85..83       MOV     DPH,?XSP + 1
   \   0001BF   7486         MOV     A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   0001C1   F0           MOVX    @DPTR,A
   2143            {
   2144              // send response to this requester
   2145              dstAddr.addrMode = Addr16Bit;
   \   0001C2   7409         MOV     A,#0x9
   \   0001C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C7   7402         MOV     A,#0x2
   \   0001C9   12....       LCALL   ?Subroutine159 & 0xFFFF
   2146              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \                     ??CrossCallReturnLabel_270:
   \   0001CC   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   0001CF   7401         MOV     A,#0x1
   \   0001D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D4   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   2147              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_447:
   \   0001D7                ; Setup parameters for call to function ZDP_SendData
   \   0001D7   85..82       MOV     DPL,?V4
   \   0001DA   85..83       MOV     DPH,?V5
   \   0001DD   A3           INC     DPTR
   \   0001DE   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   0001E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E4   7401         MOV     A,#0x1
   \   0001E6   12....       LCALL   ?XSTACK_DISP100_8
   \   0001E9   88..         MOV     ?V0,R0
   \   0001EB   89..         MOV     ?V1,R1
   \   0001ED   78..         MOV     R0,#?V0
   \   0001EF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F2   75..20       MOV     ?V0,#0x20
   \   0001F5   75..80       MOV     ?V1,#-0x80
   \   0001F8   78..         MOV     R0,#?V0
   \   0001FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FD   7901         MOV     R1,#0x1
   \   0001FF   7406         MOV     A,#0x6
   \   000201   12....       LCALL   ?XSTACK_DISP102_8
   \   000204   AA..         MOV     R2,?V4
   \   000206   AB..         MOV     R3,?V5
   \   000208   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00020B   7405         MOV     A,#0x5
   \   00020D   12....       LCALL   ?DEALLOC_XSTACK8
   2148          
   2149              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   000210   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000213   704A         JNZ     ??ZDO_MatchEndDeviceBind_12
   2150              {
   2151                // send response to first requester
   2152                dstAddr.addrMode = Addr16Bit;
   \   000215   7409         MOV     A,#0x9
   \   000217   12....       LCALL   ?XSTACK_DISP0_8
   \   00021A   7402         MOV     A,#0x2
   \   00021C   12....       LCALL   ?Subroutine50 & 0xFFFF
   2153                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2154                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2155              }
   \                     ??CrossCallReturnLabel_73:
   \   00021F   F583         MOV     DPH,A
   \   000221   8882         MOV     DPL,R0
   \   000223   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000226   7401         MOV     A,#0x1
   \   000228   12....       LCALL   ?XSTACK_DISP0_8
   \   00022B   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00022E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000231   7401         MOV     A,#0x1
   \   000233   12....       LCALL   ?XSTACK_DISP100_8
   \   000236   88..         MOV     ?V0,R0
   \   000238   89..         MOV     ?V1,R1
   \   00023A   78..         MOV     R0,#?V0
   \   00023C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023F   75..20       MOV     ?V0,#0x20
   \   000242   75..80       MOV     ?V1,#-0x80
   \   000245   78..         MOV     R0,#?V0
   \   000247   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024A   7901         MOV     R1,#0x1
   \   00024C   7406         MOV     A,#0x6
   \   00024E   12....       LCALL   ?XSTACK_DISP102_8
   \   000251   90....       MOV     DPTR,#matchED
   \   000254   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   000257   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00025A   7405         MOV     A,#0x5
   \   00025C   12....       LCALL   ?DEALLOC_XSTACK8
   2156          
   2157              // Process ended - release memory used
   2158              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   00025F                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00025F   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2159            }
   2160          }
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   000262   740A         MOV     A,#0xa
   \   000264   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   12....       LCALL   ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine201:
   \   000000   242E         ADD     A,#0x2e
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine242_0
   \   000003                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_613:
   \   000003   2431         ADD     A,#0x31
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000003   2432         ADD     A,#0x32
   \   000005                REQUIRE ??Subroutine243_0
   \   000005                ; // Fall through to label ??Subroutine243_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine248_0
   \   000006                ; // Fall through to label ??Subroutine248_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000003   C8           XCH     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine249_0
   \   000001                ; // Fall through to label ??Subroutine249_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   90....       MOV     DPTR,#matchED
   \   000004   12....       LCALL   ?Subroutine211 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_611:
   \   000003   242C         ADD     A,#0x2c
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_610:
   \   000003   2412         ADD     A,#0x12
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   000003   2429         ADD     A,#0x29
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   000003   2415         ADD     A,#0x15
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   12....       LCALL   ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine250_0
   \   000002                ; // Fall through to label ??Subroutine250_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2417         ADD     A,#0x17
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine255_0
   \   000003                ; // Fall through to label ??Subroutine255_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   000003   12....       LCALL   ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   6402         XRL     A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   12....       LCALL   ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   000003   2434         ADD     A,#0x34
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000006   25E0         ADD     A,0xE0 /* A   */
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   25E0         ADD     A,0xE0 /* A   */
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_616:
   \   000006   2431         ADD     A,#0x31
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   38           ADDC    A,R0
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   000006   F583         MOV     DPH,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0,A
   \   00000E   78..         MOV     R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3C           ADDC    A,R4
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine257_0
   \   000006                ; // Fall through to label ??Subroutine257_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine257_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine258_0
   \   000001                ; // Fall through to label ??Subroutine258_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine258_0:
   \   000000   12....       LCALL   ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_705:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine261_0
   \   000003                ; // Fall through to label ??Subroutine261_0
   2161          
   2162          /*********************************************************************
   2163           * @fn      ZDO_RemoveMatchMemory()
   2164           *
   2165           * @brief   Called to clear the memory used for the end device bind.
   2166           *
   2167           * @param  none
   2168           *
   2169           * @return  none
   2170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2171          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2172          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2173            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   00000A   6077         JZ      ??ZDO_RemoveMatchMemory_0
   2174            {
   2175              if ( matchED->ed2Matched != NULL )
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   C8           XCH     A,R0
   \   00000E   2435         ADD     A,#0x35
   \   000010   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   000013   600B         JZ      ??ZDO_RemoveMatchMemory_1
   2176              {
   2177                osal_mem_free( matchED->ed2Matched );
   \   000015                ; Setup parameters for call to function osal_mem_free
   \   000015   12....       LCALL   ?Subroutine96 & 0xFFFF
   2178              }
   \                     ??CrossCallReturnLabel_596:
   \   000018   2435         ADD     A,#0x35
   \   00001A   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   00001D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2179              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_1:
   \   000020   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   000023   2432         ADD     A,#0x32
   \   000025   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   000028   6006         JZ      ??ZDO_RemoveMatchMemory_2
   2180              {
   2181                osal_mem_free( matchED->ed1Matched );
   \   00002A                ; Setup parameters for call to function osal_mem_free
   \   00002A   12....       LCALL   ?Subroutine71 & 0xFFFF
   2182              }
   \                     ??CrossCallReturnLabel_500:
   \   00002D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2183              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_2:
   \   000030   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000033   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000036   6009         JZ      ??ZDO_RemoveMatchMemory_3
   2184              {
   2185                osal_mem_free( matchED->ed1.inClusters );
   \   000038                ; Setup parameters for call to function osal_mem_free
   \   000038   12....       LCALL   ?Subroutine94 & 0xFFFF
   2186              }
   \                     ??CrossCallReturnLabel_159:
   \   00003B   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   00003E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2187              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   000041   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   000044   2415         ADD     A,#0x15
   \   000046   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000049   6006         JZ      ??ZDO_RemoveMatchMemory_4
   2188              {
   2189                osal_mem_free( matchED->ed1.outClusters );
   \   00004B                ; Setup parameters for call to function osal_mem_free
   \   00004B   12....       LCALL   ?Subroutine70 & 0xFFFF
   2190              }
   \                     ??CrossCallReturnLabel_116:
   \   00004E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2191              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   000051   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000054   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   000057   6009         JZ      ??ZDO_RemoveMatchMemory_5
   2192              {
   2193                osal_mem_free( matchED->ed2.inClusters );
   \   000059                ; Setup parameters for call to function osal_mem_free
   \   000059   12....       LCALL   ?Subroutine92 & 0xFFFF
   2194              }
   \                     ??CrossCallReturnLabel_156:
   \   00005C   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   00005F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2195              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000062   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000065   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   000068   6009         JZ      ??ZDO_RemoveMatchMemory_6
   2196              {
   2197                osal_mem_free( matchED->ed2.outClusters );
   \   00006A                ; Setup parameters for call to function osal_mem_free
   \   00006A   12....       LCALL   ?Subroutine95 & 0xFFFF
   2198              }
   \                     ??CrossCallReturnLabel_162:
   \   00006D   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000070   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2199          
   2200              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_6:
   \   000073                ; Setup parameters for call to function osal_mem_free
   \   000073   90....       MOV     DPTR,#matchED
   \   000076   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   000079   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2201              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \   00007C   90....       MOV     DPTR,#matchED
   \   00007F   E4           CLR     A
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   F0           MOVX    @DPTR,A
   2202            }
   2203          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   000083                REQUIRE ?Subroutine0
   \   000083                ; // Fall through to label ?Subroutine0
   2204          
   2205          /*********************************************************************
   2206           * @fn      ZDO_CopyMatchInfo()
   2207           *
   2208           * @brief   Called to copy memory used for the end device bind.
   2209           *
   2210           * @param  srcReq - source information
   2211           * @param  dstReq - destination location
   2212           *
   2213           * @return  TRUE if copy was successful.
   2214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2215          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2216          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   2217            uint8 allOK = TRUE;
   \   00000D   75..01       MOV     ?V3,#0x1
   2218          
   2219            // Copy bind information into the match info structure
   2220            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8C..         MOV     ?V0,R4
   \   000012   8D..         MOV     ?V1,R5
   \   000014   75..00       MOV     ?V2,#0x0
   \   000017   78..         MOV     R0,#?V0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001C   7C17         MOV     R4,#0x17
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000023   7403         MOV     A,#0x3
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   2221          
   2222            // Initialize the destination cluster pointers
   2223            destReq->inClusters = NULL;
   \   000028   EE           MOV     A,R6
   \   000029   2412         ADD     A,#0x12
   \   00002B   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   F0           MOVX    @DPTR,A
   2224            destReq->outClusters = NULL;
   \   000031   EE           MOV     A,R6
   \   000032   2415         ADD     A,#0x15
   \   000034   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   F0           MOVX    @DPTR,A
   2225          
   2226            // Copy input cluster IDs
   2227            if ( srcReq->numInClusters )
   \   00003A   E5..         MOV     A,?V4
   \   00003C   2411         ADD     A,#0x11
   \   00003E   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000041   603A         JZ      ??ZDO_CopyMatchInfo_0
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   12....       LCALL   ??Subroutine274_0 & 0xFFFF
   2228            {
   2229              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \                     ??CrossCallReturnLabel_709:
   \   000046   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000049   8A..         MOV     ?V0,R2
   \   00004B   8B..         MOV     ?V1,R3
   \   00004D   A8..         MOV     R0,?V0
   \   00004F   A9..         MOV     R1,?V1
   \   000051   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000054   12....       LCALL   ??Subroutine253_0 & 0xFFFF
   2230              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_554:
   \   000057   6021         JZ      ??ZDO_CopyMatchInfo_1
   2231              {
   2232                // Copy the clusters
   2233                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2234                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   000059                ; Setup parameters for call to function osal_memcpy
   \   000059   E5..         MOV     A,?V4
   \   00005B   2412         ADD     A,#0x12
   \   00005D   12....       LCALL   ?Subroutine109 & 0xFFFF
   2235              }
   \                     ??CrossCallReturnLabel_181:
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000063   E5..         MOV     A,?V4
   \   000065   2411         ADD     A,#0x11
   \   000067   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   00006A   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   00006D   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000070   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000073   7403         MOV     A,#0x3
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   8003         SJMP    ??ZDO_CopyMatchInfo_0
   2236              else
   2237              {
   2238                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   00007A   75..00       MOV     ?V3,#0x0
   2239              }
   2240            }
   2241          
   2242            // Copy output cluster IDs
   2243            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   00007D   E5..         MOV     A,?V4
   \   00007F   2414         ADD     A,#0x14
   \   000081   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000084   6035         JZ      ??ZDO_CopyMatchInfo_2
   \   000086                ; Setup parameters for call to function osal_mem_alloc
   \   000086   12....       LCALL   ??Subroutine274_0 & 0xFFFF
   2244            {
   2245              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \                     ??CrossCallReturnLabel_710:
   \   000089   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00008C   8A..         MOV     ?V0,R2
   \   00008E   8B..         MOV     ?V1,R3
   \   000090   A8..         MOV     R0,?V0
   \   000092   A9..         MOV     R1,?V1
   \   000094   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   000097   12....       LCALL   ??Subroutine253_0 & 0xFFFF
   2246              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_555:
   \   00009A   604C         JZ      ??ZDO_CopyMatchInfo_3
   2247              {
   2248                // Copy the clusters
   2249                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2250                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   00009C                ; Setup parameters for call to function osal_memcpy
   \   00009C   E5..         MOV     A,?V4
   \   00009E   2415         ADD     A,#0x15
   \   0000A0   12....       LCALL   ?Subroutine109 & 0xFFFF
   2251              }
   \                     ??CrossCallReturnLabel_182:
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A6   E5..         MOV     A,?V4
   \   0000A8   2414         ADD     A,#0x14
   \   0000AA   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0000AD   12....       LCALL   ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   0000B0   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   0000B3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000B6   7403         MOV     A,#0x3
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   2252              else
   2253              {
   2254                allOK = FALSE;
   2255              }
   2256            }
   2257          
   2258            if ( allOK == FALSE )
   \                     ??ZDO_CopyMatchInfo_2:
   \   0000BB   E5..         MOV     A,?V3
   \   0000BD   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000BF   4022         JC      ??ZDO_CopyMatchInfo_4
   2259            {
   2260              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_5:
   \   0000C1   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   0000C4   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   0000C7   6009         JZ      ??ZDO_CopyMatchInfo_6
   2261              {
   2262                osal_mem_free( destReq->inClusters );
   \   0000C9                ; Setup parameters for call to function osal_mem_free
   \   0000C9   12....       LCALL   ?Subroutine149 & 0xFFFF
   2263              }
   \                     ??CrossCallReturnLabel_372:
   \   0000CC   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   0000CF   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2264              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_6:
   \   0000D2   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   0000D5   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   0000D8   6009         JZ      ??ZDO_CopyMatchInfo_4
   2265              {
   2266                osal_mem_free( destReq->outClusters );
   \   0000DA                ; Setup parameters for call to function osal_mem_free
   \   0000DA   12....       LCALL   ?Subroutine147 & 0xFFFF
   2267              }
   2268            }
   \                     ??CrossCallReturnLabel_547:
   \   0000DD   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   0000E0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2269          
   2270            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_4:
   \   0000E3   A9..         MOV     R1,?V3
   \   0000E5   02....       LJMP    ??Subroutine276_0 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_3:
   \   0000E8   75..00       MOV     ?V3,#0x0
   \   0000EB   80D4         SJMP    ??ZDO_CopyMatchInfo_5
   2271          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine251_0
   \   000001                ; // Fall through to label ??Subroutine251_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine251_0:
   \   000000   2415         ADD     A,#0x15
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V5
   \   000005   F583         MOV     DPH,A
   \   000007   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   00000A   EE           MOV     A,R6
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000003   F5..         MOV     ?V0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V1,A
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine253_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine254_0
   \   000002                ; // Fall through to label ??Subroutine254_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine254_0:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_704:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET
   2272          
   2273          /*********************************************************************
   2274           * @fn      ZDMatchSendState()
   2275           *
   2276           * @brief   State machine for the End device match message algorithm.
   2277           *
   2278           * @param  reason - state of algoritm
   2279           * @param  status - initial message status
   2280           * @param  TransSeq - next transaction sequence number
   2281           *
   2282           * @return  FALSE if error and we are not currently matching, TRUE
   2283           *          if success.
   2284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2285          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   EB           MOV     A,R3
   \   000017   F0           MOVX    @DPTR,A
   \   000018   89..         MOV     ?V2,R1
   2287            uint8 *dstIEEEAddr = NULL;
   \   00001A   75..00       MOV     ?V4,#0x0
   \   00001D   75..00       MOV     ?V5,#0x0
   2288            uint8 dstEP = 0xFF;
   \   000020   75..FF       MOV     ?V3,#-0x1
   2289            zAddrType_t dstAddr;
   2290            zAddrType_t destinationAddr;
   2291            uint16 msgType;
   2292            uint16 clusterID = 0xFFFF;
   \   000023   7EFF         MOV     R6,#-0x1
   \   000025   7FFF         MOV     R7,#-0x1
   2293            ZDEndDeviceBind_t *ed = NULL;
   \   000027   75..00       MOV     ?V6,#0x0
   \   00002A   75..00       MOV     ?V7,#0x0
   2294            uint8 rspStatus = ZDP_SUCCESS;
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   E4           CLR     A
   \   000034   12....       LCALL   ?Subroutine50 & 0xFFFF
   2295          
   2296            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_74:
   \   000037   F9           MOV     R1,A
   \   000038   E8           MOV     A,R0
   \   000039   49           ORL     A,R1
   \   00003A   6020         JZ      ??ZDMatchSendState_0
   2297            {
   2298              return ( FALSE );
   2299            }
   2300          
   2301            // Check sequence number
   2302            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \   00003C   7403         MOV     A,#0x3
   \   00003E   65..         XRL     A,?V2
   \   000040   6006         JZ      ??ZDMatchSendState_1
   \   000042   7402         MOV     A,#0x2
   \   000044   65..         XRL     A,?V2
   \   000046   7019         JNZ     ??ZDMatchSendState_2
   2303            {
   2304              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_1:
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   90....       MOV     DPTR,#matchED + 1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   C8           XCH     A,R0
   \   000054   2430         ADD     A,#0x30
   \   000056   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000059   69           XRL     A,R1
   \   00005A   6005         JZ      ??ZDMatchSendState_2
   2305              {
   2306                return( FALSE ); // ignore the message
   \                     ??ZDMatchSendState_0:
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   02....       LJMP    ??ZDMatchSendState_3 & 0xFFFF
   2307              }
   2308            }
   2309          
   2310            // turn off timer
   2311            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_2:
   \   000061                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000061   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000063   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000065   7A00         MOV     R2,#0x0
   \   000067   7B00         MOV     R3,#0x0
   \   000069   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   2312          
   2313            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   00006C   7401         MOV     A,#0x1
   \   00006E   65..         XRL     A,?V2
   \   000070   700A         JNZ     ??ZDMatchSendState_4
   2314            {
   2315              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   7485         MOV     A,#-0x7b
   \   00007A   8045         SJMP    ??ZDMatchSendState_5
   2316            }
   2317          
   2318            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_4:
   \   00007C   E5..         MOV     A,?V2
   \   00007E   6006         JZ      ??ZDMatchSendState_6
   \   000080   7403         MOV     A,#0x3
   \   000082   65..         XRL     A,?V2
   \   000084   701D         JNZ     ??ZDMatchSendState_7
   2319            {
   2320              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_6:
   \   000086   90....       MOV     DPTR,#matchED
   \   000089   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00008C   F0           MOVX    @DPTR,A
   2321          
   2322              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   00008D   7403         MOV     A,#0x3
   \   00008F   65..         XRL     A,?V2
   \   000091   7031         JNZ     ??ZDMatchSendState_8
   \   000093   7401         MOV     A,#0x1
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E0           MOVX    A,@DPTR
   \   000099   602D         JZ      ??ZDMatchSendState_9
   2323              {
   2324                rspStatus = status;
   \   00009B   85..82       MOV     DPL,?XSP + 0
   \   00009E   85..83       MOV     DPH,?XSP + 1
   \   0000A1   801E         SJMP    ??ZDMatchSendState_5
   2325              }
   2326            }
   2327            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_7:
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   65..         XRL     A,?V2
   \   0000A7   701F         JNZ     ??ZDMatchSendState_9
   2328            {
   2329              if ( status == ZDP_SUCCESS )
   \   0000A9   7401         MOV     A,#0x1
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   90....       MOV     DPTR,#matchED
   \   0000B2   7005         JNZ     ??ZDMatchSendState_10
   2330              {
   2331                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   0000B4   12....       LCALL   ?Subroutine79 & 0xFFFF
   2332              }
   \                     ??CrossCallReturnLabel_130:
   \   0000B7   8008         SJMP    ??ZDMatchSendState_5
   2333              else
   2334              {
   2335                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_10:
   \   0000B9   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   2336              }
   2337            }
   \                     ??CrossCallReturnLabel_586:
   \   0000BC   12....       LCALL   ?Subroutine209 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   0000BF   7402         MOV     A,#0x2
   \                     ??ZDMatchSendState_5:
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   8004         SJMP    ??ZDMatchSendState_9
   2338          
   2339            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_8:
   \   0000C4   E5..         MOV     A,?V2
   \   0000C6   601E         JZ      ??ZDMatchSendState_11
   \                     ??ZDMatchSendState_9:
   \   0000C8   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0000CB   7019         JNZ     ??ZDMatchSendState_11
   2340            {
   2341              // Move to the next cluster ID
   2342              if ( matchED->ed1numMatched )
   \   0000CD   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0000D0   6005         JZ      ??ZDMatchSendState_12
   2343              {
   2344                matchED->ed1numMatched--;
   \   0000D2   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   2345              }
   \                     ??CrossCallReturnLabel_458:
   \   0000D5   800A         SJMP    ??ZDMatchSendState_13
   2346              else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_12:
   \   0000D7   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000DA   600A         JZ      ??ZDMatchSendState_11
   2347              {
   2348                matchED->ed2numMatched--;
   \   0000DC   12....       LCALL   ?Subroutine96 & 0xFFFF
   2349              }
   2350            }
   \                     ??CrossCallReturnLabel_599:
   \   0000DF   2434         ADD     A,#0x34
   \                     ??ZDMatchSendState_13:
   \   0000E1   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   0000E4   2E           ADD     A,R6
   \   0000E5   F0           MOVX    @DPTR,A
   2351          
   2352            // What message do we send now
   2353            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_11:
   \   0000E6   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0000E9   601C         JZ      ??ZDMatchSendState_14
   2354            {
   2355              ed = &(matchED->ed1);
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F5..         MOV     ?V6,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F5..         MOV     ?V7,A
   2356              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \   0000F2   12....       LCALL   ?Subroutine54 & 0xFFFF
   2357              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2358              dstEP = matchED->ed2.endpoint;
   2359            }
   \                     ??CrossCallReturnLabel_82:
   \   0000F5   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   0000F8   CA           XCH     A,R2
   \   0000F9   2432         ADD     A,#0x32
   \   0000FB   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0000FE   241D         ADD     A,#0x1d
   \   000100   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000103   2425         ADD     A,#0x25
   \   000105   8026         SJMP    ??ZDMatchSendState_15
   2360            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_14:
   \   000107   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00010A   6026         JZ      ??ZDMatchSendState_16
   2361            {
   2362              ed = &(matchED->ed2);
   \   00010C   90....       MOV     DPTR,#matchED
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   2417         ADD     A,#0x17
   \   000112   F5..         MOV     ?V6,A
   \   000114   A3           INC     DPTR
   \   000115   E0           MOVX    A,@DPTR
   \   000116   3400         ADDC    A,#0x0
   \   000118   F5..         MOV     ?V7,A
   2363              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \   00011A   12....       LCALL   ?Subroutine55 & 0xFFFF
   2364              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2365              dstEP = matchED->ed1.endpoint;
   2366            }
   \                     ??CrossCallReturnLabel_85:
   \   00011D   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   000120   CA           XCH     A,R2
   \   000121   2435         ADD     A,#0x35
   \   000123   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000126   2406         ADD     A,#0x6
   \   000128   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00012B   240E         ADD     A,#0xe
   \                     ??ZDMatchSendState_15:
   \   00012D   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000130   F5..         MOV     ?V3,A
   2367          
   2368            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_16:
   \   000132   740B         MOV     A,#0xb
   \   000134   12....       LCALL   ?XSTACK_DISP0_8
   \   000137   7402         MOV     A,#0x2
   \   000139   12....       LCALL   ?Subroutine33 & 0xFFFF
   2369          
   2370            // Send the next message
   2371            if ( (rspStatus == ZDP_SUCCESS) && ed )
   \                     ??CrossCallReturnLabel_47:
   \   00013C   6003         JZ      $+5
   \   00013E   02....       LJMP    ??ZDMatchSendState_17 & 0xFFFF
   \   000141   E5..         MOV     A,?V6
   \   000143   45..         ORL     A,?V7
   \   000145   7003         JNZ     $+5
   \   000147   02....       LJMP    ??ZDMatchSendState_17 & 0xFFFF
   2372            {
   2373              // Send unbind/bind message to source
   2374              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   00014A   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00014D   7005         JNZ     ??ZDMatchSendState_18
   2375              {
   2376                msgType = Unbind_req;
   \   00014F   75..22       MOV     ?V0,#0x22
   \   000152   8003         SJMP    ??ZDMatchSendState_19
   2377              }
   2378              else
   2379              {
   2380                msgType = Bind_req;
   \                     ??ZDMatchSendState_18:
   \   000154   75..21       MOV     ?V0,#0x21
   \                     ??ZDMatchSendState_19:
   \   000157   75..00       MOV     ?V1,#0x0
   2381              }
   2382          
   2383              dstAddr.addr.shortAddr = ed->srcAddr;
   \   00015A   85..82       MOV     DPL,?V6
   \   00015D   85..83       MOV     DPH,?V7
   \   000160   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000163   7403         MOV     A,#0x3
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   2384          
   2385              // Save off the transaction sequence number
   2386              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_448:
   \   00016B   90....       MOV     DPTR,#ZDP_TransID
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   C0E0         PUSH    A
   \   000171   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   000174   2430         ADD     A,#0x30
   \   000176   F582         MOV     DPL,A
   \   000178   E4           CLR     A
   \   000179   38           ADDC    A,R0
   \   00017A   F583         MOV     DPH,A
   \   00017C   D0E0         POP     A
   \   00017E   F0           MOVX    @DPTR,A
   2387          
   2388              destinationAddr.addrMode = Addr64Bit;
   \   00017F   7414         MOV     A,#0x14
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   7403         MOV     A,#0x3
   \   000186   F0           MOVX    @DPTR,A
   2389              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000187                ; Setup parameters for call to function sAddrExtCpy
   \   000187   AC..         MOV     R4,?V4
   \   000189   AD..         MOV     R5,?V5
   \   00018B   740C         MOV     A,#0xc
   \   00018D   12....       LCALL   ?XSTACK_DISP101_8
   \   000190   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2390          
   2391              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2392                  &destinationAddr, dstEP, ed->SecurityUse );
   \   000193                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000193   85..82       MOV     DPL,?V6
   \   000196   85..83       MOV     DPH,?V7
   \   000199   A3           INC     DPTR
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   F5..         MOV     ?V4,A
   \   00019D   78..         MOV     R0,#?V4
   \   00019F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A2   78..         MOV     R0,#?V3
   \   0001A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A7   740E         MOV     A,#0xe
   \   0001A9   12....       LCALL   ?XSTACK_DISP100_8
   \   0001AC   88..         MOV     ?V4,R0
   \   0001AE   89..         MOV     ?V5,R1
   \   0001B0   78..         MOV     R0,#?V4
   \   0001B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B5   8E..         MOV     ?V4,R6
   \   0001B7   8F..         MOV     ?V5,R7
   \   0001B9   78..         MOV     R0,#?V4
   \   0001BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BE   E5..         MOV     A,?V6
   \   0001C0   2406         ADD     A,#0x6
   \   0001C2   F5..         MOV     ?V4,A
   \   0001C4   E4           CLR     A
   \   0001C5   35..         ADDC    A,?V7
   \   0001C7   F5..         MOV     ?V5,A
   \   0001C9   78..         MOV     R0,#?V4
   \   0001CB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CE   E5..         MOV     A,?V6
   \   0001D0   12....       LCALL   ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_627:
   \   0001D3   35..         ADDC    A,?V7
   \   0001D5   F583         MOV     DPH,A
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F9           MOV     R1,A
   \   0001D9   740B         MOV     A,#0xb
   \   0001DB   12....       LCALL   ?XSTACK_DISP102_8
   \   0001DE   AA..         MOV     R2,?V0
   \   0001E0   AB..         MOV     R3,?V1
   \   0001E2   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001E5   7408         MOV     A,#0x8
   \   0001E7   12....       LCALL   ?DEALLOC_XSTACK8
   2393          
   2394              // Set timeout for response
   2395              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001EA                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001EA   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   0001EC   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   0001EE   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   0001F1   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   2396            }
   \                     ??CrossCallReturnLabel_481:
   \   0001F4   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   0001F7   02....       LJMP    ??ZDMatchSendState_20 & 0xFFFF
   2397            else
   2398            {
   2399              // Send the response messages to requesting devices
   2400              // send response to first requester
   2401              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_17:
   \   0001FA   90....       MOV     DPTR,#matchED
   \   0001FD   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000200   7403         MOV     A,#0x3
   \   000202   12....       LCALL   ?XSTACK_DISP0_8
   \   000205   12....       LCALL   ?Subroutine14 & 0xFFFF
   2402              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_11:
   \   000208   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00020B   7401         MOV     A,#0x1
   \   00020D   12....       LCALL   ?XSTACK_DISP100_8
   \   000210   88..         MOV     ?V0,R0
   \   000212   89..         MOV     ?V1,R1
   \   000214   78..         MOV     R0,#?V0
   \   000216   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000219   75..20       MOV     ?V0,#0x20
   \   00021C   75..80       MOV     ?V1,#-0x80
   \   00021F   78..         MOV     R0,#?V0
   \   000221   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000224   7901         MOV     R1,#0x1
   \   000226   7408         MOV     A,#0x8
   \   000228   12....       LCALL   ?XSTACK_DISP102_8
   \   00022B   90....       MOV     DPTR,#matchED
   \   00022E   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   000231   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000234   7405         MOV     A,#0x5
   \   000236   12....       LCALL   ?DEALLOC_XSTACK8
   2403          
   2404              // send response to second requester
   2405              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   000239   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00023C   7050         JNZ     ??ZDMatchSendState_21
   2406              {
   2407                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   00023E   12....       LCALL   ?Subroutine96 & 0xFFFF
   2408                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2409              }
   \                     ??CrossCallReturnLabel_601:
   \   000241   2419         ADD     A,#0x19
   \   000243   F582         MOV     DPL,A
   \   000245   E4           CLR     A
   \   000246   38           ADDC    A,R0
   \   000247   F583         MOV     DPH,A
   \   000249   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   00024C   7403         MOV     A,#0x3
   \   00024E   12....       LCALL   ?XSTACK_DISP0_8
   \   000251   E8           MOV     A,R0
   \   000252   F0           MOVX    @DPTR,A
   \   000253   A3           INC     DPTR
   \   000254   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000257   2418         ADD     A,#0x18
   \   000259   F582         MOV     DPL,A
   \   00025B   E4           CLR     A
   \   00025C   38           ADDC    A,R0
   \   00025D   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000260   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000263   7401         MOV     A,#0x1
   \   000265   12....       LCALL   ?XSTACK_DISP100_8
   \   000268   88..         MOV     ?V0,R0
   \   00026A   89..         MOV     ?V1,R1
   \   00026C   78..         MOV     R0,#?V0
   \   00026E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000271   75..20       MOV     ?V0,#0x20
   \   000274   75..80       MOV     ?V1,#-0x80
   \   000277   78..         MOV     R0,#?V0
   \   000279   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00027C   7901         MOV     R1,#0x1
   \   00027E   7408         MOV     A,#0x8
   \   000280   12....       LCALL   ?XSTACK_DISP102_8
   \   000283   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000286   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000289   7405         MOV     A,#0x5
   \   00028B   12....       LCALL   ?DEALLOC_XSTACK8
   2410          
   2411              // Process ended - release memory used
   2412              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_21:
   \   00028E                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00028E   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2413            }
   2414          
   2415            return ( TRUE );
   \                     ??ZDMatchSendState_20:
   \   000291   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_3:
   \   000293   7415         MOV     A,#0x15
   \   000295   02....       LJMP    ?Subroutine7 & 0xFFFF
   2416          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   F5..         MOV     ?V4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V5,A
   \   000008   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   6401         XRL     A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   12....       LCALL   ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_618:
   \   000003   12....       LCALL   ?Subroutine209 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine209:
   \   000000   242F         ADD     A,#0x2f
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   90....       MOV     DPTR,#matchED
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3A           ADDC    A,R2
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   28           ADD     A,R0
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   39           ADDC    A,R1
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   24FE         ADD     A,#-0x2
   \   000010   F582         MOV     DPL,A
   \   000012   E9           MOV     A,R1
   \   000013   34FF         ADDC    A,#-0x1
   \   000015   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000018   90....       MOV     DPTR,#matchED
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   90....       MOV     DPTR,#matchED
   \   000007                REQUIRE ??Subroutine256_0
   \   000007                ; // Fall through to label ??Subroutine256_0
   2417          
   2418          /*********************************************************************
   2419           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2420           *
   2421           * @brief   End device bind timeout.
   2422           *
   2423           * @param  none
   2424           *
   2425           * @return  none
   2426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2427          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2428          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2429            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2430          }
   \   00000D   02....       LJMP    ?Subroutine0 & 0xFFFF
   2431          
   2432          /*********************************************************************
   2433           * ZDO MESSAGE PARSING API FUNCTIONS
   2434           */
   2435          
   2436          /*********************************************************************
   2437           * @fn          ZDO_ParseEndDeviceBindReq
   2438           *
   2439           * @brief       This function parses the End_Device_Bind_req message.
   2440           *
   2441           *     NOTE:  The clusters lists in bindReq are allocated in this
   2442           *            function and must be freed by that calling function.
   2443           *
   2444           * @param       inMsg  - incoming message (request)
   2445           * @param       bindReq - pointer to place to parse message to
   2446           *
   2447           * @return      none
   2448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V1
   \   000005                REQUIRE ??Subroutine253_0
   \   000005                ; // Fall through to label ??Subroutine253_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2449          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2450          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   2451            uint8 *msg;
   2452          
   2453            // Parse the message
   2454            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00000D   3B           ADDC    A,R3
   \   00000E   F583         MOV     DPH,A
   \   000010   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_635:
   \   000013   12....       LCALL   ?Subroutine51 & 0xFFFF
   2455            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_75:
   \   000016   F8           MOV     R0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   2456            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_568:
   \   000023   12....       LCALL   ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   000026   3B           ADDC    A,R3
   \   000027   F583         MOV     DPH,A
   \   000029   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00002C   12....       LCALL   ?Subroutine35 & 0xFFFF
   2457            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_52:
   \   00002F   FE           MOV     R6,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FF           MOV     R7,A
   2458          
   2459            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   000033   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000036   12....       LCALL   ?Subroutine19 & 0xFFFF
   2460            msg += 2;
   \                     ??CrossCallReturnLabel_570:
   \   000039   5001         JNC     ??ZDO_ParseEndDeviceBindReq_0
   \   00003B   0F           INC     R7
   2461          
   2462            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   00003C                ; Setup parameters for call to function sAddrExtCpy
   \   00003C   FC           MOV     R4,A
   \   00003D   EF           MOV     A,R7
   \   00003E   FD           MOV     R5,A
   \   00003F   E5..         MOV     A,?V0
   \   000041   2406         ADD     A,#0x6
   \   000043   FA           MOV     R2,A
   \   000044   E4           CLR     A
   \   000045   35..         ADDC    A,?V1
   \   000047   FB           MOV     R3,A
   \   000048   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2463            msg += Z_EXTADDR_LEN;
   2464          
   2465            bindReq->endpoint = *msg++;
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   C0E0         PUSH    A
   \   00005A   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00005D   D0E0         POP     A
   \   00005F   12....       LCALL   ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_666:
   \   000062   5001         JNC     ??ZDO_ParseEndDeviceBindReq_1
   \   000064   0F           INC     R7
   2466            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   00006C   F9           MOV     R1,A
   \   00006D   EA           MOV     A,R2
   \   00006E   F8           MOV     R0,A
   \   00006F   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000072   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   2467            msg += 2;
   2468          
   2469            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_449:
   \   000075   E5..         MOV     A,?V0
   \   000077   2412         ADD     A,#0x12
   \   000079   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00007C   A3           INC     DPTR
   \   00007D   F0           MOVX    @DPTR,A
   2470            bindReq->outClusters = NULL;
   \   00007E   E5..         MOV     A,?V0
   \   000080   2415         ADD     A,#0x15
   \   000082   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000085   A3           INC     DPTR
   \   000086   12....       LCALL   ?Subroutine27 & 0xFFFF
   2471          
   2472            if ((bindReq->numInClusters = *msg++) &&
   2473                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_29:
   \   000089   FA           MOV     R2,A
   \   00008A   E5..         MOV     A,?V0
   \   00008C   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   00008F   EA           MOV     A,R2
   \   000090   F0           MOVX    @DPTR,A
   \   000091   EE           MOV     A,R6
   \   000092   2403         ADD     A,#0x3
   \   000094   FE           MOV     R6,A
   \   000095   5001         JNC     ??ZDO_ParseEndDeviceBindReq_2
   \   000097   0F           INC     R7
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   000098   EA           MOV     A,R2
   \   000099   6030         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   00009B   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_713:
   \   00009E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A1   8A..         MOV     ?V2,R2
   \   0000A3   8B..         MOV     ?V3,R3
   \   0000A5   A8..         MOV     R0,?V2
   \   0000A7   A9..         MOV     R1,?V3
   \   0000A9   E5..         MOV     A,?V0
   \   0000AB   2412         ADD     A,#0x12
   \   0000AD   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   0000B0   6019         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2474            {
   2475              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000B2                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000B2   E5..         MOV     A,?V0
   \   0000B4   2412         ADD     A,#0x12
   \   0000B6   12....       LCALL   ?Subroutine99 & 0xFFFF
   2476            }
   \                     ??CrossCallReturnLabel_165:
   \   0000B9   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000C1   8A..         MOV     ?V2,R2
   \   0000C3   8B..         MOV     ?V3,R3
   \   0000C5   AE..         MOV     R6,?V2
   \   0000C7   AF..         MOV     R7,?V3
   \   0000C9   8007         SJMP    ??CrossCallReturnLabel_254
   2477            else
   2478            {
   2479              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000CB   E5..         MOV     A,?V0
   \   0000CD   2411         ADD     A,#0x11
   \   0000CF   12....       LCALL   ?Subroutine148 & 0xFFFF
   2480            }
   2481          
   2482            if ((bindReq->numOutClusters = *msg++) &&
   2483                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??CrossCallReturnLabel_254:
   \   0000D2   8E82         MOV     DPL,R6
   \   0000D4   8F83         MOV     DPH,R7
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   FA           MOV     R2,A
   \   0000D8   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   0000DB   EA           MOV     A,R2
   \   0000DC   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000DF   602C         JZ      ??ZDO_ParseEndDeviceBindReq_4
   \   0000E1   E5..         MOV     A,?V0
   \   0000E3   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   0000E6   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_714:
   \   0000E9   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000EC   8A..         MOV     ?V2,R2
   \   0000EE   8B..         MOV     ?V3,R3
   \   0000F0   A8..         MOV     R0,?V2
   \   0000F2   A9..         MOV     R1,?V3
   \   0000F4   E5..         MOV     A,?V0
   \   0000F6   2415         ADD     A,#0x15
   \   0000F8   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_559:
   \   0000FB   6010         JZ      ??ZDO_ParseEndDeviceBindReq_4
   2484            {
   2485              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   0000FD                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000FD   E5..         MOV     A,?V0
   \   0000FF   2415         ADD     A,#0x15
   \   000101   12....       LCALL   ?Subroutine99 & 0xFFFF
   2486            }
   \                     ??CrossCallReturnLabel_166:
   \   000104   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000107   F9           MOV     R1,A
   \   000108   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   00010B   8005         SJMP    ??ZDO_ParseEndDeviceBindReq_5
   2487            else
   2488            {
   2489              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   00010D   12....       LCALL   ?Subroutine140 & 0xFFFF
   2490            }
   \                     ??CrossCallReturnLabel_237:
   \   000110   E4           CLR     A
   \   000111   F0           MOVX    @DPTR,A
   2491          }
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   000112   02....       LJMP    ??Subroutine213_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   2411         ADD     A,#0x11
   \   000002   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_648:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   2414         ADD     A,#0x14
   \   000002   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_645:
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   000003   12....       LCALL   ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000006   EE           MOV     A,R6
   \   000007   FA           MOV     R2,A
   \   000008   EF           MOV     A,R7
   \   000009   FB           MOV     R3,A
   \   00000A   E5..         MOV     A,?V0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine259_0
   \   000001                ; // Fall through to label ??Subroutine259_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine259_0:
   \   000000   12....       LCALL   ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_706:
   \   000003   EE           MOV     A,R6
   \   000004   2402         ADD     A,#0x2
   \   000006   FE           MOV     R6,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   E5..         MOV     A,?V0
   \   000002   2414         ADD     A,#0x14
   \   000004   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   EA           MOV     A,R2
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_694:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_655:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine264_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   12....       LCALL   ?Subroutine210 & 0xFFFF
   \                     ??CrossCallReturnLabel_680:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine210:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   E5..         MOV     A,?V0
   \   000002   240E         ADD     A,#0xe
   \   000004   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_644:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_691:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   EA           MOV     A,R2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine269_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2409         ADD     A,#0x9
   \   000004   FE           MOV     R6,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   FA           MOV     R2,A
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                REQUIRE ??Subroutine274_0
   \   000001                ; // Fall through to label ??Subroutine274_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   2492          
   2493          /*********************************************************************
   2494           * @fn          ZDO_ParseBindUnbindReq
   2495           *
   2496           * @brief       This function parses the Bind_req or Unbind_req message.
   2497           *
   2498           * @param       inMsg  - incoming message (request)
   2499           * @param       pReq - place to put parsed information
   2500           *
   2501           * @return      none
   2502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2503          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2504          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine122 & 0xFFFF
   2505            uint8 *msg;
   2506          
   2507            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_574:
   \   000008   12....       LCALL   ?Subroutine105 & 0xFFFF
   2508            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_410:
   \   00000B   FC           MOV     R4,A
   \   00000C   EF           MOV     A,R7
   \   00000D   FD           MOV     R5,A
   \   00000E   AA..         MOV     R2,?V0
   \   000010   AB..         MOV     R3,?V1
   \   000012   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2509            msg += Z_EXTADDR_LEN;
   2510            pReq->srcEndpoint = *msg++;
   \   000015   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_668:
   \   000018   5001         JNC     ??ZDO_ParseBindUnbindReq_0
   \   00001A   0F           INC     R7
   2511            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   00001B   12....       LCALL   ?Subroutine11 & 0xFFFF
   2512            msg += 2;
   2513            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_4:
   \   00001E   5001         JNC     ??ZDO_ParseBindUnbindReq_1
   \   000020   0F           INC     R7
   2514            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000021   7403         MOV     A,#0x3
   \   000023   68           XRL     A,R0
   \   000024   7026         JNZ     ??ZDO_ParseBindUnbindReq_2
   2515            {
   2516              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   000026                ; Setup parameters for call to function sAddrExtCpy
   \   000026   EE           MOV     A,R6
   \   000027   FC           MOV     R4,A
   \   000028   EF           MOV     A,R7
   \   000029   FD           MOV     R5,A
   \   00002A   E5..         MOV     A,?V0
   \   00002C   240B         ADD     A,#0xb
   \   00002E   FA           MOV     R2,A
   \   00002F   E4           CLR     A
   \   000030   35..         ADDC    A,?V1
   \   000032   FB           MOV     R3,A
   \   000033   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2517              msg += Z_EXTADDR_LEN;
   2518              pReq->dstEndpoint = *msg;
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C0E0         PUSH    A
   \   000045   12....       LCALL   ?Subroutine140 & 0xFFFF
   2519            }
   \                     ??CrossCallReturnLabel_238:
   \   000048   D0E0         POP     A
   \   00004A   8006         SJMP    ??ZDO_ParseBindUnbindReq_3
   2520            else
   2521            {
   2522              // copy group address
   2523              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   00004C   12....       LCALL   ?Subroutine68 & 0xFFFF
   2524            }
   \                     ??CrossCallReturnLabel_111:
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E9           MOV     A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   000052   F0           MOVX    @DPTR,A
   2525          }
   \   000053   02....       LJMP    ??Subroutine215_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   8C..         MOV     ?V0,R4
   \   000002   8D..         MOV     ?V1,R5
   \   000004                REQUIRE ??Subroutine260_0
   \   000004                ; // Fall through to label ??Subroutine260_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine260_0:
   \   000000   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_581:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine198:
   \   000000   E5..         MOV     A,?V0
   \   000002   240B         ADD     A,#0xb
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000003   F8           MOV     R0,A
   \   000004   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000007   E8           MOV     A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C                REQUIRE ??Subroutine269_0
   \   00000C                ; // Fall through to label ??Subroutine269_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   E5..         MOV     A,?V0
   \   00000E   12....       LCALL   ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_683:
   \   000011   12....       LCALL   ??Subroutine266_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_641:
   \   000014   E8           MOV     A,R0
   \   000015   F0           MOVX    @DPTR,A
   \   000016   EE           MOV     A,R6
   \   000017   2403         ADD     A,#0x3
   \   000019   FE           MOV     R6,A
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_697:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine205:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   85..82       MOV     DPL,?V0
   \   000009   85..83       MOV     DPH,?V1
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   EA           MOV     A,R2
   \   00000A   85..82       MOV     DPL,?V0
   \   00000D   85..83       MOV     DPH,?V1
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   22           RET
   2526          
   2527          /*********************************************************************
   2528           * @fn      ZDO_ParseAddrRsp
   2529           *
   2530           * @brief   Turns the inMsg (incoming message) into the out parsed
   2531           *          structure.
   2532           *
   2533           * @param   inMsg - incoming message
   2534           *
   2535           * @return  pointer to parsed structures.  This structure was
   2536           *          allocated using osal_mem_alloc, so it must be freed
   2537           *          by the calling function [osal_mem_free()].
   2538           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2539          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2540          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2541            ZDO_NwkIEEEAddrResp_t *rsp;
   2542            uint8 *msg;
   2543            byte cnt = 0;
   \   000009   75..00       MOV     ?V2,#0x0
   2544          
   2545            // Calculate the number of items in the list
   2546            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   00000C   EE           MOV     A,R6
   \   00000D   2410         ADD     A,#0x10
   \   00000F   F582         MOV     DPL,A
   \   000011   E4           CLR     A
   \   000012   3F           ADDC    A,R7
   \   000013   F583         MOV     DPH,A
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C3           CLR     C
   \   000017   940C         SUBB    A,#0xc
   \   000019   400D         JC      ??ZDO_ParseAddrRsp_0
   2547            {
   2548              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001B   12....       LCALL   ?Subroutine123 & 0xFFFF
   2549            }
   \                     ??CrossCallReturnLabel_199:
   \   00001E   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   000021   240B         ADD     A,#0xb
   \   000023   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000026   F5..         MOV     ?V2,A
   2550            else
   2551            {
   2552              cnt = 0;
   2553            }
   2554          
   2555            // Make buffer
   2556            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   A8..         MOV     R0,?V2
   \   00002A   E8           MOV     A,R0
   \   00002B   28           ADD     A,R0
   \   00002C   F8           MOV     R0,A
   \   00002D   E4           CLR     A
   \   00002E   33           RLC     A
   \   00002F   F9           MOV     R1,A
   \   000030   E8           MOV     A,R0
   \   000031   240D         ADD     A,#0xd
   \   000033   FA           MOV     R2,A
   \   000034   E4           CLR     A
   \   000035   39           ADDC    A,R1
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003A   8A..         MOV     ?V0,R2
   \   00003C   8B..         MOV     ?V1,R3
   2557          
   2558            if ( rsp )
   \   00003E   EA           MOV     A,R2
   \   00003F   45..         ORL     A,?V1
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2559            {
   2560              msg = inMsg->asdu;
   \   000046   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000049   12....       LCALL   ??Subroutine268_0 & 0xFFFF
   2561          
   2562              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_663:
   \   00004C   F8           MOV     R0,A
   \   00004D   8A82         MOV     DPL,R2
   \   00004F   8B83         MOV     DPH,R3
   \   000051   12....       LCALL   ?Subroutine20 & 0xFFFF
   2563              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_19:
   \   000054   7076         JNZ     ??ZDO_ParseAddrRsp_1
   2564              {
   2565                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000056                ; Setup parameters for call to function sAddrExtCpy
   \   000056   EE           MOV     A,R6
   \   000057   FC           MOV     R4,A
   \   000058   EF           MOV     A,R7
   \   000059   FD           MOV     R5,A
   \   00005A   EA           MOV     A,R2
   \   00005B   2403         ADD     A,#0x3
   \   00005D   FA           MOV     R2,A
   \   00005E   E4           CLR     A
   \   00005F   35..         ADDC    A,?V1
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2566                msg += Z_EXTADDR_LEN;
   \   000065   EE           MOV     A,R6
   \   000066   2408         ADD     A,#0x8
   \   000068   FE           MOV     R6,A
   \   000069   5001         JNC     ??ZDO_ParseAddrRsp_2
   \   00006B   0F           INC     R7
   2567                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   00006C   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00006F   A3           INC     DPTR
   \   000070   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   2568          
   2569                msg += 2;
   2570                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_441:
   \   000073   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000076   E4           CLR     A
   \   000077   F0           MOVX    @DPTR,A
   2571          
   2572                // StartIndex field is only present if NumAssocDev field is non-zero.
   2573                if ( cnt > 0 )
   \   000078   E5..         MOV     A,?V2
   \   00007A   6050         JZ      ??ZDO_ParseAddrRsp_1
   2574                {
   2575                  uint16 *pList = &(rsp->devList[0]);
   \   00007C   E5..         MOV     A,?V0
   \   00007E   240D         ADD     A,#0xd
   \   000080   F8           MOV     R0,A
   \   000081   E4           CLR     A
   \   000082   35..         ADDC    A,?V1
   \   000084   F9           MOV     R1,A
   2576                  byte n = cnt;
   2577          
   2578                  rsp->numAssocDevs = *msg++;
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   C0E0         PUSH    A
   \   00008E   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000091   D0E0         POP     A
   \   000093   12....       LCALL   ?Subroutine46 & 0xFFFF
   2579                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_67:
   \   000096   C0E0         PUSH    A
   \   000098   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   00009B   D0E0         POP     A
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   EE           MOV     A,R6
   \   00009F   2404         ADD     A,#0x4
   \   0000A1   FE           MOV     R6,A
   \   0000A2   5001         JNC     ??ZDO_ParseAddrRsp_3
   \   0000A4   0F           INC     R7
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000A5   AC..         MOV     R4,?V2
   2580          
   2581                  while ( n != 0 )
   2582                  {
   2583                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000A7   8E82         MOV     DPL,R6
   \   0000A9   8F83         MOV     DPH,R7
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F5..         MOV     ?V2,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   FB           MOV     R3,A
   \   0000B1   E5..         MOV     A,?V2
   \   0000B3   8882         MOV     DPL,R0
   \   0000B5   8983         MOV     DPH,R1
   \   0000B7   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   0000BA   E8           MOV     A,R0
   \   0000BB   2402         ADD     A,#0x2
   \   0000BD   F8           MOV     R0,A
   \   0000BE   5001         JNC     ??ZDO_ParseAddrRsp_5
   \   0000C0   09           INC     R1
   2584                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000C1   EE           MOV     A,R6
   \   0000C2   2402         ADD     A,#0x2
   \   0000C4   FE           MOV     R6,A
   \   0000C5   5001         JNC     ??ZDO_ParseAddrRsp_6
   \   0000C7   0F           INC     R7
   2585                    n--;
   2586                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000C8   1C           DEC     R4
   \   0000C9   EC           MOV     A,R4
   \   0000CA   70DB         JNZ     ??ZDO_ParseAddrRsp_4
   2587                }
   2588              }
   2589            }
   2590          
   2591            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000CC   AA..         MOV     R2,?V0
   \   0000CE   AB..         MOV     R3,?V1
   \   0000D0   02....       LJMP    ??Subroutine276_0 & 0xFFFF
   2592          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000003   85..82       MOV     DPL,?V0
   \   000006   85..83       MOV     DPH,?V1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine268_0:
   \   000000   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_664:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FF           MOV     R7,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_693:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET
   2593          
   2594          /*********************************************************************
   2595           * @fn          ZDO_ParseNodeDescRsp
   2596           *
   2597           * @brief       This function parses the Node_Desc_rsp message.
   2598           *
   2599           * @param       inMsg - incoming message
   2600           * @param       pNDRsp - place to parse the message into
   2601           *
   2602           * @return      none
   2603           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2604          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2605          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2606            uint8 *msg;
   2607          
   2608            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   2609          
   2610            pNDRsp->status = *msg++;
   2611            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2612          
   2613            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2614            {
   2615              msg += 2;
   2616              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   00000D   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000010   F8           MOV     R0,A
   \   000011   E4           CLR     A
   \   000012   3D           ADDC    A,R5
   \   000013   F9           MOV     R1,A
   \   000014   88..         MOV     ?V0,R0
   \   000016   89..         MOV     ?V1,R1
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   5407         ANL     A,#0x7
   \   00001F   F8           MOV     R0,A
   \   000020   85..82       MOV     DPL,?V0
   \   000023   8983         MOV     DPH,R1
   \   000025   E0           MOVX    A,@DPTR
   \   000026   54F8         ANL     A,#0xf8
   \   000028   48           ORL     A,R0
   \   000029   12....       LCALL   ?Subroutine31 & 0xFFFF
   2617          
   2618              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_38:
   \   00002C   A2E3         MOV     C,0xE0 /* A   */.3
   \   00002E   E4           CLR     A
   \   00002F   33           RLC     A
   \   000030   F8           MOV     R0,A
   \   000031   85..82       MOV     DPL,?V0
   \   000034   C082         PUSH    DPL
   \   000036   8E82         MOV     DPL,R6
   \   000038   E0           MOVX    A,@DPTR
   \   000039   A2E3         MOV     C,0xE0 /* A   */.3
   \   00003B   8983         MOV     DPH,R1
   \   00003D   D082         POP     DPL
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   92E3         MOV     0xE0 /* A   */.3,C
   \   000042   12....       LCALL   ?Subroutine31 & 0xFFFF
   2619              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_39:
   \   000045   A2E4         MOV     C,0xE0 /* A   */.4
   \   000047   E4           CLR     A
   \   000048   33           RLC     A
   \   000049   F9           MOV     R1,A
   \   00004A   85..82       MOV     DPL,?V0
   \   00004D   85..83       MOV     DPH,?V1
   \   000050   C082         PUSH    DPL
   \   000052   C083         PUSH    DPH
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   A2E4         MOV     C,0xE0 /* A   */.4
   \   00005B   D083         POP     DPH
   \   00005D   D082         POP     DPL
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   92E4         MOV     0xE0 /* A   */.4,C
   \   000062   F0           MOVX    @DPTR,A
   2620          
   2621              msg++;  // Reserved bits.
   2622              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000063   EA           MOV     A,R2
   \   000064   2403         ADD     A,#0x3
   \   000066   0E           INC     R6
   \   000067   E4           CLR     A
   \   000068   3B           ADDC    A,R3
   \   000069   FF           MOV     R7,A
   \   00006A   EC           MOV     A,R4
   \   00006B   2404         ADD     A,#0x4
   \   00006D   F5..         MOV     ?V0,A
   \   00006F   E4           CLR     A
   \   000070   3D           ADDC    A,R5
   \   000071   F5..         MOV     ?V1,A
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   E0           MOVX    A,@DPTR
   \   000078   54F8         ANL     A,#0xf8
   \   00007A   F5..         MOV     ?V2,A
   \   00007C   85..82       MOV     DPL,?V0
   \   00007F   85..83       MOV     DPH,?V1
   \   000082   E0           MOVX    A,@DPTR
   \   000083   5407         ANL     A,#0x7
   \   000085   45..         ORL     A,?V2
   \   000087   F5..         MOV     ?V2,A
   \   000089   12....       LCALL   ?Subroutine31 & 0xFFFF
   2623              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_40:
   \   00008C   5407         ANL     A,#0x7
   \   00008E   FE           MOV     R6,A
   \   00008F   74F8         MOV     A,#-0x8
   \   000091   55..         ANL     A,?V2
   \   000093   4E           ORL     A,R6
   \   000094   85..82       MOV     DPL,?V0
   \   000097   85..83       MOV     DPH,?V1
   \   00009A   12....       LCALL   ?Subroutine38 & 0xFFFF
   2624              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_58:
   \   00009D   8C82         MOV     DPL,R4
   \   00009F   8D83         MOV     DPH,R5
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   2625              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_672:
   \   0000A9   A3           INC     DPTR
   \   0000AA   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_639:
   \   0000AD   12....       LCALL   ?Subroutine36 & 0xFFFF
   2626              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_54:
   \   0000B0   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   0000B3   12....       LCALL   ?Subroutine36 & 0xFFFF
   2627              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_55:
   \   0000B6   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_640:
   \   0000B9   12....       LCALL   ?Subroutine28 & 0xFFFF
   2628              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_32:
   \   0000BC   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   0000BF   12....       LCALL   ?Subroutine28 & 0xFFFF
   2629              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_33:
   \   0000C2   A3           INC     DPTR
   \   0000C3   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   EA           MOV     A,R2
   \   0000D1   240A         ADD     A,#0xa
   \   0000D3   FA           MOV     R2,A
   \   0000D4   5001         JNC     ??ZDO_ParseNodeDescRsp_1
   \   0000D6   0B           INC     R3
   2630              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   0000D7   12....       LCALL   ?Subroutine110 & 0xFFFF
   2631              msg += 2;
   2632              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   2633              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   2634              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   2635            }
   \                     ??CrossCallReturnLabel_355:
   \   0000DA   FF           MOV     R7,A
   \   0000DB   EC           MOV     A,R4
   \   0000DC   240B         ADD     A,#0xb
   \   0000DE   F582         MOV     DPL,A
   \   0000E0   E4           CLR     A
   \   0000E1   3D           ADDC    A,R5
   \   0000E2   F583         MOV     DPH,A
   \   0000E4   E5..         MOV     A,?V0
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   EF           MOV     A,R7
   \   0000E9   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000EC   C0E0         PUSH    A
   \   0000EE   EC           MOV     A,R4
   \   0000EF   240D         ADD     A,#0xd
   \   0000F1   F582         MOV     DPL,A
   \   0000F3   E4           CLR     A
   \   0000F4   3D           ADDC    A,R5
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   D0E0         POP     A
   \   0000F9   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_673:
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   C0E0         PUSH    A
   \   0000FF   EC           MOV     A,R4
   \   000100   12....       LCALL   ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_629:
   \   000103   3D           ADDC    A,R5
   \   000104   F583         MOV     DPH,A
   \   000106   D0E0         POP     A
   \   000108   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00010B   C0E0         PUSH    A
   \   00010D   EC           MOV     A,R4
   \   00010E   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000111   3D           ADDC    A,R5
   \   000112   F583         MOV     DPH,A
   \   000114   D0E0         POP     A
   \   000116   F0           MOVX    @DPTR,A
   2636          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   000117   02....       LJMP    ??Subroutine213_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_676:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   12....       LCALL   ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_678:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3B           ADDC    A,R3
   \   000006   F9           MOV     R1,A
   \   000007   E8           MOV     A,R0
   \   000008   FE           MOV     R6,A
   \   000009   E9           MOV     A,R1
   \   00000A   FF           MOV     R7,A
   \   00000B   EC           MOV     A,R4
   \   00000C   2403         ADD     A,#0x3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   000003   12....       LCALL   ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   8C82         MOV     DPL,R4
   \   00000D   8D83         MOV     DPH,R5
   \   00000F   12....       LCALL   ?Subroutine210 & 0xFFFF
   \                     ??CrossCallReturnLabel_682:
   \   000012   AA82         MOV     R2,DPL
   \   000014   AB83         MOV     R3,DPH
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FE           MOV     R6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   EE           MOV     A,R6
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   A3           INC     DPTR
   \   000021   12....       LCALL   ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_699:
   \   000024   8C82         MOV     DPL,R4
   \   000026   8D83         MOV     DPH,R5
   \   000028   E0           MOVX    A,@DPTR
   \   000029   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_695:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine264_0
   \   000001                ; // Fall through to label ??Subroutine264_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine270_0:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_677:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   12....       LCALL   ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_679:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine204:
   \   000000   12....       LCALL   ?Subroutine210 & 0xFFFF
   \                     ??CrossCallReturnLabel_681:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
   2637          
   2638          /*********************************************************************
   2639           * @fn          ZDO_ParesPowerDescRsp
   2640           *
   2641           * @brief       This function parses the Power_Desc_rsp message.
   2642           *
   2643           * @param       inMsg  - incoming message
   2644           * @param       pNPRsp - place to parse the message into
   2645           *
   2646           * @return      none
   2647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2648          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2649          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2650            uint8 *msg;
   2651          
   2652            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   2653            pNPRsp->status = *msg++;
   2654            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2655          
   2656            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_3:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2657            {
   2658              msg += 2;
   2659              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   00000D   12....       LCALL   ?Subroutine133 & 0xFFFF
   2660              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   2661              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   2662              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   2663            }
   \                     ??CrossCallReturnLabel_213:
   \   000010   E4           CLR     A
   \   000011   3D           ADDC    A,R5
   \   000012   0C           INC     R4
   \   000013   0C           INC     R4
   \   000014   0C           INC     R4
   \   000015   FD           MOV     R5,A
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   540F         ANL     A,#0xf
   \   00001D   F5..         MOV     ?V2,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V3,A
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C4           SWAP    A
   \   000029   540F         ANL     A,#0xf
   \   00002B   F5..         MOV     ?V0,A
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   7404         MOV     A,#0x4
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?S_SHL
   \   000037   E5..         MOV     A,?V2
   \   000039   45..         ORL     A,?V0
   \   00003B   A9..         MOV     R1,?V3
   \   00003D   8C82         MOV     DPL,R4
   \   00003F   8D83         MOV     DPH,R5
   \   000041   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000044   E5..         MOV     A,?V0
   \   000046   48           ORL     A,R0
   \   000047   F5..         MOV     ?V0,A
   \   000049   8C82         MOV     DPL,R4
   \   00004B   8D83         MOV     DPH,R5
   \   00004D   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   000050   2403         ADD     A,#0x3
   \   000052   E4           CLR     A
   \   000053   3B           ADDC    A,R3
   \   000054   0E           INC     R6
   \   000055   FF           MOV     R7,A
   \   000056   E5..         MOV     A,?V0
   \   000058   F5..         MOV     ?V2,A
   \   00005A   E9           MOV     A,R1
   \   00005B   540F         ANL     A,#0xf
   \   00005D   F5..         MOV     ?V3,A
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C4           SWAP    A
   \   000065   540F         ANL     A,#0xf
   \   000067   F5..         MOV     ?V0,A
   \   000069   740C         MOV     A,#0xc
   \   00006B   78..         MOV     R0,#?V0
   \   00006D   12....       LCALL   ?S_SHL
   \   000070   E5..         MOV     A,?V3
   \   000072   45..         ORL     A,?V1
   \   000074   F9           MOV     R1,A
   \   000075   8C82         MOV     DPL,R4
   \   000077   8D83         MOV     DPH,R5
   \   000079   E5..         MOV     A,?V2
   \   00007B   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00007E   EA           MOV     A,R2
   \   00007F   2404         ADD     A,#0x4
   \   000081   8C82         MOV     DPL,R4
   \   000083   8D83         MOV     DPH,R5
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   54F0         ANL     A,#0xf0
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   E8           MOV     A,R0
   \   00008B   F9           MOV     R1,A
   \   00008C   8C82         MOV     DPL,R4
   \   00008E   8D83         MOV     DPH,R5
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   49           ORL     A,R1
   \   000093   F0           MOVX    @DPTR,A
   2664          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   000094   02....       LJMP    ??Subroutine213_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   540F         ANL     A,#0xf
   \   000006   F8           MOV     R0,A
   \   000007   22           RET
   2665          
   2666          /*********************************************************************
   2667           * @fn          ZDO_ParseSimpleDescRsp
   2668           *
   2669           * @brief       This function parse the Simple_Desc_rsp message.
   2670           *
   2671           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2672           *         in the SimpleDescriptionFormat_t structure are allocated
   2673           *         and the calling function needs to free [osal_msg_free()]
   2674           *         these buffers.
   2675           *
   2676           * @param       inMsg  - incoming message
   2677           * @param       pSimpleDescRsp - place to parse the message into
   2678           *
   2679           * @return      none
   2680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2681          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2682          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2683            uint8 *msg;
   2684          
   2685            msg = inMsg->asdu;
   \   000005   12....       LCALL   ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_576:
   \   000008   12....       LCALL   ?Subroutine103 & 0xFFFF
   2686            pSimpleDescRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_173:
   \   00000B   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_636:
   \   00000E   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000011   A3           INC     DPTR
   \   000012   A882         MOV     R0,DPL
   \   000014   A983         MOV     R1,DPH
   2687            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FE           MOV     R6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FB           MOV     R3,A
   \   00001B   EE           MOV     A,R6
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   A3           INC     DPTR
   \   000021   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   2688            msg += sizeof ( uint16 );
   2689            msg++; // Skip past the length field.
   2690          
   2691            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_382:
   \   000024   8C82         MOV     DPL,R4
   \   000026   8D83         MOV     DPH,R5
   \   000028   E0           MOVX    A,@DPTR
   \   000029   7011         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2692            {
   2693              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00002B                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00002B   EC           MOV     A,R4
   \   00002C   2403         ADD     A,#0x3
   \   00002E   FC           MOV     R4,A
   \   00002F   5001         JNC     ??ZDO_ParseSimpleDescRsp_1
   \   000031   0D           INC     R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000032   E8           MOV     A,R0
   \   000033   2403         ADD     A,#0x3
   \   000035   FA           MOV     R2,A
   \   000036   E4           CLR     A
   \   000037   39           ADDC    A,R1
   \   000038   FB           MOV     R3,A
   \   000039   12....       LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   2694            }
   2695          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00003C   02....       LJMP    ?Subroutine1 & 0xFFFF
   2696          
   2697          /*********************************************************************
   2698           * @fn          ZDO_ParseEPListRsp
   2699           *
   2700           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2701           *
   2702           * @param       inMsg  - incoming message
   2703           *
   2704           * @return      none
   2705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2706          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2707          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   2708            ZDO_ActiveEndpointRsp_t *pRsp;
   2709            uint8 *msg;
   2710            uint8 Status;
   2711            uint8 cnt;
   2712          
   2713            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine75 & 0xFFFF
   2714            Status = *msg++;
   \                     ??CrossCallReturnLabel_658:
   \   000008   F5..         MOV     ?V3,A
   \   00000A   A3           INC     DPTR
   \   00000B   AE82         MOV     R6,DPL
   \   00000D   AF83         MOV     R7,DPH
   2715            cnt = msg[2];
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V2,A
   2716          
   2717            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000014                ; Setup parameters for call to function osal_mem_alloc
   \   000014   2404         ADD     A,#0x4
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   3400         ADDC    A,#0x0
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001E   8A..         MOV     ?V0,R2
   \   000020   8B..         MOV     ?V1,R3
   2718            if ( pRsp )
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V1
   \   000025   602E         JZ      ??ZDO_ParseEPListRsp_0
   2719            {
   2720              pRsp->status = Status;
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   E5..         MOV     A,?V3
   \   00002D   12....       LCALL   ?Subroutine31 & 0xFFFF
   2721              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_41:
   \   000030   FA           MOV     R2,A
   \   000031   12....       LCALL   ?Subroutine24 & 0xFFFF
   2722              msg += sizeof( uint16 );
   2723              pRsp->cnt = cnt;
   2724              msg++; // pass cnt
   2725              osal_memcpy( pRsp->epList, msg, cnt );
   \                     ??CrossCallReturnLabel_25:
   \   000034                ; Setup parameters for call to function osal_memcpy
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A982         MOV     R1,DPL
   \   00003D   AA83         MOV     R2,DPH
   \   00003F   89..         MOV     ?V4,R1
   \   000041   8A..         MOV     ?V5,R2
   \   000043   88..         MOV     ?V6,R0
   \   000045   78..         MOV     R0,#?V4
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004A   12....       LCALL   ?Subroutine155 & 0xFFFF
   2726            }
   \                     ??CrossCallReturnLabel_633:
   \   00004D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   2727          
   2728            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   000055                REQUIRE ?Subroutine6
   \   000055                ; // Fall through to label ?Subroutine6
   2729          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   AA..         MOV     R2,?V0
   \   000002   AB..         MOV     R3,?V1
   \   000004   7F07         MOV     R7,#0x7
   \   000006   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   AC..         MOV     R4,?V2
   \   000002   7D00         MOV     R5,#0x0
   \   000004                REQUIRE ??Subroutine263_0
   \   000004                ; // Fall through to label ??Subroutine263_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine263_0:
   \   000000   E5..         MOV     A,?V0
   \   000002   2404         ADD     A,#0x4
   \   000004   FA           MOV     R2,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V1
   \   000008   FB           MOV     R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_580:
   \   000003                REQUIRE ??Subroutine268_0
   \   000003                ; // Fall through to label ??Subroutine268_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   85..82       MOV     DPL,?V0
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   12....       LCALL   ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_700:
   \   000010   85..82       MOV     DPL,?V0
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E5..         MOV     A,?V2
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   22           RET
   2730          
   2731          /*********************************************************************
   2732           * @fn          ZDO_ParseServerDiscRsp
   2733           *
   2734           * @brief       Parse the Server_Discovery_rsp message.
   2735           *
   2736           * @param       inMsg - incoming message.
   2737           * @param       pRsp - place to put the parsed information.
   2738           *
   2739           * @return      none
   2740           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2741          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2742          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2743            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   000013   F583         MOV     DPH,A
   \   000015   8A82         MOV     DPL,R2
   \   000017   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_637:
   \   00001A   12....       LCALL   ?Subroutine37 & 0xFFFF
   2744            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_57:
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ??Subroutine275_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_715:
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   2745          }
   \                     ??CrossCallReturnLabel_442:
   \   000030   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine275_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   EA           MOV     A,R2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET
   2746          
   2747          /*********************************************************************
   2748           * @fn          ZDO_ParseMgmtLqiRsp
   2749           *
   2750           * @brief       This function parses the incoming Management
   2751           *              LQI response
   2752           *
   2753           * @param       inMsg - incoming message
   2754           *
   2755           * @return      a pointer to parsed response structure (NULL if not allocated).
   2756           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2757           *          by the calling function [osal_mem_free()].
   2758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   AA..         MOV     R2,?V2
   \   000002   AB..         MOV     R3,?V3
   \   000004                REQUIRE ??Subroutine217_0
   \   000004                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2759          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2760          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2761            ZDO_MgmtLqiRsp_t *pRsp;
   2762            uint8 status;
   2763            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V6,#0x0
   2764            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V5,#0x0
   2765            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   2766            uint8 *msg;
   2767          
   2768            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine74 & 0xFFFF
   2769          
   2770            status = *msg++;
   2771            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_121:
   \   000011   7017         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   2772            {
   2773              neighborLqiEntries = *msg++;
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V4,A
   2774              startIndex = *msg++;
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V6,A
   2775              neighborLqiCount = *msg++;
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V5,A
   \   000023   EE           MOV     A,R6
   \   000024   2403         ADD     A,#0x3
   \   000026   FE           MOV     R6,A
   \   000027   5001         JNC     ??ZDO_ParseMgmtLqiRsp_0
   \   000029   0F           INC     R7
   2776            }
   2777          
   2778            // Allocate a buffer big enough to handle the list.
   2779            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2780                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   E5..         MOV     A,?V5
   \   00002C   75F00E       MOV     B,#0xe
   \   00002F   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000032   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000035   8A..         MOV     ?V2,R2
   \   000037   8B..         MOV     ?V3,R3
   2781            if ( pRsp )
   \   000039   EA           MOV     A,R2
   \   00003A   45..         ORL     A,?V3
   \   00003C   6051         JZ      ??ZDO_ParseMgmtLqiRsp_1
   2782            {
   2783              uint8 x;
   2784              neighborLqiItem_t *pList = pRsp->list;
   \   00003E   12....       LCALL   ?Subroutine16 & 0xFFFF
   2785              pRsp->status = status;
   2786              pRsp->neighborLqiEntries = neighborLqiEntries;
   2787              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_652:
   \   000041   E5..         MOV     A,?V6
   \   000043   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   2788              pRsp->neighborLqiCount = neighborLqiCount;
   \                     ??CrossCallReturnLabel_674:
   \   000046   E5..         MOV     A,?V5
   \   000048   F0           MOVX    @DPTR,A
   2789          
   2790              for ( x = 0; x < neighborLqiCount; x++ )
   \   000049   75..00       MOV     ?V4,#0x0
   \   00004C   803A         SJMP    ??ZDO_ParseMgmtLqiRsp_2
   2791              {
   2792                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   00004E                ; Setup parameters for call to function sAddrExtCpy
   \   00004E   EE           MOV     A,R6
   \   00004F   FC           MOV     R4,A
   \   000050   EF           MOV     A,R7
   \   000051   FD           MOV     R5,A
   \   000052   12....       LCALL   ??Subroutine263_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_632:
   \   000055   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2793                msg += Z_EXTADDR_LEN;
   2794          
   2795                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \   000058   EE           MOV     A,R6
   \   000059   2410         ADD     A,#0x10
   \   00005B   FE           MOV     R6,A
   \   00005C   5001         JNC     ??ZDO_ParseMgmtLqiRsp_4
   \   00005E   0F           INC     R7
   2796                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   00005F   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   E9           MOV     A,R1
   \   000065   12....       LCALL   ?Subroutine17 & 0xFFFF
   2797                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   2798                pList->rxLqi = *msg++;
   \                     ??CrossCallReturnLabel_17:
   \   000068   C0E0         PUSH    A
   \   00006A   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   00006D   D0E0         POP     A
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   EE           MOV     A,R6
   \   000071   2406         ADD     A,#0x6
   \   000073   FE           MOV     R6,A
   \   000074   5001         JNC     ??ZDO_ParseMgmtLqiRsp_5
   \   000076   0F           INC     R7
   2799                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   000077   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   00007A   E4           CLR     A
   \   00007B   F0           MOVX    @DPTR,A
   2800                pList++;
   \   00007C   E5..         MOV     A,?V0
   \   00007E   240E         ADD     A,#0xe
   \   000080   F5..         MOV     ?V0,A
   \   000082   5002         JNC     ??ZDO_ParseMgmtLqiRsp_6
   \   000084   05..         INC     ?V1
   2801              }
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   000086   05..         INC     ?V4
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000088   E5..         MOV     A,?V4
   \   00008A   C3           CLR     C
   \   00008B   95..         SUBB    A,?V5
   \   00008D   40BF         JC      ??ZDO_ParseMgmtLqiRsp_3
   2802            }
   2803          
   2804            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   00008F   02....       LJMP    ?Subroutine3 & 0xFFFF
   2805          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E5..         MOV     A,?V7
   \   000009                REQUIRE ??Subroutine267_0
   \   000009                ; // Fall through to label ??Subroutine267_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine267_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V4
   \   000004   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_656:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine202:
   \   000000   EA           MOV     A,R2
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V0,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V3
   \   000008   F5..         MOV     ?V1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   E5..         MOV     A,?V0
   \   000002   240D         ADD     A,#0xd
   \   000004   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_649:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   A4           MUL     AB
   \   000001   A9F0         MOV     R1,B
   \   000003   2404         ADD     A,#0x4
   \   000005   FA           MOV     R2,A
   \   000006   E4           CLR     A
   \   000007   39           ADDC    A,R1
   \   000008   FB           MOV     R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   000003   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_665:
   \   000006   F5..         MOV     ?V7,A
   \   000008   A3           INC     DPTR
   \   000009   AE82         MOV     R6,DPL
   \   00000B   AF83         MOV     R7,DPH
   \   00000D   22           RET
   2806          
   2807          /*********************************************************************
   2808           * @fn          ZDO_ParseMgmNwkDiscRsp
   2809           *
   2810           * @brief       This function parses the incoming Management
   2811           *              Network Discover response.
   2812           *
   2813           * @param       inMsg - incoming message
   2814           *
   2815           * @return      pointer to parsed response.  This structure was
   2816           *          allocated using osal_mem_alloc, so it must be freed
   2817           *          by the calling function [osal_mem_free()].
   2818           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2819          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2820          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2821            ZDO_MgmNwkDiscRsp_t *pRsp;
   2822            uint8 status;
   2823            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V0,#0x0
   2824            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V1,#0x0
   2825            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V7,#0x0
   2826            uint8 *msg;
   2827          
   2828            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine75 & 0xFFFF
   2829            status = *msg++;
   \                     ??CrossCallReturnLabel_659:
   \   000011   F5..         MOV     ?V6,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2830          
   2831            if ( status == ZSuccess )
   \   000018   700F         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2832            {
   2833              networkCount = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0,A
   2834              startIndex = *msg++;
   \   00001D   12....       LCALL   ?Subroutine102 & 0xFFFF
   2835              networkListCount = *msg++;
   2836            }
   \                     ??CrossCallReturnLabel_171:
   \   000020   F5..         MOV     ?V7,A
   \   000022   EE           MOV     A,R6
   \   000023   2403         ADD     A,#0x3
   \   000025   FE           MOV     R6,A
   \   000026   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_0
   \   000028   0F           INC     R7
   2837          
   2838            // Allocate a buffer big enough to handle the list.
   2839            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2840                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   85....       MOV     ?V2,?V7
   \   00002C   75..00       MOV     ?V3,#0x0
   \   00002F   7404         MOV     A,#0x4
   \   000031   78..         MOV     R0,#?V2
   \   000033   12....       LCALL   ?S_SHL
   \   000036   E5..         MOV     A,?V2
   \   000038   2404         ADD     A,#0x4
   \   00003A   FA           MOV     R2,A
   \   00003B   E4           CLR     A
   \   00003C   35..         ADDC    A,?V3
   \   00003E   FB           MOV     R3,A
   \   00003F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000042   8A..         MOV     ?V2,R2
   \   000044   8B..         MOV     ?V3,R3
   2841            if ( pRsp )
   \   000046   EA           MOV     A,R2
   \   000047   45..         ORL     A,?V3
   \   000049   7003         JNZ     $+5
   \   00004B   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2842            {
   2843              uint8 x;
   2844              mgmtNwkDiscItem_t *pList;
   2845          
   2846              pRsp->status = status;
   \   00004E   8A82         MOV     DPL,R2
   \   000050   8B83         MOV     DPH,R3
   \   000052   E5..         MOV     A,?V6
   \   000054   F0           MOVX    @DPTR,A
   2847              pRsp->networkCount = networkCount;
   \   000055   A3           INC     DPTR
   \   000056   E5..         MOV     A,?V0
   \   000058   12....       LCALL   ?Subroutine168 & 0xFFFF
   2848              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_657:
   \   00005B   12....       LCALL   ?Subroutine39 & 0xFFFF
   2849              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_670:
   \   00005E   E5..         MOV     A,?V7
   \   000060   F0           MOVX    @DPTR,A
   2850              pList = pRsp->list;
   \   000061   12....       LCALL   ?Subroutine202 & 0xFFFF
   2851          
   2852              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_336:
   \   000064   75..00       MOV     ?V4,#0x0
   \   000067   8075         SJMP    ??ZDO_ParseMgmNwkDiscRsp_2
   2853              {
   2854                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000069                ; Setup parameters for call to function sAddrExtCpy
   \   000069   EE           MOV     A,R6
   \   00006A   FC           MOV     R4,A
   \   00006B   EF           MOV     A,R7
   \   00006C   FD           MOV     R5,A
   \   00006D   AA..         MOV     R2,?V0
   \   00006F   AB..         MOV     R3,?V1
   \   000071   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2855                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   000074   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000077   A3           INC     DPTR
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   E9           MOV     A,R1
   \   00007B   12....       LCALL   ?Subroutine26 & 0xFFFF
   2856                msg += Z_EXTADDR_LEN;
   2857          
   2858                pList->logicalChannel = *msg++;
   \                     ??CrossCallReturnLabel_28:
   \   00007E   85..82       MOV     DPL,?V0
   \   000081   85..83       MOV     DPH,?V1
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   F0           MOVX    @DPTR,A
   2859                pList->stackProfile = (*msg) & 0x0F;
   \   00008F   EE           MOV     A,R6
   \   000090   2409         ADD     A,#0x9
   \   000092   F8           MOV     R0,A
   \   000093   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000096   C0E0         PUSH    A
   \   000098   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   00009B   D0E0         POP     A
   \   00009D   12....       LCALL   ?Subroutine45 & 0xFFFF
   2860                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_65:
   \   0000A0   C0E0         PUSH    A
   \   0000A2   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   0000A5   D0E0         POP     A
   \   0000A7   F0           MOVX    @DPTR,A
   2861                pList->beaconOrder = (*msg) & 0x0F;
   \   0000A8   EE           MOV     A,R6
   \   0000A9   240A         ADD     A,#0xa
   \   0000AB   08           INC     R0
   \   0000AC   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   0000AF   C0E0         PUSH    A
   \   0000B1   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   0000B4   D0E0         POP     A
   \   0000B6   12....       LCALL   ?Subroutine45 & 0xFFFF
   2862                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_66:
   \   0000B9   C0E0         PUSH    A
   \   0000BB   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   0000BE   D0E0         POP     A
   \   0000C0   12....       LCALL   ?Subroutine34 & 0xFFFF
   2863                pList->permitJoining = *msg++;
   \                     ??CrossCallReturnLabel_51:
   \   0000C3   C0E0         PUSH    A
   \   0000C5   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0000C8   D0E0         POP     A
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   EE           MOV     A,R6
   \   0000CC   240C         ADD     A,#0xc
   \   0000CE   FE           MOV     R6,A
   \   0000CF   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_4
   \   0000D1   0F           INC     R7
   2864                pList++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0000D2   E5..         MOV     A,?V0
   \   0000D4   2410         ADD     A,#0x10
   \   0000D6   F5..         MOV     ?V0,A
   \   0000D8   5002         JNC     ??ZDO_ParseMgmNwkDiscRsp_5
   \   0000DA   05..         INC     ?V1
   2865              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_5:
   \   0000DC   05..         INC     ?V4
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000DE   E5..         MOV     A,?V4
   \   0000E0   C3           CLR     C
   \   0000E1   95..         SUBB    A,?V7
   \   0000E3   4084         JC      ??ZDO_ParseMgmNwkDiscRsp_3
   2866            }
   2867          
   2868            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0000E5   02....       LJMP    ?Subroutine3 & 0xFFFF
   2869          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   E4           CLR     A
   \   000001   3F           ADDC    A,R7
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   540F         ANL     A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C4           SWAP    A
   \   000005   540F         ANL     A,#0xf
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F5..         MOV     ?V1,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E5..         MOV     A,?V1
   \   000002                REQUIRE ??Subroutine270_0
   \   000002                ; // Fall through to label ??Subroutine270_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   22           RET
   2870          
   2871          /*********************************************************************
   2872           * @fn          ZDO_ParseMgmtRtgRsp
   2873           *
   2874           * @brief       This function parses the incoming Management
   2875           *              Routing response.
   2876           *
   2877           * @param       inMsg - incoming message
   2878           *
   2879           * @return      a pointer to parsed response structure (NULL if not allocated).
   2880           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2881           *          by the calling function [osal_mem_free()].
   2882           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2883          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   2884          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2885            ZDO_MgmtRtgRsp_t *pRsp;
   2886            uint8 status;
   2887            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   2888            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V1,#0x0
   2889            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0,#0x0
   2890            uint8 *msg;
   2891          
   2892            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine75 & 0xFFFF
   2893          
   2894            status = *msg++;
   \                     ??CrossCallReturnLabel_660:
   \   000011   F5..         MOV     ?V5,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2895            if ( status == ZSuccess )
   \   000018   700F         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   2896            {
   2897              rtgCount = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V4,A
   2898              startIndex = *msg++;
   \   00001D   12....       LCALL   ?Subroutine102 & 0xFFFF
   2899              rtgListCount = *msg++;
   2900            }
   \                     ??CrossCallReturnLabel_172:
   \   000020   F5..         MOV     ?V0,A
   \   000022   EE           MOV     A,R6
   \   000023   2403         ADD     A,#0x3
   \   000025   FE           MOV     R6,A
   \   000026   5001         JNC     ??ZDO_ParseMgmtRtgRsp_0
   \   000028   0F           INC     R7
   2901          
   2902            // Allocate a buffer big enough to handle the list
   2903            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   2904                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   E5..         MOV     A,?V0
   \   00002B   75F007       MOV     B,#0x7
   \   00002E   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000031   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   2905            if ( pRsp )
   \   000034   EA           MOV     A,R2
   \   000035   4B           ORL     A,R3
   \   000036   6054         JZ      ??ZDO_ParseMgmtRtgRsp_1
   2906            {
   2907              uint8 x;
   2908              rtgItem_t *pList = pRsp->list;
   \   000038   EA           MOV     A,R2
   \   000039   2404         ADD     A,#0x4
   \   00003B   F8           MOV     R0,A
   \   00003C   E4           CLR     A
   \   00003D   3B           ADDC    A,R3
   \   00003E   F9           MOV     R1,A
   2909              pRsp->status = status;
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   E5..         MOV     A,?V5
   \   000045   12....       LCALL   ??Subroutine267_0 & 0xFFFF
   2910              pRsp->rtgCount = rtgCount;
   2911              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_654:
   \   000048   12....       LCALL   ?Subroutine39 & 0xFFFF
   2912              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_671:
   \   00004B   E5..         MOV     A,?V0
   \   00004D   F0           MOVX    @DPTR,A
   2913          
   2914              for ( x = 0; x < rtgListCount; x++ )
   \   00004E   7C00         MOV     R4,#0x0
   \   000050   8034         SJMP    ??ZDO_ParseMgmtRtgRsp_2
   2915              {
   2916                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000052   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E5..         MOV     A,?V3
   \   000059   12....       LCALL   ?Subroutine27 & 0xFFFF
   2917                msg += 2;
   2918                pList->status = *msg++;
   \                     ??CrossCallReturnLabel_30:
   \   00005C   8882         MOV     DPL,R0
   \   00005E   8983         MOV     DPH,R1
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   F0           MOVX    @DPTR,A
   \   000066   EE           MOV     A,R6
   \   000067   2403         ADD     A,#0x3
   \   000069   FE           MOV     R6,A
   \   00006A   5001         JNC     ??ZDO_ParseMgmtRtgRsp_4
   \   00006C   0F           INC     R7
   2919                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   00006D   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   E5..         MOV     A,?V3
   \   000076   F0           MOVX    @DPTR,A
   2920                msg += 2;
   \   000077   EE           MOV     A,R6
   \   000078   2402         ADD     A,#0x2
   \   00007A   FE           MOV     R6,A
   \   00007B   5001         JNC     ??ZDO_ParseMgmtRtgRsp_5
   \   00007D   0F           INC     R7
   2921                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   00007E   E8           MOV     A,R0
   \   00007F   2407         ADD     A,#0x7
   \   000081   F8           MOV     R0,A
   \   000082   5001         JNC     ??ZDO_ParseMgmtRtgRsp_6
   \   000084   09           INC     R1
   2922              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   000085   0C           INC     R4
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   000086   EC           MOV     A,R4
   \   000087   C3           CLR     C
   \   000088   95..         SUBB    A,?V0
   \   00008A   40C6         JC      ??ZDO_ParseMgmtRtgRsp_3
   2923            }
   2924          
   2925            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   00008C   02....       LJMP    ??Subroutine276_0 & 0xFFFF
   2926          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V3,A
   \   00000B   E5..         MOV     A,?V4
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   22           RET
   2927          
   2928          /*********************************************************************
   2929           * @fn          ZDO_ParseMgmtBindRsp
   2930           *
   2931           * @brief       This function parses the incoming Management
   2932           *              Binding response.
   2933           *
   2934           * @param       inMsg - pointer to message to parse
   2935           *
   2936           * @return      a pointer to parsed response structure (NULL if not allocated).
   2937           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2938           *          by the calling function [osal_mem_free()].
   2939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2940          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   2941          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2942            ZDO_MgmtBindRsp_t *pRsp;
   2943            uint8 status;
   2944            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   2945            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V5,#0x0
   2946            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V6,#0x0
   2947            uint8 *msg;
   2948          
   2949            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine74 & 0xFFFF
   2950          
   2951            status = *msg++;
   2952            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_122:
   \   000011   7017         JNZ     ??ZDO_ParseMgmtBindRsp_0
   2953            {
   2954              bindingCount = *msg++;
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V4,A
   2955              startIndex = *msg++;
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V5,A
   2956              bindingListCount = *msg++;
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V6,A
   \   000023   EE           MOV     A,R6
   \   000024   2403         ADD     A,#0x3
   \   000026   FE           MOV     R6,A
   \   000027   5001         JNC     ??ZDO_ParseMgmtBindRsp_0
   \   000029   0F           INC     R7
   2957            }
   2958          
   2959            // Allocate a buffer big enough to handle the list
   2960            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   2961                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   E5..         MOV     A,?V6
   \   00002C   75F015       MOV     B,#0x15
   \   00002F   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000032   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000035   8A..         MOV     ?V2,R2
   \   000037   8B..         MOV     ?V3,R3
   2962            if ( pRsp )
   \   000039   EA           MOV     A,R2
   \   00003A   45..         ORL     A,?V3
   \   00003C   6074         JZ      ??ZDO_ParseMgmtBindRsp_1
   2963            {
   2964              uint8 x;
   2965              apsBindingItem_t *pList = pRsp->list;
   \   00003E   12....       LCALL   ?Subroutine16 & 0xFFFF
   2966              pRsp->status = status;
   2967              pRsp->bindingCount = bindingCount;
   2968              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_653:
   \   000041   E5..         MOV     A,?V5
   \   000043   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   2969              pRsp->bindingListCount = bindingListCount;
   \                     ??CrossCallReturnLabel_675:
   \   000046   E5..         MOV     A,?V6
   \   000048   F0           MOVX    @DPTR,A
   2970          
   2971              for ( x = 0; x < bindingListCount; x++ )
   \   000049   75..00       MOV     ?V4,#0x0
   \   00004C   8015         SJMP    ??ZDO_ParseMgmtBindRsp_2
   2972              {
   2973                osal_cpyExtAddr( pList->srcAddr, msg );
   2974                msg += Z_EXTADDR_LEN;
   2975                pList->srcEP = *msg++;
   2976          
   2977                // Get the Cluster ID
   2978          
   2979                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   2980                msg += 2;
   2981                pList->dstAddr.addrMode = *msg++;
   2982                if ( pList->dstAddr.addrMode == Addr64Bit )
   2983                {
   2984                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   2985                  msg += Z_EXTADDR_LEN;
   2986                  pList->dstEP = *msg++;
   2987                }
   2988                else
   2989                {
   2990                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00004E   12....       LCALL   ?Subroutine68 & 0xFFFF
   2991                  msg += 2;
   2992                }
   \                     ??CrossCallReturnLabel_112:
   \   000051   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   000054   5001         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   000056   0F           INC     R7
   2993          
   2994                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000057   E5..         MOV     A,?V0
   \   000059   2415         ADD     A,#0x15
   \   00005B   F5..         MOV     ?V0,A
   \   00005D   5002         JNC     ??ZDO_ParseMgmtBindRsp_5
   \   00005F   05..         INC     ?V1
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   000061   05..         INC     ?V4
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   000063   E5..         MOV     A,?V4
   \   000065   C3           CLR     C
   \   000066   95..         SUBB    A,?V6
   \   000068   5048         JNC     ??ZDO_ParseMgmtBindRsp_1
   \   00006A                ; Setup parameters for call to function sAddrExtCpy
   \   00006A   EE           MOV     A,R6
   \   00006B   FC           MOV     R4,A
   \   00006C   EF           MOV     A,R7
   \   00006D   FD           MOV     R5,A
   \   00006E   AA..         MOV     R2,?V0
   \   000070   AB..         MOV     R3,?V1
   \   000072   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000075   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_669:
   \   000078   5001         JNC     ??ZDO_ParseMgmtBindRsp_6
   \   00007A   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   00007B   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00007E   5001         JNC     ??ZDO_ParseMgmtBindRsp_7
   \   000080   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   000081   7403         MOV     A,#0x3
   \   000083   68           XRL     A,R0
   \   000084   70C8         JNZ     ??ZDO_ParseMgmtBindRsp_3
   \   000086                ; Setup parameters for call to function sAddrExtCpy
   \   000086   EE           MOV     A,R6
   \   000087   FC           MOV     R4,A
   \   000088   EF           MOV     A,R7
   \   000089   FD           MOV     R5,A
   \   00008A   E5..         MOV     A,?V0
   \   00008C   240B         ADD     A,#0xb
   \   00008E   FA           MOV     R2,A
   \   00008F   E4           CLR     A
   \   000090   35..         ADDC    A,?V1
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   C0E0         PUSH    A
   \   0000A5   12....       LCALL   ?Subroutine140 & 0xFFFF
   2995              }
   2996            }
   \                     ??CrossCallReturnLabel_239:
   \   0000A8   D0E0         POP     A
   \   0000AA   12....       LCALL   ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_667:
   \   0000AD   50A8         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   0000AF   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   0000B0   80A5         SJMP    ??ZDO_ParseMgmtBindRsp_4
   2997          
   2998            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000B2   02....       LJMP    ?Subroutine3 & 0xFFFF
   2999          }
   3000          
   3001          /*********************************************************************
   3002           * @fn          ZDO_ParseUserDescRsp
   3003           *
   3004           * @brief       This function parses the incoming User
   3005           *              Descriptor Response.
   3006           *
   3007           * @param       inMsg - incoming response message
   3008           *
   3009           * @return      a pointer to parsed response structure (NULL if not allocated).
   3010           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3011           *          by the calling function [osal_mem_free()].
   3012           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3013          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3014          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   3015            ZDO_UserDescRsp_t *pRsp;
   3016            uint8 *msg;
   3017            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   3018          
   3019            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine75 & 0xFFFF
   3020          
   3021            if ( msg[0] == ZSuccess )
   \                     ??CrossCallReturnLabel_661:
   \   00000B   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   3022            {
   3023              descLen = msg[3];
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V2,A
   3024            }
   3025          
   3026            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   000013                ; Setup parameters for call to function osal_mem_alloc
   \   000013   E5..         MOV     A,?V2
   \   000015   2404         ADD     A,#0x4
   \   000017   FA           MOV     R2,A
   \   000018   E4           CLR     A
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   8A..         MOV     ?V0,R2
   \   000021   8B..         MOV     ?V1,R3
   3027            if ( pRsp )
   \   000023   EA           MOV     A,R2
   \   000024   45..         ORL     A,?V1
   \   000026   602A         JZ      ??ZDO_ParseUserDescRsp_1
   3028            {
   3029              pRsp->status = msg[0];
   \   000028   12....       LCALL   ?Subroutine47 & 0xFFFF
   3030              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_689:
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   FA           MOV     R2,A
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   12....       LCALL   ?Subroutine24 & 0xFFFF
   3031              pRsp->length = descLen;
   3032              if ( descLen )
   \                     ??CrossCallReturnLabel_26:
   \   000035   601B         JZ      ??ZDO_ParseUserDescRsp_1
   3033              {
   3034                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000037                ; Setup parameters for call to function osal_memcpy
   \   000037   EE           MOV     A,R6
   \   000038   2404         ADD     A,#0x4
   \   00003A   F5..         MOV     ?V4,A
   \   00003C   E4           CLR     A
   \   00003D   3F           ADDC    A,R7
   \   00003E   F5..         MOV     ?V5,A
   \   000040   88..         MOV     ?V6,R0
   \   000042   78..         MOV     R0,#?V4
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000047   12....       LCALL   ?Subroutine155 & 0xFFFF
   3035              }
   3036            }
   \                     ??CrossCallReturnLabel_634:
   \   00004A   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004D   7403         MOV     A,#0x3
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   3037          
   3038            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000052   02....       LJMP    ?Subroutine6 & 0xFFFF
   3039          }
   3040          
   3041          /*********************************************************************
   3042           * @fn          ZDO_ParseSimpleDescBuf
   3043           *
   3044           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3045           *
   3046           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3047           * @param       desc - SimpleDescriptionFormat_t *
   3048           *
   3049           *              This routine allocates storage for the cluster IDs because
   3050           *              they are 16-bit and need to be aligned to be properly processed.
   3051           *              This routine returns non-zero if an allocation fails.
   3052           *
   3053           *              NOTE: This means that the caller or user of the input structure
   3054           *                    is responsible for freeing the memory
   3055           *
   3056           * @return      0: success
   3057           *              1: failure due to malloc failure.
   3058           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3059          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3060          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3061            uint8 num, i;
   3062          
   3063            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_638:
   \   000014   12....       LCALL   ?Subroutine20 & 0xFFFF
   3064            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_20:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_716:
   \   00001B   12....       LCALL   ?Subroutine19 & 0xFFFF
   3065            buf += 2;
   \                     ??CrossCallReturnLabel_571:
   \   00001E   5001         JNC     ??ZDO_ParseSimpleDescBuf_0
   \   000020   0F           INC     R7
   3066            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000021   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E9           MOV     A,R1
   \   000027   12....       LCALL   ?Subroutine27 & 0xFFFF
   3067            buf += 2;
   3068            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_31:
   \   00002A   C4           SWAP    A
   \   00002B   540F         ANL     A,#0xf
   3069          
   3070            desc->Reserved = 0;
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ?Subroutine46 & 0xFFFF
   3071            buf++;
   3072          
   3073            // move in input cluster list (if any). allocate aligned memory.
   3074            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_68:
   \   000039   F5..         MOV     ?V4,A
   \   00003B   EE           MOV     A,R6
   \   00003C   2404         ADD     A,#0x4
   \   00003E   FE           MOV     R6,A
   \   00003F   5001         JNC     ??ZDO_ParseSimpleDescBuf_1
   \   000041   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000042   8C82         MOV     DPL,R4
   \   000044   8D83         MOV     DPH,R5
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E5..         MOV     A,?V4
   \   00004E   F0           MOVX    @DPTR,A
   3075            if ( num )
   \   00004F   6036         JZ      ??ZDO_ParseSimpleDescBuf_2
   3076            {
   3077              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000051                ; Setup parameters for call to function osal_mem_alloc
   \   000051   12....       LCALL   ??Subroutine274_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_711:
   \   000054   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000057   8A..         MOV     ?V2,R2
   \   000059   8B..         MOV     ?V3,R3
   \   00005B   A8..         MOV     R0,?V2
   \   00005D   A9..         MOV     R1,?V3
   \   00005F   E5..         MOV     A,?V0
   \   000061   2407         ADD     A,#0x7
   \   000063   F5..         MOV     ?V2,A
   \   000065   E4           CLR     A
   \   000066   35..         ADDC    A,?V1
   \   000068   85..82       MOV     DPL,?V2
   \   00006B   12....       LCALL   ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   00006E   7003         JNZ     $+5
   \   000070   02....       LJMP    ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   3078              {
   3079                // malloc failed. we're done.
   3080                return 1;
   3081              }
   3082              for (i=0; i<num; ++i)
   \   000073   7A00         MOV     R2,#0x0
   \   000075   800A         SJMP    ??ZDO_ParseSimpleDescBuf_4
   3083              {
   3084                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000077   12....       LCALL   ?Subroutine57 & 0xFFFF
   3085                buf += 2;
   3086              }
   \                     ??CrossCallReturnLabel_88:
   \   00007A   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00007D   5001         JNC     ??ZDO_ParseSimpleDescBuf_6
   \   00007F   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000080   0A           INC     R2
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   000081   EA           MOV     A,R2
   \   000082   C3           CLR     C
   \   000083   95..         SUBB    A,?V4
   \   000085   40F0         JC      ??ZDO_ParseSimpleDescBuf_5
   3087            }
   3088          
   3089            // move in output cluster list (if any). allocate aligned memory.
   3090            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   000087   8E82         MOV     DPL,R6
   \   000089   8F83         MOV     DPH,R7
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F5..         MOV     ?V2,A
   \   00008E   A3           INC     DPTR
   \   00008F   AE82         MOV     R6,DPL
   \   000091   AF83         MOV     R7,DPH
   \   000093   85..82       MOV     DPL,?V0
   \   000096   85..83       MOV     DPH,?V1
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   F0           MOVX    @DPTR,A
   3091            if (num)
   \   0000A3   606E         JZ      ??ZDO_ParseSimpleDescBuf_7
   3092            {
   3093              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000A5                ; Setup parameters for call to function osal_mem_alloc
   \   0000A5   12....       LCALL   ??Subroutine274_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_712:
   \   0000A8   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000AB   8A..         MOV     ?V4,R2
   \   0000AD   8B..         MOV     ?V5,R3
   \   0000AF   A8..         MOV     R0,?V4
   \   0000B1   A9..         MOV     R1,?V5
   \   0000B3   85..82       MOV     DPL,?V0
   \   0000B6   85..83       MOV     DPH,?V1
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   0000C6   7034         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3094              {
   3095                // malloc failed. free input cluster list memory if there is any
   3096                if ( desc->pAppInClusterList != NULL )
   \   0000C8   85..82       MOV     DPL,?V0
   \   0000CB   85..83       MOV     DPH,?V1
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   0000D8   601E         JZ      ??ZDO_ParseSimpleDescBuf_3
   3097                {
   3098                  osal_mem_free(desc->pAppInClusterList);
   \   0000DA   E5..         MOV     A,?V0
   \   0000DC   2407         ADD     A,#0x7
   \   0000DE   F5..         MOV     ?V2,A
   \   0000E0   E4           CLR     A
   \   0000E1   35..         ADDC    A,?V1
   \   0000E3   F5..         MOV     ?V3,A
   \   0000E5                ; Setup parameters for call to function osal_mem_free
   \   0000E5   85..82       MOV     DPL,?V2
   \   0000E8   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   0000EB   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3099          
   3100                  desc->pAppInClusterList = NULL;
   \   0000EE   85..82       MOV     DPL,?V2
   \   0000F1   85..83       MOV     DPH,?V3
   \   0000F4   E4           CLR     A
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   F0           MOVX    @DPTR,A
   3101                }
   3102                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   0000F8   7901         MOV     R1,#0x1
   \   0000FA   8019         SJMP    ??ZDO_ParseSimpleDescBuf_9
   3103              }
   3104              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   0000FC   7A00         MOV     R2,#0x0
   \   0000FE   800D         SJMP    ??ZDO_ParseSimpleDescBuf_10
   3105              {
   3106                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   000100   12....       LCALL   ?Subroutine57 & 0xFFFF
   3107                buf += 2;
   3108              }
   \                     ??CrossCallReturnLabel_89:
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000109   5001         JNC     ??ZDO_ParseSimpleDescBuf_12
   \   00010B   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   00010C   0A           INC     R2
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   00010D   EA           MOV     A,R2
   \   00010E   C3           CLR     C
   \   00010F   95..         SUBB    A,?V2
   \   000111   40ED         JC      ??ZDO_ParseSimpleDescBuf_11
   3109            }
   3110            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   000113   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   000115   02....       LJMP    ??Subroutine276_0 & 0xFFFF
   3111          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   FA           MOV     R2,A
   \   000001                REQUIRE ??Subroutine275_0
   \   000001                ; // Fall through to label ??Subroutine275_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   C8           XCH     A,R0
   \   00000B   F9           MOV     R1,A
   \   00000C   EC           MOV     A,R4
   \   00000D   28           ADD     A,R0
   \   00000E   E4           CLR     A
   \   00000F   39           ADDC    A,R1
   \   000010   FD           MOV     R5,A
   \   000011   EA           MOV     A,R2
   \   000012   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000015   85..82       MOV     DPL,?V0
   \   000018   85..83       MOV     DPH,?V1
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   28           ADD     A,R0
   \   000009   FB           MOV     R3,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   39           ADDC    A,R1
   \   00000D   8B82         MOV     DPL,R3
   \   00000F   F583         MOV     DPH,A
   \   000011   EC           MOV     A,R4
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   ED           MOV     A,R5
   \   000015   F0           MOVX    @DPTR,A
   \   000016   EE           MOV     A,R6
   \   000017   2402         ADD     A,#0x2
   \   000019   FE           MOV     R6,A
   \   00001A   22           RET
   3112          
   3113          /*********************************************************************
   3114           * @fn          ZDO_ParseDeviceAnnce
   3115           *
   3116           * @brief       Parse a Device Announce message.
   3117           *
   3118           * @param       inMsg - Incoming message
   3119           * @param       pAnnce - place to put the parsed information
   3120           *
   3121           * @return      none
   3122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3123          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3124          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3125            uint8 *msg;
   3126          
   3127            // Parse incoming message
   3128            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine75 & 0xFFFF
   3129            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_662:
   \   00000C   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_717:
   \   00000F   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   3130            msg += 2;
   \                     ??CrossCallReturnLabel_573:
   \   000012   5001         JNC     ??ZDO_ParseDeviceAnnce_0
   \   000014   0F           INC     R7
   3131            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   000015                ; Setup parameters for call to function sAddrExtCpy
   \   000015   FC           MOV     R4,A
   \   000016   EF           MOV     A,R7
   \   000017   FD           MOV     R5,A
   \   000018   E5..         MOV     A,?V0
   \   00001A   2402         ADD     A,#0x2
   \   00001C   FA           MOV     R2,A
   \   00001D   E4           CLR     A
   \   00001E   35..         ADDC    A,?V1
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3132            msg += Z_EXTADDR_LEN;
   3133            pAnnce->capabilities = *msg;
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
   3134          }
   \   000033   02....       LJMP    ??Subroutine215_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003   22           RET
   3135          
   3136          /*********************************************************************
   3137           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3138           *
   3139           * @brief       This function handles parsing of the incoming Management
   3140           *              Network Update notify.
   3141           *
   3142           * @param       inMsg - incoming message (request)
   3143           *
   3144           * @return      a pointer to parsed response structure (NULL if not allocated).
   3145           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3146           *          by the calling function [osal_mem_free()].
   3147           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000003                REQUIRE ??Subroutine238_0
   \   000003                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3148          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3149          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3150            uint8 status;
   3151            uint32 scannedChannels = 0;
   \   00000A   75..00       MOV     ?V0,#0x0
   \   00000D   75..00       MOV     ?V1,#0x0
   \   000010   75..00       MOV     ?V2,#0x0
   \   000013   75..00       MOV     ?V3,#0x0
   3152            uint16 totalTransmissions = 0;
   \   000016   75..00       MOV     ?V4,#0x0
   \   000019   75..00       MOV     ?V5,#0x0
   3153            uint16 transmissionFailures = 0;
   \   00001C   7E00         MOV     R6,#0x0
   \   00001E   7F00         MOV     R7,#0x0
   3154            uint8 listCount = 0;
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E4           CLR     A
   \   000026   12....       LCALL   ?Subroutine35 & 0xFFFF
   3155            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_53:
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   12....       LCALL   ?Subroutine32 & 0xFFFF
   3156            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3157          
   3158            status = *msg++;
   \                     ??CrossCallReturnLabel_43:
   \   000036   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000039   C0E0         PUSH    A
   \   00003B   7405         MOV     A,#0x5
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   D0E0         POP     A
   \   000042   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000045   2401         ADD     A,#0x1
   \   000047   12....       LCALL   ?Subroutine42 & 0xFFFF
   3159            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_450:
   \   00004A   7405         MOV     A,#0x5
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   7055         JNZ     ??CrossCallReturnLabel_451
   3160            {
   3161              scannedChannels = osal_build_uint32( msg, 4 );
   \   000052                ; Setup parameters for call to function osal_build_uint32
   \   000052   7904         MOV     R1,#0x4
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   00005D   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000060   8A..         MOV     ?V0,R2
   \   000062   8B..         MOV     ?V1,R3
   \   000064   8C..         MOV     ?V2,R4
   \   000066   8D..         MOV     ?V3,R5
   3162              msg += 4;
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   2404         ADD     A,#0x4
   \   000071   12....       LCALL   ?Subroutine9 & 0xFFFF
   3163              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_0:
   \   000074   F5..         MOV     ?V4,A
   \   000076   E4           CLR     A
   \   000077   39           ADDC    A,R1
   \   000078   F5..         MOV     ?V5,A
   3164              msg += 2;
   \   00007A   85..82       MOV     DPL,?XSP + 0
   \   00007D   85..83       MOV     DPH,?XSP + 1
   \   000080   E0           MOVX    A,@DPTR
   \   000081   2402         ADD     A,#0x2
   \   000083   12....       LCALL   ?Subroutine9 & 0xFFFF
   3165              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_1:
   \   000086   FE           MOV     R6,A
   \   000087   E4           CLR     A
   \   000088   39           ADDC    A,R1
   \   000089   FF           MOV     R7,A
   3166              msg += 2;
   3167              listCount = *msg++;
   \   00008A   85..82       MOV     DPL,?XSP + 0
   \   00008D   85..83       MOV     DPH,?XSP + 1
   \   000090   12....       LCALL   ?Subroutine106 & 0xFFFF
   3168            }
   \                     ??CrossCallReturnLabel_177:
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   C0E0         PUSH    A
   \   000098   7402         MOV     A,#0x2
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   D0E0         POP     A
   \   00009F   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000A2   2403         ADD     A,#0x3
   \   0000A4   12....       LCALL   ?Subroutine42 & 0xFFFF
   3169          
   3170            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??CrossCallReturnLabel_451:
   \   0000A7                ; Setup parameters for call to function osal_mem_alloc
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   240A         ADD     A,#0xa
   \   0000AF   FA           MOV     R2,A
   \   0000B0   E4           CLR     A
   \   0000B1   3400         ADDC    A,#0x0
   \   0000B3   FB           MOV     R3,A
   \   0000B4   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B7   7403         MOV     A,#0x3
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL   ?Subroutine21 & 0xFFFF
   3171          
   3172            if ( pRsp )
   \                     ??CrossCallReturnLabel_394:
   \   0000BF   7403         MOV     A,#0x3
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   0000C7   7003         JNZ     $+5
   \   0000C9   02....       LJMP    ??ZDO_ParseMgmtNwkUpdateNotify_0 & 0xFFFF
   3173            {
   3174              pRsp->status = status;
   \   0000CC   7405         MOV     A,#0x5
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   C0E0         PUSH    A
   \   0000D4   7403         MOV     A,#0x3
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   0000DC   D0E0         POP     A
   \   0000DE   F0           MOVX    @DPTR,A
   3175              pRsp->scannedChannels = scannedChannels;
   \   0000DF   7403         MOV     A,#0x3
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000E7   A3           INC     DPTR
   \   0000E8   78..         MOV     R0,#?V0
   \   0000EA   12....       LCALL   ?L_MOV_TO_X
   3176              pRsp->totalTransmissions = totalTransmissions;
   \   0000ED   7403         MOV     A,#0x3
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000F5   A3           INC     DPTR
   \   0000F6   E5..         MOV     A,?V4
   \   0000F8   F0           MOVX    @DPTR,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   E5..         MOV     A,?V5
   \   0000FC   F0           MOVX    @DPTR,A
   3177              pRsp->transmissionFailures = transmissionFailures;
   \   0000FD   7403         MOV     A,#0x3
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   000105   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000108   EE           MOV     A,R6
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   A3           INC     DPTR
   \   00010B   EF           MOV     A,R7
   \   00010C   F0           MOVX    @DPTR,A
   3178              pRsp->listCount = listCount;
   \   00010D   7402         MOV     A,#0x2
   \   00010F   12....       LCALL   ?XSTACK_DISP0_8
   \   000112   E0           MOVX    A,@DPTR
   \   000113   C0E0         PUSH    A
   \   000115   7403         MOV     A,#0x3
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00011D   D0E0         POP     A
   \   00011F   F0           MOVX    @DPTR,A
   3179          
   3180              // Allocate a buffer big enough to handle the list.
   3181              if ( listCount > 0 )
   \   000120   7402         MOV     A,#0x2
   \   000122   12....       LCALL   ?XSTACK_DISP0_8
   \   000125   E0           MOVX    A,@DPTR
   \   000126   602B         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_0
   3182              {
   3183                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   000128                ; Setup parameters for call to function osal_memcpy
   \   000128   85..82       MOV     DPL,?XSP + 0
   \   00012B   85..83       MOV     DPH,?XSP + 1
   \   00012E   12....       LCALL   ?Subroutine64 & 0xFFFF
   3184              }
   3185            }
   \                     ??CrossCallReturnLabel_104:
   \   000131   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000134   7405         MOV     A,#0x5
   \   000136   12....       LCALL   ?XSTACK_DISP0_8
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   FC           MOV     R4,A
   \   00013B   7D00         MOV     R5,#0x0
   \   00013D   7406         MOV     A,#0x6
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   E0           MOVX    A,@DPTR
   \   000143   240A         ADD     A,#0xa
   \   000145   FA           MOV     R2,A
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   3400         ADDC    A,#0x0
   \   00014A   FB           MOV     R3,A
   \   00014B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00014E   7403         MOV     A,#0x3
   \   000150   12....       LCALL   ?DEALLOC_XSTACK8
   3186          
   3187            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   000153   7403         MOV     A,#0x3
   \   000155   12....       LCALL   ?XSTACK_DISP0_8
   \   000158   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   00015B   7406         MOV     A,#0x6
   \   00015D                REQUIRE ?Subroutine5
   \   00015D                ; // Fall through to label ?Subroutine5
   3188          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_719:
   \   000006   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FA           MOV     R2,A
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   EA           MOV     A,R2
   \   000018   2E           ADD     A,R6
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   85..82       MOV     DPL,?XSP + 0
   \   000009   85..83       MOV     DPH,?XSP + 1
   \   00000C   22           RET
   3189          
   3190          /*********************************************************************
   3191           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3192           *
   3193           * @brief       This function handles parsing the incoming Management
   3194           *              Network Update request and starts the request (if needed).
   3195           *
   3196           * @param       inMsg - incoming message (request)
   3197           * @param       pReq - pointer to place to parse message to
   3198           *
   3199           * @return      none
   3200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3201          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3202          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine122 & 0xFFFF
   3203            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_575:
   \   000008   12....       LCALL   ?Subroutine98 & 0xFFFF
   3204          
   3205            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_164:
   \   00000B   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00000E   EA           MOV     A,R2
   \   00000F   F8           MOV     R0,A
   \   000010   EB           MOV     A,R3
   \   000011   F9           MOV     R1,A
   \   000012   EC           MOV     A,R4
   \   000013   FA           MOV     R2,A
   \   000014   ED           MOV     A,R5
   \   000015   FB           MOV     R3,A
   \   000016   85..82       MOV     DPL,?V0
   \   000019   85..83       MOV     DPH,?V1
   \   00001C   12....       LCALL   ?XSTORE_R0123
   3206            msg += 4;
   3207            pReq->scanDuration = *msg++;
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   85..82       MOV     DPL,?V0
   \   00002C   85..83       MOV     DPH,?V1
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   F0           MOVX    @DPTR,A
   3208          
   3209            if ( pReq->scanDuration <= 0x05 )
   \   000034   C3           CLR     C
   \   000035   9406         SUBB    A,#0x6
   \   000037   5009         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   3210            {
   3211              // Request is to scan over channelMask
   3212              pReq->scanCount = *msg;
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   12....       LCALL   ?Subroutine205 & 0xFFFF
   3213            }
   \                     ??CrossCallReturnLabel_338:
   \   000040   8040         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   3214            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000042   85..82       MOV     DPL,?V0
   \   000045   85..83       MOV     DPH,?V1
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   64FE         XRL     A,#0xfe
   \   00004F   600E         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   000051   85..82       MOV     DPL,?V0
   \   000054   85..83       MOV     DPH,?V1
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F4           CPL     A
   \   00005D   7024         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3215            {
   3216              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3217              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000066   F0           MOVX    @DPTR,A
   \   000067   EE           MOV     A,R6
   \   000068   2406         ADD     A,#0x6
   \   00006A   FE           MOV     R6,A
   \   00006B   5001         JNC     ??ZDO_ParseMgmtNwkUpdateReq_4
   \   00006D   0F           INC     R7
   3218          
   3219              if ( pReq->scanDuration == 0xFF )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   00006E   85..82       MOV     DPL,?V0
   \   000071   85..83       MOV     DPH,?V1
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F4           CPL     A
   \   00007A   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3220              {
   3221                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00007C   12....       LCALL   ?Subroutine69 & 0xFFFF
   3222              }
   3223            }
   \                     ??CrossCallReturnLabel_114:
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000082   F0           MOVX    @DPTR,A
   3224          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000083   02....       LJMP    ??Subroutine215_0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CompareClusterLists::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_MatchEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveMatchMemory::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CopyMatchInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDMatchSendState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceBindMatchTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq
   3225          
   3226          /*********************************************************************
   3227          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      1     69   ZDMatchSendState
        0     37   -> APS_SetEndDeviceBindTimeout
        0     37   -> ZDO_RemoveMatchMemory
        0     45   -> ZDP_BindUnbindReq
        0     42   -> ZDP_SendData
        0     37   -> sAddrExtCpy
      0     43   ZDO_AnyClusterMatches
      1     10   ZDO_BuildSimpleDescBuf
      0     44   ZDO_CompareClusterLists
      0     39   ZDO_ConvertOTAClusters
      0     41   ZDO_CopyMatchInfo
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     17   -> osal_memcpy
      2      0   ZDO_EndDeviceBindMatchTimeoutCB
        2      0   -> ZDMatchSendState
      1     17   ZDO_EndDeviceTimeoutCB
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_DeviceJoiningInit
        2      0   -> sAddrExtCpy
      1     29   ZDO_MatchEndDeviceBind
        0     24   -> APS_SetEndDeviceBindTimeout
        0     24   -> ZDMatchSendState
        0     28   -> ZDO_CompareClusterLists
        0     24   -> ZDO_CopyMatchInfo
        0     24   -> ZDO_RemoveMatchMemory
        0     29   -> ZDP_SendData
        0     24   -> osal_mem_alloc
        0     27   -> osal_memcpy
        0     24   -> osal_memset
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     52   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     18   ZDO_ParseEPListRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      1     12   ZDO_ParseEndDeviceBindReq
        0     12   -> ZDO_ConvertOTAClusters
        0     12   -> osal_mem_alloc
        0     12   -> sAddrExtCpy
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtBindRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     23   ZDO_ParseMgmtNwkUpdateNotify
        0     20   -> osal_build_uint32
        0     20   -> osal_mem_alloc
        0     23   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      2     12   ZDO_ParseNodeDescRsp
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     23   ZDO_ParseSimpleDescBuf
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     18   ZDO_ParseUserDescRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      0     29   ZDO_ProcessBindUnbindReq
        0     25   -> APSME_BindRequest
        0     24   -> APSME_LookupNwkAddr
        0     25   -> APSME_UnBindRequest
        0     24   -> NLME_GetExtAddr
        0     24   -> ZDApp_NVUpdate
        0     24   -> ZDP_NwkAddrReq
        0     29   -> ZDP_SendData
        0     24   -> sAddrExtCmp
        0     24   -> sAddrExtCpy
      0     42   ZDO_ProcessDeviceAnnce
        0     42   -> AddrMgrEntryLookupExt
        0     42   -> AddrMgrEntryLookupNwk
        0     42   -> AddrMgrEntryUpdate
        0     42   -> AddrMgrExtAddrSet
        0     42   -> NLME_CheckNewAddrSet
        0     42   -> NLME_GetCoordExtAddr
        0     42   -> NLME_GetCoordShortAddr
        0     42   -> NLME_GetExtAddr
        0     42   -> NLME_GetShortAddr
        0     42   -> RTG_RemoveRtgEntry
        0     42   -> ZDO_ParseDeviceAnnce
        0     42   -> ZMacSetReq
        0     42   -> nwkNeighborRemoveAllStranded
        0     42   -> nwkNeighborUpdateNwkAddr
        0     42   -> osal_memset
        0     42   -> sAddrExtCmp
      1     36   ZDO_ProcessMatchDescReq
        0     29   -> NLME_IsAddressBroadcast
        0     31   -> ZDO_AnyClusterMatches
        0     29   -> ZDO_ConvertOTAClusters
        0     36   -> ZDP_EPRsp
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     32   -> osal_memcpy
        0     29   -> osal_msg_allocate
        0     29   -> osal_msg_send
      0     25   ZDO_ProcessMgmtBindReq
        0     20   -> APSME_GetRequest
        0     25   -> ZDP_MgmtBindRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      1     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     23   -> ZDP_SendData
        0     18   -> sAddrExtCmp
      1     63   ZDO_ProcessMgmtLqiReq
        0     58   -> AddrMgrEntryLookupNwk
        0     58   -> AssocCount
        0     58   -> AssocFindDevice
        0     58   -> NLME_GetRequest
        0     63   -> ZDP_MgmtLqiRsp
        0     58   -> osal_mem_alloc
        0     58   -> osal_mem_free
        0     58   -> osal_memset
        0     58   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
      0     22   ZDO_ProcessMgmtRtgReq
        0     17   -> NLME_GetRequest
        0     22   -> ZDP_MgmtRtgRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0     33   ZDO_ProcessUserDescReq
        0     33   -> ZDP_GenericRsp
        0     32   -> ZDP_UserDescRsp
        0     33   -> osal_nv_read
      1     40   ZDO_ProcessUserDescSet
        0     40   -> ZDP_SendData
        0     38   -> osal_memcpy
        0     39   -> osal_nv_write
      2     37   ZDO_RemoveMatchMemory
        2      0   -> osal_mem_free
      0     20   ZDO_StartDevice
        0     20   -> NLME_NetworkDiscoveryRequest
        0     20   -> NLME_OrphanJoinRequest
        0     20   -> nwk_ScanJoiningOrphan
        0     20   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      1     12   ZDO_UpdateNwkStatus
        0     12   -> NLME_GetExtAddr
        0     12   -> NLME_GetShortAddr
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_find
        0     12   -> osal_msg_send
        0     12   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??Subroutine212_0
       5  ??Subroutine213_0
       3  ??Subroutine214_0
       5  ??Subroutine215_0
       6  ??Subroutine216_0
       5  ??Subroutine217_0
       8  ??Subroutine218_0
       5  ??Subroutine219_0
       6  ??Subroutine220_0
       7  ??Subroutine221_0
       8  ??Subroutine222_0
       2  ??Subroutine223_0
       9  ??Subroutine224_0
       5  ??Subroutine225_0
       1  ??Subroutine226_0
       1  ??Subroutine227_0
       1  ??Subroutine228_0
       5  ??Subroutine229_0
       7  ??Subroutine230_0
       5  ??Subroutine231_0
       6  ??Subroutine232_0
       5  ??Subroutine233_0
       6  ??Subroutine234_0
       1  ??Subroutine235_0
       2  ??Subroutine236_0
       4  ??Subroutine237_0
       1  ??Subroutine238_0
       4  ??Subroutine239_0
       1  ??Subroutine240_0
       6  ??Subroutine241_0
       6  ??Subroutine242_0
       4  ??Subroutine243_0
       2  ??Subroutine244_0
       4  ??Subroutine245_0
       2  ??Subroutine246_0
       6  ??Subroutine247_0
       5  ??Subroutine248_0
       8  ??Subroutine249_0
       6  ??Subroutine250_0
       7  ??Subroutine251_0
       8  ??Subroutine252_0
       2  ??Subroutine253_0
       6  ??Subroutine254_0
       4  ??Subroutine255_0
       5  ??Subroutine256_0
       1  ??Subroutine257_0
       5  ??Subroutine258_0
       8  ??Subroutine259_0
       4  ??Subroutine260_0
       4  ??Subroutine261_0
       6  ??Subroutine262_0
      10  ??Subroutine263_0
       6  ??Subroutine264_0
       3  ??Subroutine265_0
       5  ??Subroutine266_0
       8  ??Subroutine267_0
       4  ??Subroutine268_0
       6  ??Subroutine269_0
       4  ??Subroutine270_0
       6  ??Subroutine271_0
       4  ??Subroutine272_0
       5  ??Subroutine273_0
       7  ??Subroutine274_0
       9  ??Subroutine275_0
       5  ??Subroutine276_0
       9  ??Subroutine277_0
       7  ?Subroutine0
       5  ?Subroutine1
      42  ?Subroutine10
      12  ?Subroutine100
      10  ?Subroutine101
      12  ?Subroutine102
       4  ?Subroutine103
       4  ?Subroutine104
       2  ?Subroutine105
       4  ?Subroutine106
       8  ?Subroutine107
       7  ?Subroutine108
      12  ?Subroutine109
      27  ?Subroutine11
       4  ?Subroutine110
       2  ?Subroutine111
      10  ?Subroutine112
      13  ?Subroutine113
       7  ?Subroutine114
       9  ?Subroutine115
      12  ?Subroutine116
       1  ?Subroutine117
      16  ?Subroutine118
       7  ?Subroutine119
      20  ?Subroutine12
       1  ?Subroutine120
       7  ?Subroutine121
       4  ?Subroutine122
       4  ?Subroutine123
       4  ?Subroutine124
       4  ?Subroutine125
       4  ?Subroutine126
       1  ?Subroutine127
      11  ?Subroutine128
      17  ?Subroutine129
      23  ?Subroutine13
       3  ?Subroutine130
      21  ?Subroutine131
       9  ?Subroutine132
      15  ?Subroutine133
      14  ?Subroutine134
       4  ?Subroutine135
       8  ?Subroutine136
       2  ?Subroutine137
       8  ?Subroutine138
       7  ?Subroutine139
      17  ?Subroutine14
       8  ?Subroutine140
       5  ?Subroutine141
       4  ?Subroutine142
       6  ?Subroutine143
       9  ?Subroutine144
       9  ?Subroutine145
       4  ?Subroutine146
       1  ?Subroutine147
       6  ?Subroutine148
       1  ?Subroutine149
       9  ?Subroutine15
       4  ?Subroutine150
      10  ?Subroutine151
       6  ?Subroutine152
       8  ?Subroutine153
       4  ?Subroutine154
       4  ?Subroutine155
      10  ?Subroutine156
       4  ?Subroutine157
       1  ?Subroutine158
       8  ?Subroutine159
       9  ?Subroutine16
      12  ?Subroutine160
      13  ?Subroutine161
       9  ?Subroutine162
       6  ?Subroutine163
       7  ?Subroutine164
       5  ?Subroutine165
       1  ?Subroutine166
       4  ?Subroutine167
       5  ?Subroutine168
      14  ?Subroutine169
       5  ?Subroutine17
      24  ?Subroutine170
      14  ?Subroutine171
       9  ?Subroutine172
      16  ?Subroutine173
      13  ?Subroutine174
       7  ?Subroutine175
       3  ?Subroutine176
       4  ?Subroutine177
       4  ?Subroutine178
       5  ?Subroutine179
       5  ?Subroutine18
       8  ?Subroutine180
       1  ?Subroutine181
      13  ?Subroutine182
       2  ?Subroutine183
      13  ?Subroutine184
       4  ?Subroutine185
       5  ?Subroutine186
       6  ?Subroutine187
       2  ?Subroutine188
      11  ?Subroutine189
       1  ?Subroutine19
      12  ?Subroutine190
       7  ?Subroutine191
      19  ?Subroutine192
       8  ?Subroutine193
       6  ?Subroutine194
       9  ?Subroutine195
      10  ?Subroutine196
       1  ?Subroutine197
      12  ?Subroutine198
       4  ?Subroutine199
       3  ?Subroutine2
       8  ?Subroutine20
      10  ?Subroutine200
       9  ?Subroutine201
      11  ?Subroutine202
       6  ?Subroutine203
       6  ?Subroutine204
      18  ?Subroutine205
       5  ?Subroutine206
      11  ?Subroutine207
       8  ?Subroutine208
       9  ?Subroutine209
       1  ?Subroutine21
       7  ?Subroutine210
       5  ?Subroutine211
      12  ?Subroutine22
      22  ?Subroutine23
      28  ?Subroutine24
       6  ?Subroutine25
       8  ?Subroutine26
       6  ?Subroutine27
       8  ?Subroutine28
       8  ?Subroutine29
       4  ?Subroutine3
       6  ?Subroutine30
       5  ?Subroutine31
       4  ?Subroutine32
       4  ?Subroutine33
      12  ?Subroutine34
       8  ?Subroutine35
       4  ?Subroutine36
       7  ?Subroutine37
       6  ?Subroutine38
       2  ?Subroutine39
       2  ?Subroutine4
       6  ?Subroutine40
       6  ?Subroutine41
       3  ?Subroutine42
      10  ?Subroutine43
      12  ?Subroutine44
       8  ?Subroutine45
       7  ?Subroutine46
       7  ?Subroutine47
      27  ?Subroutine48
       9  ?Subroutine49
       3  ?Subroutine5
       4  ?Subroutine50
       5  ?Subroutine51
       4  ?Subroutine52
      17  ?Subroutine53
       6  ?Subroutine54
       9  ?Subroutine55
      21  ?Subroutine56
      28  ?Subroutine57
      29  ?Subroutine58
       4  ?Subroutine59
       9  ?Subroutine6
      14  ?Subroutine60
       3  ?Subroutine61
       9  ?Subroutine62
       8  ?Subroutine63
      13  ?Subroutine64
       4  ?Subroutine65
       8  ?Subroutine66
      38  ?Subroutine67
       9  ?Subroutine68
       4  ?Subroutine69
       6  ?Subroutine7
      13  ?Subroutine70
       5  ?Subroutine71
       8  ?Subroutine72
       7  ?Subroutine73
      14  ?Subroutine74
       3  ?Subroutine75
      10  ?Subroutine76
      10  ?Subroutine77
       4  ?Subroutine78
       6  ?Subroutine79
       5  ?Subroutine8
       5  ?Subroutine80
       8  ?Subroutine81
      12  ?Subroutine82
       4  ?Subroutine83
      11  ?Subroutine84
      12  ?Subroutine85
      18  ?Subroutine86
       4  ?Subroutine87
      10  ?Subroutine88
       7  ?Subroutine89
      26  ?Subroutine9
       1  ?Subroutine90
       3  ?Subroutine91
       6  ?Subroutine92
       3  ?Subroutine93
       6  ?Subroutine94
       6  ?Subroutine95
       3  ?Subroutine96
       1  ?Subroutine97
      10  ?Subroutine98
      13  ?Subroutine99
       3  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
     664  ZDMatchSendState
       6  ZDMatchSendState::?relay
      52  ZDOBuildBuf
      84  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     188  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
     114  ZDO_CompareClusterLists
       6  ZDO_CompareClusterLists::?relay
      59  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
     237  ZDO_CopyMatchInfo
       6  ZDO_CopyMatchInfo::?relay
       2  ZDO_EDBind
      16  ZDO_EndDeviceBindMatchTimeoutCB
       6  ZDO_EndDeviceBindMatchTimeoutCB::?relay
     197  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
      43  ZDO_Init
       6  ZDO_Init::?relay
     615  ZDO_MatchEndDeviceBind
       6  ZDO_MatchEndDeviceBind::?relay
     211  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
      86  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
      54  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
      85  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     277  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
     232  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     181  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     146  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     349  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     134  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     143  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     282  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     151  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
      51  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     280  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
      63  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
      85  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     123  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     309  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     385  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
    1177  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     272  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
      85  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     169  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
     655  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     128  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
      83  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     301  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
      71  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
      71  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
      65  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     149  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
     155  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     303  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     131  ZDO_RemoveMatchMemory
       6  ZDO_RemoveMatchMemory::?relay
     186  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      51  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
     123  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  apsChannelMask
       2  matchED
       1  scanCnt

 
 12 147 bytes in segment BANKED_CODE
    294 bytes in segment BANK_RELAYS
     61 bytes in segment XDATA_Z
 
    294 bytes of CODE     memory
 12 147 bytes of HUGECODE memory
     61 bytes of XDATA    memory

Errors: none
Warnings: none
